{"ast":null,"code":"var _jsxFileName = \"/Users/jimmyzhou/Desktop/Projects/scripty/frontend/src/components/mindmaptitle.jsx\",\n  _s = $RefreshSig$();\n// src/components/MindMapTitleEditor.jsx\nimport React, { useState, useEffect, useRef } from 'react';\nimport './mindmaptitle.css'; // We'll create this CSS next\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MindMapTitleEditor = ({\n  title,\n  onTitleChange\n}) => {\n  _s();\n  const [isEditing, setIsEditing] = useState(false);\n  const [editableTitle, setEditableTitle] = useState(title);\n  const inputRef = useRef(null);\n\n  // Update editableTitle when the 'title' prop changes (e.g., map load)\n  useEffect(() => {\n    setEditableTitle(title);\n  }, [title]);\n\n  // Focus the input when editing starts\n  useEffect(() => {\n    if (isEditing && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [isEditing]);\n  const handleTitleChange = e => {\n    setEditableTitle(e.target.value);\n  };\n  const handleTitleBlur = () => {\n    const trimmedTitle = editableTitle.trim();\n    // If title is empty or default, revert to original prop or a generic title\n    if (trimmedTitle === '' || trimmedTitle === 'Untitled Map') {\n      onTitleChange(title || 'Untitled Map'); // Revert to original or default if empty\n    } else {\n      onTitleChange(trimmedTitle);\n    }\n    setIsEditing(false);\n  };\n  const handleTitleKeyDown = e => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      handleTitleBlur();\n    } else if (e.key === 'Escape') {\n      setEditableTitle(title); // Revert to original title on escape\n      setIsEditing(false);\n      e.preventDefault();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mindmap-title-editor\",\n    children: isEditing ? /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: inputRef,\n      type: \"text\",\n      value: editableTitle,\n      onChange: handleTitleChange,\n      onBlur: handleTitleBlur,\n      onKeyDown: handleTitleKeyDown,\n      className: \"title-input\",\n      \"aria-label\": \"Edit map title\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title-display\",\n      onClick: () => setIsEditing(true),\n      title: \"Click to edit map title\",\n      children: title || \"Untitled Map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(MindMapTitleEditor, \"wbSAHgFeCuLPTJFqf7IF/3YLBRg=\");\n_c = MindMapTitleEditor;\nexport default MindMapTitleEditor;\nvar _c;\n$RefreshReg$(_c, \"MindMapTitleEditor\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","MindMapTitleEditor","title","onTitleChange","_s","isEditing","setIsEditing","editableTitle","setEditableTitle","inputRef","current","focus","handleTitleChange","e","target","value","handleTitleBlur","trimmedTitle","trim","handleTitleKeyDown","key","preventDefault","className","children","ref","type","onChange","onBlur","onKeyDown","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/jimmyzhou/Desktop/Projects/scripty/frontend/src/components/mindmaptitle.jsx"],"sourcesContent":["// src/components/MindMapTitleEditor.jsx\nimport React, { useState, useEffect, useRef } from 'react';\nimport './mindmaptitle.css'; // We'll create this CSS next\n\nconst MindMapTitleEditor = ({ title, onTitleChange }) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [editableTitle, setEditableTitle] = useState(title);\n  const inputRef = useRef(null);\n\n  // Update editableTitle when the 'title' prop changes (e.g., map load)\n  useEffect(() => {\n    setEditableTitle(title);\n  }, [title]);\n\n  // Focus the input when editing starts\n  useEffect(() => {\n    if (isEditing && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [isEditing]);\n\n  const handleTitleChange = (e) => {\n    setEditableTitle(e.target.value);\n  };\n\n  const handleTitleBlur = () => {\n    const trimmedTitle = editableTitle.trim();\n    // If title is empty or default, revert to original prop or a generic title\n    if (trimmedTitle === '' || trimmedTitle === 'Untitled Map') {\n      onTitleChange(title || 'Untitled Map'); // Revert to original or default if empty\n    } else {\n      onTitleChange(trimmedTitle);\n    }\n    setIsEditing(false);\n  };\n\n  const handleTitleKeyDown = (e) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      handleTitleBlur();\n    } else if (e.key === 'Escape') {\n      setEditableTitle(title); // Revert to original title on escape\n      setIsEditing(false);\n      e.preventDefault();\n    }\n  };\n\n  return (\n    <div className=\"mindmap-title-editor\">\n      {isEditing ? (\n        <input\n          ref={inputRef}\n          type=\"text\"\n          value={editableTitle}\n          onChange={handleTitleChange}\n          onBlur={handleTitleBlur}\n          onKeyDown={handleTitleKeyDown}\n          className=\"title-input\"\n          aria-label=\"Edit map title\"\n        />\n      ) : (\n        <h1 className=\"title-display\" onClick={() => setIsEditing(true)} title=\"Click to edit map title\">\n          {title || \"Untitled Map\"}\n        </h1>\n      )}\n    </div>\n  );\n};\n\nexport default MindMapTitleEditor;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,oBAAoB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,kBAAkB,GAAGA,CAAC;EAAEC,KAAK;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EACvD,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACW,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAACM,KAAK,CAAC;EACzD,MAAMO,QAAQ,GAAGX,MAAM,CAAC,IAAI,CAAC;;EAE7B;EACAD,SAAS,CAAC,MAAM;IACdW,gBAAgB,CAACN,KAAK,CAAC;EACzB,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;;EAEX;EACAL,SAAS,CAAC,MAAM;IACd,IAAIQ,SAAS,IAAII,QAAQ,CAACC,OAAO,EAAE;MACjCD,QAAQ,CAACC,OAAO,CAACC,KAAK,CAAC,CAAC;IAC1B;EACF,CAAC,EAAE,CAACN,SAAS,CAAC,CAAC;EAEf,MAAMO,iBAAiB,GAAIC,CAAC,IAAK;IAC/BL,gBAAgB,CAACK,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAClC,CAAC;EAED,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC5B,MAAMC,YAAY,GAAGV,aAAa,CAACW,IAAI,CAAC,CAAC;IACzC;IACA,IAAID,YAAY,KAAK,EAAE,IAAIA,YAAY,KAAK,cAAc,EAAE;MAC1Dd,aAAa,CAACD,KAAK,IAAI,cAAc,CAAC,CAAC,CAAC;IAC1C,CAAC,MAAM;MACLC,aAAa,CAACc,YAAY,CAAC;IAC7B;IACAX,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC;EAED,MAAMa,kBAAkB,GAAIN,CAAC,IAAK;IAChC,IAAIA,CAAC,CAACO,GAAG,KAAK,OAAO,EAAE;MACrBP,CAAC,CAACQ,cAAc,CAAC,CAAC;MAClBL,eAAe,CAAC,CAAC;IACnB,CAAC,MAAM,IAAIH,CAAC,CAACO,GAAG,KAAK,QAAQ,EAAE;MAC7BZ,gBAAgB,CAACN,KAAK,CAAC,CAAC,CAAC;MACzBI,YAAY,CAAC,KAAK,CAAC;MACnBO,CAAC,CAACQ,cAAc,CAAC,CAAC;IACpB;EACF,CAAC;EAED,oBACErB,OAAA;IAAKsB,SAAS,EAAC,sBAAsB;IAAAC,QAAA,EAClClB,SAAS,gBACRL,OAAA;MACEwB,GAAG,EAAEf,QAAS;MACdgB,IAAI,EAAC,MAAM;MACXV,KAAK,EAAER,aAAc;MACrBmB,QAAQ,EAAEd,iBAAkB;MAC5Be,MAAM,EAAEX,eAAgB;MACxBY,SAAS,EAAET,kBAAmB;MAC9BG,SAAS,EAAC,aAAa;MACvB,cAAW;IAAgB;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC,gBAEFhC,OAAA;MAAIsB,SAAS,EAAC,eAAe;MAACW,OAAO,EAAEA,CAAA,KAAM3B,YAAY,CAAC,IAAI,CAAE;MAACJ,KAAK,EAAC,yBAAyB;MAAAqB,QAAA,EAC7FrB,KAAK,IAAI;IAAc;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtB;EACL;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC5B,EAAA,CA/DIH,kBAAkB;AAAAiC,EAAA,GAAlBjC,kBAAkB;AAiExB,eAAeA,kBAAkB;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}