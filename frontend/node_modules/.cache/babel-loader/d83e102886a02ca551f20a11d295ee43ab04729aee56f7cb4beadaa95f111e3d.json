{"ast":null,"code":"var _jsxFileName = \"/Users/jimmyzhou/Desktop/Projects/scripty/frontend/src/components/mindmapcanvas.jsx\",\n  _s = $RefreshSig$();\nimport React, { useMemo } from 'react';\nimport MindMapConnection from './mindmapconnections';\nimport MindMapNode from './mindmapnode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TYPICAL_NODE_WIDTH = 140;\nconst TYPICAL_NODE_HEIGHT = 50;\nconst MindMapCanvas = ({\n  nodes,\n  connections,\n  draggedNode,\n  selectedNode,\n  translateX,\n  translateY,\n  handleMouseDown,\n  openNodeEditor,\n  canvasWrapperRef,\n  svgRef\n}) => {\n  _s();\n  const connectionPaths = useMemo(() => {\n    return connections.map(connection => {\n      const fromNode = nodes.find(n => n.id === connection.from);\n      const toNode = nodes.find(n => n.id === connection.to);\n      if (!fromNode || !toNode) return {\n        ...connection,\n        path: ''\n      };\n      const fromX = fromNode.x + TYPICAL_NODE_WIDTH / 2;\n      const fromY = fromNode.y + TYPICAL_NODE_HEIGHT / 2;\n      const toX = toNode.x + TYPICAL_NODE_WIDTH / 2;\n      const toY = toNode.y + TYPICAL_NODE_HEIGHT / 2;\n      const midX = (fromX + toX) / 2;\n      const midY = (fromY + toY) / 2;\n      const dx = toX - fromX;\n      const dy = toY - fromY;\n      const dist = Math.sqrt(dx * dx + dy * dy);\n      const angle = Math.atan2(dy, dx);\n      const offsetFactor = dist / 4;\n      const controlX = midX + offsetFactor * Math.sin(angle);\n      const controlY = midY - offsetFactor * Math.cos(angle);\n      const path = `M ${fromX} ${fromY} Q ${controlX} ${controlY} ${toX} ${toY}`;\n      return {\n        ...connection,\n        path\n      };\n    });\n  }, [nodes, connections]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mindmap-canvas-wrapper\",\n    ref: canvasWrapperRef,\n    style: {\n      transform: `translate(${translateX}px, ${translateY}px)`,\n      transformOrigin: '0 0'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      className: \"mindmap-connections\",\n      children: connectionPaths.map(connection => /*#__PURE__*/_jsxDEV(MindMapConnection, {\n        path: connection.path\n      }, `${connection.from}-${connection.to}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), nodes.map(node => /*#__PURE__*/_jsxDEV(MindMapNode, {\n      node: node,\n      isBeingDragged: draggedNode === node.id,\n      isSelected: selectedNode === node.id,\n      onMouseDown: e => handleMouseDown(e, node.id),\n      openNodeEditor: openNodeEditor\n    }, node.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(MindMapCanvas, \"hwxS+a7NMaR7FJAScyAbNdVsLqo=\");\n_c = MindMapCanvas;\nexport default MindMapCanvas;\nvar _c;\n$RefreshReg$(_c, \"MindMapCanvas\");","map":{"version":3,"names":["React","useMemo","MindMapConnection","MindMapNode","jsxDEV","_jsxDEV","TYPICAL_NODE_WIDTH","TYPICAL_NODE_HEIGHT","MindMapCanvas","nodes","connections","draggedNode","selectedNode","translateX","translateY","handleMouseDown","openNodeEditor","canvasWrapperRef","svgRef","_s","connectionPaths","map","connection","fromNode","find","n","id","from","toNode","to","path","fromX","x","fromY","y","toX","toY","midX","midY","dx","dy","dist","Math","sqrt","angle","atan2","offsetFactor","controlX","sin","controlY","cos","className","ref","style","transform","transformOrigin","children","fileName","_jsxFileName","lineNumber","columnNumber","node","isBeingDragged","isSelected","onMouseDown","e","_c","$RefreshReg$"],"sources":["/Users/jimmyzhou/Desktop/Projects/scripty/frontend/src/components/mindmapcanvas.jsx"],"sourcesContent":["import React, { useMemo } from 'react';\nimport MindMapConnection from './mindmapconnections';\nimport MindMapNode from './mindmapnode';\n\nconst TYPICAL_NODE_WIDTH = 140;\nconst TYPICAL_NODE_HEIGHT = 50;\n\nconst MindMapCanvas = ({\n  nodes,\n  connections,\n  draggedNode,\n  selectedNode,\n  translateX,\n  translateY,\n  handleMouseDown,\n  openNodeEditor,\n  canvasWrapperRef, \n  svgRef            \n}) => {\n  const connectionPaths = useMemo(() => {\n    return connections.map(connection => {\n      const fromNode = nodes.find(n => n.id === connection.from);\n      const toNode = nodes.find(n => n.id === connection.to);\n\n      if (!fromNode || !toNode) return { ...connection, path: '' };\n\n      const fromX = fromNode.x + TYPICAL_NODE_WIDTH / 2;\n      const fromY = fromNode.y + TYPICAL_NODE_HEIGHT / 2;\n\n      const toX = toNode.x + TYPICAL_NODE_WIDTH / 2;\n      const toY = toNode.y + TYPICAL_NODE_HEIGHT / 2;\n\n      const midX = (fromX + toX) / 2;\n      const midY = (fromY + toY) / 2;\n\n      const dx = toX - fromX;\n      const dy = toY - fromY;\n      const dist = Math.sqrt(dx * dx + dy * dy);\n      const angle = Math.atan2(dy, dx);\n\n      const offsetFactor = dist / 4;\n      const controlX = midX + offsetFactor * Math.sin(angle);\n      const controlY = midY - offsetFactor * Math.cos(angle);\n\n      const path = `M ${fromX} ${fromY} Q ${controlX} ${controlY} ${toX} ${toY}`;\n\n      return { ...connection, path };\n    });\n  }, [nodes, connections]);\n\n  return (\n    <div\n      className=\"mindmap-canvas-wrapper\"\n      ref={canvasWrapperRef} \n      style={{\n        transform: `translate(${translateX}px, ${translateY}px)`,\n        transformOrigin: '0 0',\n      }}\n    >\n      <svg ref={svgRef} className=\"mindmap-connections\"> \n        {connectionPaths.map((connection) => (\n          <MindMapConnection\n            key={`${connection.from}-${connection.to}`}\n            path={connection.path}\n          />\n        ))}\n      </svg>\n\n      {nodes.map((node) => (\n        <MindMapNode\n          key={node.id}\n          node={node}\n          isBeingDragged={draggedNode === node.id}\n          isSelected={selectedNode === node.id}\n          onMouseDown={(e) => handleMouseDown(e, node.id)}\n          openNodeEditor={openNodeEditor}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default MindMapCanvas;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}