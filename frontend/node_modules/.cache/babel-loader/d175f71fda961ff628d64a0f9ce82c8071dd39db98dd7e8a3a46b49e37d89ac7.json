{"ast":null,"code":"var _jsxFileName = \"/Users/jimmyzhou/Desktop/Projects/scripty/frontend/src/pages/mindmap.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useCallback, useEffect, useMemo } from 'react';\nimport MindMapCanvas from '../components/mindmapcanvas';\nimport MindMapToolbar from '../components/mindmaptoolbar';\nimport MindMapInstructions from '../components/mindmapinstructions';\nimport LargeTextEditor from '../components/mindmaptexteditor';\nimport Auth from '../pages/auth'; // Assuming you have an Auth component for login/register\nimport './mindmap.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_BACKEND_API_URL || 'http://localhost:5001/api';\nconst MindMap = () => {\n  _s();\n  var _nodes$find, _session$user;\n  const [nodes, setNodes] = useState([{\n    id: '1',\n    x: 400,\n    y: 300,\n    title: 'Central Idea',\n    text: '',\n    isRoot: true,\n    color: '#dc2626'\n  }]);\n  const [connections, setConnections] = useState([]);\n  const [draggedNode, setDraggedNode] = useState(null);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [isLargeEditorOpen, setIsLargeEditorOpen] = useState(false);\n  const [largeEditorNodeId, setLargeEditorNodeId] = useState(null);\n  const [largeEditorTitle, setLargeEditorTitle] = useState(''); // <--- CORRECTED LINE HERE\n  const [largeEditorText, setLargeEditorText] = useState('');\n  const [translateX, setTranslateX] = useState(0);\n  const [translateY, setTranslateY] = useState(0);\n  const [isPanning, setIsPanning] = useState(false);\n  const panStartRef = useRef({\n    x: 0,\n    y: 0,\n    startTranslateX: 0,\n    startTranslateY: 0\n  });\n  const svgRef = useRef(null);\n  const containerRef = useRef(null);\n  const canvasWrapperRef = useRef(null);\n  const dragDataRef = useRef({\n    isDragging: false,\n    offset: {\n      x: 0,\n      y: 0\n    }\n  });\n  const animationFrameRef = useRef(null);\n  const colors = useMemo(() => ['#EF4444', '#F97316', '#EAB308', '#22C55E', '#3B82F6', '#A855F7', '#EC4899'], []);\n\n  // --- State for Backend Integration ---\n  const [session, setSession] = useState(null); // Stores user session (e.g., { user: { email }, token })\n  const [currentMindMapId, setCurrentMindMapId] = useState(null); // ID of the currently loaded map\n  const [currentMapTitle, setCurrentMapTitle] = useState('Untitled Map');\n  const [userMindMaps, setUserMindMaps] = useState([]); // List of user's saved maps\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('Welcome! Login or register to start creating.');\n\n  // --- Authentication & Session Management ---\n  useEffect(() => {\n    // Attempt to load session from localStorage on component mount\n    const storedSession = localStorage.getItem('mindmapSession');\n    if (storedSession) {\n      try {\n        const parsedSession = JSON.parse(storedSession);\n        // Basic validation for the session structure\n        if (parsedSession && parsedSession.token && parsedSession.user) {\n          setSession(parsedSession);\n          setMessage(`Welcome back, ${parsedSession.user.email}!`);\n          // Fetch user's mind maps immediately after successful session load\n          fetchUserMindMaps(parsedSession.token);\n        } else {\n          localStorage.removeItem('mindmapSession'); // Clear invalid session\n        }\n      } catch (e) {\n        console.error(\"Failed to parse session from localStorage\", e);\n        localStorage.removeItem('mindmapSession');\n      }\n    } else {\n      setMessage('Welcome! Please login or register.');\n    }\n  }, []); // Run once on component mount\n\n  const handleAuthSuccess = useCallback(newSession => {\n    setSession(newSession);\n    localStorage.setItem('mindmapSession', JSON.stringify(newSession));\n    setMessage(`Logged in as ${newSession.user.email}`);\n    fetchUserMindMaps(newSession.token); // Fetch maps for the newly logged-in user\n    // Optionally, if you want to immediately load a \"new\" map after login:\n    handleNewMap();\n  }, []);\n  const handleLogout = useCallback(() => {\n    setSession(null);\n    localStorage.removeItem('mindmapSession');\n    // Clear current map data and reset to a new default map\n    setNodes([{\n      id: '1',\n      x: 400,\n      y: 300,\n      title: 'Central Idea',\n      text: '',\n      isRoot: true,\n      color: '#dc2626'\n    }]);\n    setConnections([]);\n    setTranslateX(0);\n    setTranslateY(0);\n    setCurrentMindMapId(null);\n    setCurrentMapTitle('Untitled Map');\n    setUserMindMaps([]); // Clear user maps on logout\n    setMessage('You have been logged out.');\n  }, []);\n\n  // --- API Calls ---\n\n  const fetchUserMindMaps = useCallback(async token => {\n    setLoading(true);\n    setMessage('Fetching your mind maps...');\n    try {\n      const response = await fetch(`${API_BASE_URL}/mindmaps`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (!response.ok) {\n        if (response.status === 401) {\n          setMessage('Session expired or unauthorized. Please log in again.');\n          handleLogout(); // Log out if unauthorized\n          return;\n        }\n        throw new Error(`Error fetching mind maps: ${response.statusText}`);\n      }\n      const data = await response.json();\n      setUserMindMaps(data);\n      setMessage('Your mind maps loaded!');\n    } catch (error) {\n      console.error('Fetch mind maps error:', error);\n      setMessage(`Failed to fetch mind maps: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  }, [handleLogout]);\n  const saveMindMapToServer = useCallback(async () => {\n    if (!session || !session.token) {\n      setMessage('Please log in to save your mind map.');\n      return;\n    }\n    setLoading(true);\n    setMessage('Saving mind map...');\n    try {\n      const mindMapData = {\n        title: currentMapTitle,\n        nodes,\n        connections,\n        viewState: {\n          translateX,\n          translateY\n        }\n      };\n      let response;\n      if (currentMindMapId) {\n        // Update existing mind map\n        response = await fetch(`${API_BASE_URL}/mindmaps/${currentMindMapId}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${session.token}`\n          },\n          body: JSON.stringify(mindMapData)\n        });\n      } else {\n        // Create new mind map\n        response = await fetch(`${API_BASE_URL}/mindmaps`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${session.token}`\n          },\n          body: JSON.stringify(mindMapData)\n        });\n      }\n      if (!response.ok) {\n        if (response.status === 401) {\n          setMessage('Session expired or unauthorized. Please log in again to save.');\n          handleLogout();\n          return;\n        }\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to save mind map');\n      }\n      const savedMap = await response.json();\n      setCurrentMindMapId(savedMap._id);\n      setCurrentMapTitle(savedMap.title);\n      setMessage('Mind map saved successfully!');\n      fetchUserMindMaps(session.token); // Refresh the list of maps\n    } catch (error) {\n      console.error('Save mind map error:', error);\n      setMessage(`Error saving mind map: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  }, [nodes, connections, translateX, translateY, currentMindMapId, currentMapTitle, session, fetchUserMindMaps, handleLogout]);\n  const loadMindMapFromServer = useCallback(async mapId => {\n    if (!session || !session.token) {\n      setMessage('Please log in to load a mind map.');\n      return;\n    }\n    setLoading(true);\n    setMessage('Loading mind map...');\n    try {\n      var _data$viewState, _data$viewState2;\n      const response = await fetch(`${API_BASE_URL}/mindmaps/${mapId}`, {\n        headers: {\n          'Authorization': `Bearer ${session.token}`\n        }\n      });\n      if (!response.ok) {\n        if (response.status === 401) {\n          setMessage('Session expired or unauthorized. Please log in again.');\n          handleLogout();\n          return;\n        }\n        throw new Error(`Error loading mind map: ${response.statusText}`);\n      }\n      const data = await response.json();\n      setNodes(data.nodes || []);\n      setConnections(data.connections || []);\n      setTranslateX(((_data$viewState = data.viewState) === null || _data$viewState === void 0 ? void 0 : _data$viewState.translateX) || 0);\n      setTranslateY(((_data$viewState2 = data.viewState) === null || _data$viewState2 === void 0 ? void 0 : _data$viewState2.translateY) || 0);\n      setCurrentMindMapId(data._id);\n      setCurrentMapTitle(data.title);\n      setMessage(`Mind map \"${data.title}\" loaded!`);\n    } catch (error) {\n      console.error('Load mind map error:', error);\n      setMessage(`Failed to load mind map: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  }, [session, handleLogout]);\n  const handleNewMap = useCallback(() => {\n    setNodes([{\n      id: '1',\n      x: 400,\n      y: 300,\n      title: 'Central Idea',\n      text: '',\n      isRoot: true,\n      color: '#dc2626'\n    }]);\n    setConnections([]);\n    setTranslateX(0);\n    setTranslateY(0);\n    setCurrentMindMapId(null); // Clear current ID to indicate a new map\n    setCurrentMapTitle('Untitled Map');\n    setMessage('Created a new, empty mind map.');\n  }, []);\n  const handleSetMapTitle = useCallback(newTitle => {\n    setCurrentMapTitle(newTitle);\n    // Optionally, save the title immediately or mark for save\n    // For now, it will be saved with the next full map save\n  }, []);\n\n  // --- Mouse Handlers for Node Dragging ---\n  const handleMouseMove = useCallback(e => {\n    if (!dragDataRef.current.isDragging || !draggedNode) return;\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n    animationFrameRef.current = requestAnimationFrame(() => {\n      var _containerRef$current;\n      const rect = (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.getBoundingClientRect();\n      if (!rect) return;\n      const newX = e.clientX - rect.left - dragDataRef.current.offset.x - translateX;\n      const newY = e.clientY - rect.top - dragDataRef.current.offset.y - translateY;\n      setNodes(prev => prev.map(node => node.id === draggedNode ? {\n        ...node,\n        x: newX,\n        y: newY\n      } : node));\n    });\n  }, [draggedNode, translateX, translateY]);\n  const handleMouseDown = useCallback((e, nodeId) => {\n    var _containerRef$current2;\n    e.preventDefault();\n    e.stopPropagation();\n    if (selectedNode !== nodeId) {\n      setSelectedNode(nodeId);\n    }\n    const currentCanvasWrapper = canvasWrapperRef.current;\n    if (currentCanvasWrapper) {\n      currentCanvasWrapper.classList.add('no-transition');\n    }\n    const node = nodes.find(n => n.id === nodeId);\n    if (!node) return;\n    const nodeEl = e.currentTarget;\n    if (!nodeEl) return;\n    const nodeRect = nodeEl.getBoundingClientRect();\n    const containerRect = (_containerRef$current2 = containerRef.current) === null || _containerRef$current2 === void 0 ? void 0 : _containerRef$current2.getBoundingClientRect();\n    if (!containerRect) return;\n    dragDataRef.current = {\n      isDragging: true,\n      offset: {\n        x: e.clientX - nodeRect.left,\n        y: e.clientY - nodeRect.top\n      }\n    };\n    setDraggedNode(nodeId);\n  }, [nodes, selectedNode]);\n  const handleMouseUp = useCallback(() => {\n    dragDataRef.current.isDragging = false;\n    setDraggedNode(null);\n    setIsPanning(false);\n    const currentCanvasWrapper = canvasWrapperRef.current;\n    if (currentCanvasWrapper) {\n      currentCanvasWrapper.classList.remove('no-transition');\n    }\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n      animationFrameRef.current = null;\n    }\n  }, []);\n  const handlePanMouseDown = useCallback(e => {\n    const isTargetNode = e.target.closest('.mindmap-node');\n    const isTargetToolbar = e.target.closest('.mindmap-toolbar');\n    const isTargetInstructions = e.target.closest('.mindmap-instructions');\n    const isTargetLargeEditor = e.target.closest('.large-text-editor-overlay');\n    if (isTargetNode || isTargetToolbar || isTargetInstructions || isTargetLargeEditor || e.button !== 0) {\n      return;\n    }\n    setIsPanning(true);\n    panStartRef.current = {\n      x: e.clientX,\n      y: e.clientY,\n      startTranslateX: translateX,\n      startTranslateY: translateY\n    };\n    const currentCanvasWrapper = canvasWrapperRef.current;\n    if (currentCanvasWrapper) {\n      currentCanvasWrapper.classList.add('no-transition');\n    }\n    setSelectedNode(null);\n    e.preventDefault();\n  }, [translateX, translateY]);\n  const handlePanMouseMove = useCallback(e => {\n    if (!isPanning) return;\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n    animationFrameRef.current = requestAnimationFrame(() => {\n      const dx = e.clientX - panStartRef.current.x;\n      const dy = e.clientY - panStartRef.current.y;\n      setTranslateX(panStartRef.current.startTranslateX + dx);\n      setTranslateY(panStartRef.current.startTranslateY + dy);\n    });\n  }, [isPanning]);\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n    const handleGlobalMove = e => {\n      if (draggedNode) {\n        handleMouseMove(e);\n      } else if (isPanning) {\n        handlePanMouseMove(e);\n      }\n    };\n    const handleGlobalUp = () => handleMouseUp();\n    const handlePanDown = e => handlePanMouseDown(e);\n    document.addEventListener('mouseup', handleGlobalUp);\n    document.addEventListener('mouseleave', handleGlobalUp);\n    container.addEventListener('mousemove', handleGlobalMove);\n    container.addEventListener('mousedown', handlePanDown);\n    return () => {\n      document.removeEventListener('mouseup', handleGlobalUp);\n      document.removeEventListener('mouseleave', handleGlobalUp);\n      container.removeEventListener('mousemove', handleGlobalMove);\n      container.removeEventListener('mousedown', handlePanDown);\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n      const currentCanvasWrapper = canvasWrapperRef.current;\n      if (currentCanvasWrapper) {\n        currentCanvasWrapper.classList.remove('no-transition');\n      }\n    };\n  }, [handleMouseMove, handleMouseUp, handlePanMouseDown, handlePanMouseMove, draggedNode, isPanning]);\n  const closeLargeEditor = useCallback(() => {\n    setIsLargeEditorOpen(false);\n    setLargeEditorNodeId(null);\n    setLargeEditorTitle('');\n    setLargeEditorText('');\n  }, []);\n  const saveLargeEditorText = useCallback((newTitle, newText) => {\n    if (!largeEditorNodeId) return;\n    setNodes(prev => prev.map(node => node.id === largeEditorNodeId ? {\n      ...node,\n      title: newTitle.trim() || 'New Idea',\n      text: newText.trim() || ''\n    } : node));\n    closeLargeEditor();\n  }, [largeEditorNodeId, closeLargeEditor]);\n  const openLargeEditor = useCallback(nodeId => {\n    const node = nodes.find(n => n.id === nodeId);\n    if (node) {\n      setIsLargeEditorOpen(true);\n      setLargeEditorNodeId(nodeId);\n      setLargeEditorTitle(node.title || '');\n      setLargeEditorText(node.text || '');\n    }\n  }, [nodes]);\n  const addNode = useCallback(() => {\n    const parent = selectedNode ? nodes.find(n => n.id === selectedNode) : nodes.find(n => n.isRoot);\n    if (!parent) {\n      setMessage('Cannot add node: No root node found or selected node does not exist.');\n      return;\n    }\n    const angle = Math.random() * 2 * Math.PI;\n    const distance = 150;\n    const newNode = {\n      id: Date.now().toString(),\n      x: parent.x + Math.cos(angle) * distance,\n      y: parent.y + Math.sin(angle) * distance,\n      title: 'New Idea',\n      text: '',\n      color: colors[Math.floor(Math.random() * colors.length)]\n    };\n    setNodes(prev => [...prev, newNode]);\n    setConnections(prev => [...prev, {\n      from: parent.id,\n      to: newNode.id\n    }]);\n    setSelectedNode(newNode.id);\n    openLargeEditor(newNode.id);\n  }, [nodes, colors, selectedNode, openLargeEditor]);\n  const deleteNode = useCallback(() => {\n    const nodeToDelete = nodes.find(n => n.id === selectedNode);\n    if (!nodeToDelete || nodeToDelete.isRoot) {\n      setMessage('Cannot delete root node or no node selected.');\n      return;\n    }\n    setNodes(prev => prev.filter(n => n.id !== selectedNode));\n    setConnections(prev => prev.filter(c => c.from !== selectedNode && c.to !== selectedNode));\n    setSelectedNode(null);\n  }, [nodes, selectedNode]);\n  const isRootSelected = selectedNode ? (_nodes$find = nodes.find(n => n.id === selectedNode)) === null || _nodes$find === void 0 ? void 0 : _nodes$find.isRoot : false;\n\n  // Render Auth component if no session\n  if (!session) {\n    return /*#__PURE__*/_jsxDEV(Auth, {\n      onAuthSuccess: handleAuthSuccess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mindmap-container\",\n    ref: containerRef,\n    children: [/*#__PURE__*/_jsxDEV(MindMapToolbar, {\n      onAddNode: addNode,\n      onEditNode: () => selectedNode && openLargeEditor(selectedNode),\n      onDeleteNode: deleteNode,\n      selectedNode: selectedNode,\n      isRootSelected: isRootSelected,\n      onSave: saveMindMapToServer // Use the new save function\n      ,\n      onLoadMap: loadMindMapFromServer // Use the new load function\n      ,\n      onNewMap: handleNewMap // Use the new map function\n      ,\n      userMindMaps: userMindMaps,\n      currentMindMapId: currentMindMapId,\n      loading: loading,\n      message: message,\n      onLogout: handleLogout,\n      userName: (session === null || session === void 0 ? void 0 : (_session$user = session.user) === null || _session$user === void 0 ? void 0 : _session$user.email) || 'User',\n      currentMapTitle: currentMapTitle,\n      onSetMapTitle: handleSetMapTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MindMapInstructions, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MindMapCanvas, {\n      nodes: nodes,\n      connections: connections,\n      draggedNode: draggedNode,\n      selectedNode: selectedNode,\n      translateX: translateX,\n      translateY: translateY,\n      handleMouseDown: handleMouseDown,\n      openNodeEditor: openLargeEditor,\n      canvasWrapperRef: canvasWrapperRef,\n      svgRef: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 478,\n      columnNumber: 7\n    }, this), isLargeEditorOpen && /*#__PURE__*/_jsxDEV(LargeTextEditor, {\n      isOpen: isLargeEditorOpen,\n      initialTitle: largeEditorTitle,\n      initialText: largeEditorText,\n      onSave: saveLargeEditorText,\n      onCancel: closeLargeEditor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 456,\n    columnNumber: 5\n  }, this);\n};\n_s(MindMap, \"Qx0t3XE1vy9U2LnPOBGnisAQ+oA=\");\n_c = MindMap;\nexport default MindMap;\nvar _c;\n$RefreshReg$(_c, \"MindMap\");","map":{"version":3,"names":["React","useState","useRef","useCallback","useEffect","useMemo","MindMapCanvas","MindMapToolbar","MindMapInstructions","LargeTextEditor","Auth","jsxDEV","_jsxDEV","API_BASE_URL","process","env","REACT_APP_BACKEND_API_URL","MindMap","_s","_nodes$find","_session$user","nodes","setNodes","id","x","y","title","text","isRoot","color","connections","setConnections","draggedNode","setDraggedNode","selectedNode","setSelectedNode","isLargeEditorOpen","setIsLargeEditorOpen","largeEditorNodeId","setLargeEditorNodeId","largeEditorTitle","setLargeEditorTitle","largeEditorText","setLargeEditorText","translateX","setTranslateX","translateY","setTranslateY","isPanning","setIsPanning","panStartRef","startTranslateX","startTranslateY","svgRef","containerRef","canvasWrapperRef","dragDataRef","isDragging","offset","animationFrameRef","colors","session","setSession","currentMindMapId","setCurrentMindMapId","currentMapTitle","setCurrentMapTitle","userMindMaps","setUserMindMaps","loading","setLoading","message","setMessage","storedSession","localStorage","getItem","parsedSession","JSON","parse","token","user","email","fetchUserMindMaps","removeItem","e","console","error","handleAuthSuccess","newSession","setItem","stringify","handleNewMap","handleLogout","response","fetch","headers","ok","status","Error","statusText","data","json","saveMindMapToServer","mindMapData","viewState","method","body","errorData","savedMap","_id","loadMindMapFromServer","mapId","_data$viewState","_data$viewState2","handleSetMapTitle","newTitle","handleMouseMove","current","cancelAnimationFrame","requestAnimationFrame","_containerRef$current","rect","getBoundingClientRect","newX","clientX","left","newY","clientY","top","prev","map","node","handleMouseDown","nodeId","_containerRef$current2","preventDefault","stopPropagation","currentCanvasWrapper","classList","add","find","n","nodeEl","currentTarget","nodeRect","containerRect","handleMouseUp","remove","handlePanMouseDown","isTargetNode","target","closest","isTargetToolbar","isTargetInstructions","isTargetLargeEditor","button","handlePanMouseMove","dx","dy","container","handleGlobalMove","handleGlobalUp","handlePanDown","document","addEventListener","removeEventListener","closeLargeEditor","saveLargeEditorText","newText","trim","openLargeEditor","addNode","parent","angle","Math","random","PI","distance","newNode","Date","now","toString","cos","sin","floor","length","from","to","deleteNode","nodeToDelete","filter","c","isRootSelected","onAuthSuccess","fileName","_jsxFileName","lineNumber","columnNumber","className","ref","children","onAddNode","onEditNode","onDeleteNode","onSave","onLoadMap","onNewMap","onLogout","userName","onSetMapTitle","openNodeEditor","isOpen","initialTitle","initialText","onCancel","_c","$RefreshReg$"],"sources":["/Users/jimmyzhou/Desktop/Projects/scripty/frontend/src/pages/mindmap.jsx"],"sourcesContent":["import React, { useState, useRef, useCallback, useEffect, useMemo } from 'react';\n\nimport MindMapCanvas from '../components/mindmapcanvas';\nimport MindMapToolbar from '../components/mindmaptoolbar';\nimport MindMapInstructions from '../components/mindmapinstructions';\nimport LargeTextEditor from '../components/mindmaptexteditor';\nimport Auth from '../pages/auth'; // Assuming you have an Auth component for login/register\nimport './mindmap.css';\n\nconst API_BASE_URL = process.env.REACT_APP_BACKEND_API_URL || 'http://localhost:5001/api';\n\nconst MindMap = () => {\n  const [nodes, setNodes] = useState([\n    { id: '1', x: 400, y: 300, title: 'Central Idea', text: '', isRoot: true, color: '#dc2626' }\n  ]);\n  const [connections, setConnections] = useState([]);\n  const [draggedNode, setDraggedNode] = useState(null);\n  const [selectedNode, setSelectedNode] = useState(null);\n\n  const [isLargeEditorOpen, setIsLargeEditorOpen] = useState(false);\n  const [largeEditorNodeId, setLargeEditorNodeId] = useState(null);\n  const [largeEditorTitle, setLargeEditorTitle] = useState(''); // <--- CORRECTED LINE HERE\n  const [largeEditorText, setLargeEditorText] = useState('');\n\n\n  const [translateX, setTranslateX] = useState(0);\n  const [translateY, setTranslateY] = useState(0);\n  const [isPanning, setIsPanning] = useState(false);\n  const panStartRef = useRef({ x: 0, y: 0, startTranslateX: 0, startTranslateY: 0 });\n\n  const svgRef = useRef(null);\n  const containerRef = useRef(null);\n  const canvasWrapperRef = useRef(null);\n\n  const dragDataRef = useRef({ isDragging: false, offset: { x: 0, y: 0 } });\n  const animationFrameRef = useRef(null);\n\n  const colors = useMemo(() => [\n    '#EF4444',\n    '#F97316',\n    '#EAB308',\n    '#22C55E',\n    '#3B82F6',\n    '#A855F7',\n    '#EC4899',\n  ], []);\n\n  // --- State for Backend Integration ---\n  const [session, setSession] = useState(null); // Stores user session (e.g., { user: { email }, token })\n  const [currentMindMapId, setCurrentMindMapId] = useState(null); // ID of the currently loaded map\n  const [currentMapTitle, setCurrentMapTitle] = useState('Untitled Map');\n  const [userMindMaps, setUserMindMaps] = useState([]); // List of user's saved maps\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('Welcome! Login or register to start creating.');\n\n  // --- Authentication & Session Management ---\n  useEffect(() => {\n    // Attempt to load session from localStorage on component mount\n    const storedSession = localStorage.getItem('mindmapSession');\n    if (storedSession) {\n      try {\n        const parsedSession = JSON.parse(storedSession);\n        // Basic validation for the session structure\n        if (parsedSession && parsedSession.token && parsedSession.user) {\n          setSession(parsedSession);\n          setMessage(`Welcome back, ${parsedSession.user.email}!`);\n          // Fetch user's mind maps immediately after successful session load\n          fetchUserMindMaps(parsedSession.token);\n        } else {\n          localStorage.removeItem('mindmapSession'); // Clear invalid session\n        }\n      } catch (e) {\n        console.error(\"Failed to parse session from localStorage\", e);\n        localStorage.removeItem('mindmapSession');\n      }\n    } else {\n      setMessage('Welcome! Please login or register.');\n    }\n  }, []); // Run once on component mount\n\n  const handleAuthSuccess = useCallback((newSession) => {\n    setSession(newSession);\n    localStorage.setItem('mindmapSession', JSON.stringify(newSession));\n    setMessage(`Logged in as ${newSession.user.email}`);\n    fetchUserMindMaps(newSession.token); // Fetch maps for the newly logged-in user\n    // Optionally, if you want to immediately load a \"new\" map after login:\n    handleNewMap();\n  }, []);\n\n  const handleLogout = useCallback(() => {\n    setSession(null);\n    localStorage.removeItem('mindmapSession');\n    // Clear current map data and reset to a new default map\n    setNodes([{ id: '1', x: 400, y: 300, title: 'Central Idea', text: '', isRoot: true, color: '#dc2626' }]);\n    setConnections([]);\n    setTranslateX(0);\n    setTranslateY(0);\n    setCurrentMindMapId(null);\n    setCurrentMapTitle('Untitled Map');\n    setUserMindMaps([]); // Clear user maps on logout\n    setMessage('You have been logged out.');\n  }, []);\n\n  // --- API Calls ---\n\n  const fetchUserMindMaps = useCallback(async (token) => {\n    setLoading(true);\n    setMessage('Fetching your mind maps...');\n    try {\n      const response = await fetch(`${API_BASE_URL}/mindmaps`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) {\n        if (response.status === 401) {\n          setMessage('Session expired or unauthorized. Please log in again.');\n          handleLogout(); // Log out if unauthorized\n          return;\n        }\n        throw new Error(`Error fetching mind maps: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      setUserMindMaps(data);\n      setMessage('Your mind maps loaded!');\n    } catch (error) {\n      console.error('Fetch mind maps error:', error);\n      setMessage(`Failed to fetch mind maps: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  }, [handleLogout]);\n\n  const saveMindMapToServer = useCallback(async () => {\n    if (!session || !session.token) {\n      setMessage('Please log in to save your mind map.');\n      return;\n    }\n\n    setLoading(true);\n    setMessage('Saving mind map...');\n    try {\n      const mindMapData = {\n        title: currentMapTitle,\n        nodes,\n        connections,\n        viewState: { translateX, translateY },\n      };\n\n      let response;\n      if (currentMindMapId) {\n        // Update existing mind map\n        response = await fetch(`${API_BASE_URL}/mindmaps/${currentMindMapId}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${session.token}`,\n          },\n          body: JSON.stringify(mindMapData),\n        });\n      } else {\n        // Create new mind map\n        response = await fetch(`${API_BASE_URL}/mindmaps`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${session.token}`,\n          },\n          body: JSON.stringify(mindMapData),\n        });\n      }\n\n      if (!response.ok) {\n        if (response.status === 401) {\n          setMessage('Session expired or unauthorized. Please log in again to save.');\n          handleLogout();\n          return;\n        }\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to save mind map');\n      }\n\n      const savedMap = await response.json();\n      setCurrentMindMapId(savedMap._id);\n      setCurrentMapTitle(savedMap.title);\n      setMessage('Mind map saved successfully!');\n      fetchUserMindMaps(session.token); // Refresh the list of maps\n    } catch (error) {\n      console.error('Save mind map error:', error);\n      setMessage(`Error saving mind map: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  }, [nodes, connections, translateX, translateY, currentMindMapId, currentMapTitle, session, fetchUserMindMaps, handleLogout]);\n\n  const loadMindMapFromServer = useCallback(async (mapId) => {\n    if (!session || !session.token) {\n      setMessage('Please log in to load a mind map.');\n      return;\n    }\n    setLoading(true);\n    setMessage('Loading mind map...');\n    try {\n      const response = await fetch(`${API_BASE_URL}/mindmaps/${mapId}`, {\n        headers: {\n          'Authorization': `Bearer ${session.token}`,\n        },\n      });\n\n      if (!response.ok) {\n        if (response.status === 401) {\n          setMessage('Session expired or unauthorized. Please log in again.');\n          handleLogout();\n          return;\n        }\n        throw new Error(`Error loading mind map: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      setNodes(data.nodes || []);\n      setConnections(data.connections || []);\n      setTranslateX(data.viewState?.translateX || 0);\n      setTranslateY(data.viewState?.translateY || 0);\n      setCurrentMindMapId(data._id);\n      setCurrentMapTitle(data.title);\n      setMessage(`Mind map \"${data.title}\" loaded!`);\n    } catch (error) {\n      console.error('Load mind map error:', error);\n      setMessage(`Failed to load mind map: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  }, [session, handleLogout]);\n\n  const handleNewMap = useCallback(() => {\n    setNodes([{ id: '1', x: 400, y: 300, title: 'Central Idea', text: '', isRoot: true, color: '#dc2626' }]);\n    setConnections([]);\n    setTranslateX(0);\n    setTranslateY(0);\n    setCurrentMindMapId(null); // Clear current ID to indicate a new map\n    setCurrentMapTitle('Untitled Map');\n    setMessage('Created a new, empty mind map.');\n  }, []);\n\n  const handleSetMapTitle = useCallback((newTitle) => {\n    setCurrentMapTitle(newTitle);\n    // Optionally, save the title immediately or mark for save\n    // For now, it will be saved with the next full map save\n  }, []);\n\n  // --- Mouse Handlers for Node Dragging ---\n  const handleMouseMove = useCallback((e) => {\n    if (!dragDataRef.current.isDragging || !draggedNode) return;\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n    animationFrameRef.current = requestAnimationFrame(() => {\n      const rect = containerRef.current?.getBoundingClientRect();\n      if (!rect) return;\n      const newX = (e.clientX - rect.left - dragDataRef.current.offset.x - translateX);\n      const newY = (e.clientY - rect.top - dragDataRef.current.offset.y - translateY);\n      setNodes(prev => prev.map(node =>\n        node.id === draggedNode\n          ? { ...node, x: newX, y: newY }\n          : node\n      ));\n    });\n  }, [draggedNode, translateX, translateY]);\n\n  const handleMouseDown = useCallback((e, nodeId) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (selectedNode !== nodeId) {\n      setSelectedNode(nodeId);\n    }\n    const currentCanvasWrapper = canvasWrapperRef.current;\n    if (currentCanvasWrapper) {\n      currentCanvasWrapper.classList.add('no-transition');\n    }\n    const node = nodes.find(n => n.id === nodeId);\n    if (!node) return;\n    const nodeEl = e.currentTarget;\n    if (!nodeEl) return;\n    const nodeRect = nodeEl.getBoundingClientRect();\n    const containerRect = containerRef.current?.getBoundingClientRect();\n    if (!containerRect) return;\n\n    dragDataRef.current = {\n      isDragging: true,\n      offset: {\n        x: e.clientX - nodeRect.left,\n        y: e.clientY - nodeRect.top\n      }\n    };\n    setDraggedNode(nodeId);\n  }, [nodes, selectedNode]);\n\n  const handleMouseUp = useCallback(() => {\n    dragDataRef.current.isDragging = false;\n    setDraggedNode(null);\n    setIsPanning(false);\n    const currentCanvasWrapper = canvasWrapperRef.current;\n    if (currentCanvasWrapper) {\n      currentCanvasWrapper.classList.remove('no-transition');\n    }\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n      animationFrameRef.current = null;\n    }\n  }, []);\n\n  const handlePanMouseDown = useCallback((e) => {\n    const isTargetNode = e.target.closest('.mindmap-node');\n    const isTargetToolbar = e.target.closest('.mindmap-toolbar');\n    const isTargetInstructions = e.target.closest('.mindmap-instructions');\n    const isTargetLargeEditor = e.target.closest('.large-text-editor-overlay');\n    if (isTargetNode || isTargetToolbar || isTargetInstructions || isTargetLargeEditor || e.button !== 0) {\n        return;\n    }\n    setIsPanning(true);\n    panStartRef.current = {\n      x: e.clientX,\n      y: e.clientY,\n      startTranslateX: translateX,\n      startTranslateY: translateY\n    };\n    const currentCanvasWrapper = canvasWrapperRef.current;\n    if (currentCanvasWrapper) {\n      currentCanvasWrapper.classList.add('no-transition');\n    }\n    setSelectedNode(null);\n    e.preventDefault();\n  }, [translateX, translateY]);\n\n  const handlePanMouseMove = useCallback((e) => {\n    if (!isPanning) return;\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n    animationFrameRef.current = requestAnimationFrame(() => {\n      const dx = e.clientX - panStartRef.current.x;\n      const dy = e.clientY - panStartRef.current.y;\n      setTranslateX(panStartRef.current.startTranslateX + dx);\n      setTranslateY(panStartRef.current.startTranslateY + dy);\n    });\n  }, [isPanning]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    const handleGlobalMove = (e) => {\n      if (draggedNode) {\n        handleMouseMove(e);\n      } else if (isPanning) {\n        handlePanMouseMove(e);\n      }\n    };\n\n    const handleGlobalUp = () => handleMouseUp();\n\n    const handlePanDown = (e) => handlePanMouseDown(e);\n\n    document.addEventListener('mouseup', handleGlobalUp);\n    document.addEventListener('mouseleave', handleGlobalUp);\n    container.addEventListener('mousemove', handleGlobalMove);\n    container.addEventListener('mousedown', handlePanDown);\n\n    return () => {\n      document.removeEventListener('mouseup', handleGlobalUp);\n      document.removeEventListener('mouseleave', handleGlobalUp);\n      container.removeEventListener('mousemove', handleGlobalMove);\n      container.removeEventListener('mousedown', handlePanDown);\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n      const currentCanvasWrapper = canvasWrapperRef.current;\n      if (currentCanvasWrapper) {\n        currentCanvasWrapper.classList.remove('no-transition');\n      }\n    };\n  }, [handleMouseMove, handleMouseUp, handlePanMouseDown, handlePanMouseMove, draggedNode, isPanning]);\n\n  const closeLargeEditor = useCallback(() => {\n    setIsLargeEditorOpen(false);\n    setLargeEditorNodeId(null);\n    setLargeEditorTitle('');\n    setLargeEditorText('');\n  }, []);\n\n  const saveLargeEditorText = useCallback((newTitle, newText) => {\n    if (!largeEditorNodeId) return;\n    setNodes(prev =>\n      prev.map(node => (\n        node.id === largeEditorNodeId\n          ? { ...node, title: newTitle.trim() || 'New Idea', text: newText.trim() || '' }\n          : node\n      ))\n    );\n    closeLargeEditor();\n  }, [largeEditorNodeId, closeLargeEditor]);\n\n  const openLargeEditor = useCallback((nodeId) => {\n    const node = nodes.find(n => n.id === nodeId);\n    if (node) {\n      setIsLargeEditorOpen(true);\n      setLargeEditorNodeId(nodeId);\n      setLargeEditorTitle(node.title || '');\n      setLargeEditorText(node.text || '');\n    }\n  }, [nodes]);\n\n  const addNode = useCallback(() => {\n    const parent = selectedNode ? nodes.find(n => n.id === selectedNode) : nodes.find(n => n.isRoot);\n    if (!parent) {\n      setMessage('Cannot add node: No root node found or selected node does not exist.');\n      return;\n    }\n    const angle = Math.random() * 2 * Math.PI;\n    const distance = 150;\n    const newNode = {\n      id: Date.now().toString(),\n      x: parent.x + Math.cos(angle) * distance,\n      y: parent.y + Math.sin(angle) * distance,\n      title: 'New Idea',\n      text: '',\n      color: colors[Math.floor(Math.random() * colors.length)]\n    };\n    setNodes(prev => [...prev, newNode]);\n    setConnections(prev => [...prev, { from: parent.id, to: newNode.id }]);\n    setSelectedNode(newNode.id);\n    openLargeEditor(newNode.id);\n  }, [nodes, colors, selectedNode, openLargeEditor]);\n\n  const deleteNode = useCallback(() => {\n    const nodeToDelete = nodes.find(n => n.id === selectedNode);\n    if (!nodeToDelete || nodeToDelete.isRoot) {\n      setMessage('Cannot delete root node or no node selected.');\n      return;\n    }\n    setNodes(prev => prev.filter(n => n.id !== selectedNode));\n    setConnections(prev => prev.filter(c => c.from !== selectedNode && c.to !== selectedNode));\n    setSelectedNode(null);\n  }, [nodes, selectedNode]);\n\n  const isRootSelected = selectedNode ? nodes.find(n => n.id === selectedNode)?.isRoot : false;\n\n  // Render Auth component if no session\n  if (!session) {\n    return <Auth onAuthSuccess={handleAuthSuccess} />;\n  }\n\n  return (\n    <div className=\"mindmap-container\" ref={containerRef}>\n      <MindMapToolbar\n        onAddNode={addNode}\n        onEditNode={() => selectedNode && openLargeEditor(selectedNode)}\n        onDeleteNode={deleteNode}\n        selectedNode={selectedNode}\n        isRootSelected={isRootSelected}\n        onSave={saveMindMapToServer} // Use the new save function\n        onLoadMap={loadMindMapFromServer} // Use the new load function\n        onNewMap={handleNewMap} // Use the new map function\n        userMindMaps={userMindMaps}\n        currentMindMapId={currentMindMapId}\n        loading={loading}\n        message={message}\n        onLogout={handleLogout}\n        userName={session?.user?.email || 'User'}\n        currentMapTitle={currentMapTitle}\n        onSetMapTitle={handleSetMapTitle}\n      />\n\n      <MindMapInstructions />\n\n      <MindMapCanvas\n        nodes={nodes}\n        connections={connections}\n        draggedNode={draggedNode}\n        selectedNode={selectedNode}\n        translateX={translateX}\n        translateY={translateY}\n        handleMouseDown={handleMouseDown}\n        openNodeEditor={openLargeEditor}\n        canvasWrapperRef={canvasWrapperRef}\n        svgRef={svgRef}\n      />\n\n      {isLargeEditorOpen && (\n        <LargeTextEditor\n          isOpen={isLargeEditorOpen}\n          initialTitle={largeEditorTitle}\n          initialText={largeEditorText}\n          onSave={saveLargeEditorText}\n          onCancel={closeLargeEditor}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default MindMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}