{"ast":null,"code":"var _jsxFileName = \"/Users/jimmyzhou/Desktop/Projects/scripty/frontend/src/App.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate, useNavigate } from 'react-router-dom';\nimport MindMap from './pages/mindmap.jsx';\nimport MindMapDashboard from './pages/mindmapdashboard.jsx';\nimport Auth from './pages/auth.jsx'; // Assuming Auth.jsx is in the 'pages' directory\nimport HomePage from './pages/homepage.jsx';\nimport ProtectedRoute from './components/ProtectedRoute.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s2();\n  var _s = $RefreshSig$();\n  // State to hold the session data (e.g., user info, token)\n  const [session, setSession] = useState(null);\n\n  // Effect to load session from localStorage when the app starts\n  useEffect(() => {\n    try {\n      const storedSession = localStorage.getItem('mindmapSession');\n      if (storedSession) {\n        const parsedSession = JSON.parse(storedSession);\n        // Basic validation: check if token and user exist in the parsed session\n        if (parsedSession && parsedSession.token && parsedSession.user) {\n          setSession(parsedSession);\n        } else {\n          // If the stored session is invalid, clear it\n          localStorage.removeItem('mindmapSession');\n        }\n      }\n    } catch (e) {\n      console.error(\"Failed to parse session from localStorage\", e);\n      localStorage.removeItem('mindmapSession'); // Clear potentially corrupted data\n    }\n  }, []); // Run only once on component mount\n\n  // ---\n  // A wrapper component for the Auth route to handle navigation after login\n  // ---\n  const AuthRouteWrapper = () => {\n    _s();\n    const navigate = useNavigate(); // useNavigate hook must be called inside a component within Router context\n\n    // This function will be passed to the Auth component as 'onAuthSuccess'\n    const handleAuthSuccess = useCallback(authData => {\n      // Save the authentication data to local state\n      setSession(authData);\n      // Persist the session data to localStorage\n      localStorage.setItem('mindmapSession', JSON.stringify(authData));\n      // Navigate to the dashboard after successful authentication\n      navigate('/dashboard');\n    }, [navigate]); // navigate is a stable function, but useCallback depends on it\n\n    // Render the Auth component, passing the handleAuthSuccess function\n    return /*#__PURE__*/_jsxDEV(Auth, {\n      onAuthSuccess: handleAuthSuccess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 12\n    }, this);\n  };\n  _s(AuthRouteWrapper, \"zNYwwlEq6hECVOKia+09ZE3gnso=\", false, function () {\n    return [useNavigate];\n  });\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(AuthRouteWrapper, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/home\",\n        element: /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 38\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/dashboard\",\n        element: /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n          children: /*#__PURE__*/_jsxDEV(MindMapDashboard, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/mindmap/:id\",\n        element: /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n          children: /*#__PURE__*/_jsxDEV(MindMap, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"*\",\n        element: /*#__PURE__*/_jsxDEV(Navigate, {\n          to: \"/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s2(App, \"my2JknXsLNPscnT9b+5uRmb6O9A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","BrowserRouter","Router","Routes","Route","Navigate","useNavigate","MindMap","MindMapDashboard","Auth","HomePage","ProtectedRoute","jsxDEV","_jsxDEV","App","_s2","_s","$RefreshSig$","session","setSession","storedSession","localStorage","getItem","parsedSession","JSON","parse","token","user","removeItem","e","console","error","AuthRouteWrapper","navigate","handleAuthSuccess","authData","setItem","stringify","onAuthSuccess","fileName","_jsxFileName","lineNumber","columnNumber","children","path","element","to","_c","$RefreshReg$"],"sources":["/Users/jimmyzhou/Desktop/Projects/scripty/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate, useNavigate } from 'react-router-dom';\n\nimport MindMap from './pages/mindmap.jsx';\nimport MindMapDashboard from './pages/mindmapdashboard.jsx';\nimport Auth from './pages/auth.jsx'; // Assuming Auth.jsx is in the 'pages' directory\nimport HomePage from './pages/homepage.jsx';\nimport ProtectedRoute from './components/ProtectedRoute.jsx';\n\nfunction App() {\n  // State to hold the session data (e.g., user info, token)\n  const [session, setSession] = useState(null);\n\n  // Effect to load session from localStorage when the app starts\n  useEffect(() => {\n    try {\n      const storedSession = localStorage.getItem('mindmapSession');\n      if (storedSession) {\n        const parsedSession = JSON.parse(storedSession);\n        // Basic validation: check if token and user exist in the parsed session\n        if (parsedSession && parsedSession.token && parsedSession.user) {\n          setSession(parsedSession);\n        } else {\n          // If the stored session is invalid, clear it\n          localStorage.removeItem('mindmapSession');\n        }\n      }\n    } catch (e) {\n      console.error(\"Failed to parse session from localStorage\", e);\n      localStorage.removeItem('mindmapSession'); // Clear potentially corrupted data\n    }\n  }, []); // Run only once on component mount\n\n  // ---\n  // A wrapper component for the Auth route to handle navigation after login\n  // ---\n  const AuthRouteWrapper = () => {\n    const navigate = useNavigate(); // useNavigate hook must be called inside a component within Router context\n\n    // This function will be passed to the Auth component as 'onAuthSuccess'\n    const handleAuthSuccess = useCallback((authData) => {\n      // Save the authentication data to local state\n      setSession(authData);\n      // Persist the session data to localStorage\n      localStorage.setItem('mindmapSession', JSON.stringify(authData));\n      // Navigate to the dashboard after successful authentication\n      navigate('/dashboard');\n    }, [navigate]); // navigate is a stable function, but useCallback depends on it\n\n    // Render the Auth component, passing the handleAuthSuccess function\n    return <Auth onAuthSuccess={handleAuthSuccess} />;\n  };\n\n  return (\n    <Router>\n      <Routes>\n        {/* Public Routes */}\n        {/* Use AuthRouteWrapper here to manage navigation after login */}\n        <Route path=\"/\" element={<AuthRouteWrapper />} />\n        <Route path=\"/home\" element={<HomePage />} />\n\n        {/* Protected Routes */}\n        {/* These routes are wrapped by ProtectedRoute to ensure the user is logged in */}\n        <Route\n          path=\"/dashboard\"\n          element={\n            <ProtectedRoute>\n              <MindMapDashboard />\n            </ProtectedRoute>\n          }\n        />\n        <Route\n          path=\"/mindmap/:id\"\n          element={\n            <ProtectedRoute>\n              <MindMap />\n            </ProtectedRoute>\n          }\n        />\n\n        {/* Fallback for any unmatched routes - redirects to the login/auth page */}\n        <Route path=\"*\" element={<Navigate to=\"/\" />} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}