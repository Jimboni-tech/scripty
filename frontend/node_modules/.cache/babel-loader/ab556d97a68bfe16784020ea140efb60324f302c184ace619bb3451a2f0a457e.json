{"ast":null,"code":"var _jsxFileName = \"/Users/jimmyzhou/Desktop/Projects/scripty/frontend/src/pages/mindmapdashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './mindmapdashboard.css'; // Import the CSS for this component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_BACKEND_API_URL || 'http://localhost:5001/api';\n\n// Receive session, onLogout, and onSetDashboardTitle from the parent Dashboard component\nconst MindMapDashboard = ({\n  session,\n  onLogout,\n  onSetDashboardTitle\n}) => {\n  _s();\n  const [mindMaps, setMindMaps] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [message, setMessage] = useState('');\n  const navigate = useNavigate();\n\n  // Set the Dashboard's header title when this component mounts\n  useEffect(() => {\n    if (onSetDashboardTitle) {\n      onSetDashboardTitle('Your Mind Maps'); // Set a specific title for the dashboard list view\n    }\n  }, [onSetDashboardTitle]); // Dependency on the callback prop\n\n  const fetchUserMindMaps = useCallback(async token => {\n    setLoading(true);\n    setMessage('Fetching your mind maps...');\n    try {\n      const response = await fetch(`${API_BASE_URL}/mindmaps`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (!response.ok) {\n        if (response.status === 401) {\n          setMessage('Session expired or unauthorized. Please log in again.');\n          onLogout(); // Use the passed onLogout prop\n          return;\n        }\n        throw new Error(`Error fetching mind maps: ${response.statusText}`);\n      }\n      const data = await response.json();\n      setMindMaps(data);\n      setMessage('Your mind maps loaded!');\n    } catch (error) {\n      console.error('Fetch mind maps error:', error);\n      setMessage(`Failed to fetch mind maps: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  }, [onLogout]); // Dependency on onLogout\n\n  useEffect(() => {\n    // Ensure session and token exist before attempting to fetch maps\n    if (session && session.token) {\n      fetchUserMindMaps(session.token);\n    } else {\n      // This case should ideally be caught by ProtectedRoute, but as a fallback\n      navigate('/'); // Redirect to login if session is missing\n    }\n  }, [session, navigate, fetchUserMindMaps]);\n  const handleLoad = id => {\n    navigate(`/mindmap/${id}`); // Navigate to the specific mind map editor\n  };\n  const handleNew = () => {\n    navigate('/mindmap/new'); // Navigate to create a new mind map\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mindmap-dashboard-container\",\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"dashboard-section-title\",\n      children: \"Your Mind Maps\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleNew,\n      className: \"btn btn-add-new-map\",\n      children: \"+ New Mind Map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"dashboard-message loading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this) : mindMaps.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"dashboard-message no-maps-found\",\n      children: \"No mind maps found. Click \\\"New Mind Map\\\" to create one!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"mindmap-list\",\n      children: mindMaps.map(map => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"mindmap-list-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"mindmap-item-title\",\n          children: map.title || 'Untitled'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"mindmap-item-date\",\n          children: [\"Last updated: \", new Date(map.updatedAt).toLocaleDateString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleLoad(map._id),\n          className: \"btn btn-open-map\",\n          children: \"Open\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }, this)]\n      }, map._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-status-message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(MindMapDashboard, \"B14dvly3dH6omkyo/74Dhmjn9N8=\", false, function () {\n  return [useNavigate];\n});\n_c = MindMapDashboard;\nexport default MindMapDashboard;\nvar _c;\n$RefreshReg$(_c, \"MindMapDashboard\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","useNavigate","jsxDEV","_jsxDEV","API_BASE_URL","process","env","REACT_APP_BACKEND_API_URL","MindMapDashboard","session","onLogout","onSetDashboardTitle","_s","mindMaps","setMindMaps","loading","setLoading","message","setMessage","navigate","fetchUserMindMaps","token","response","fetch","headers","ok","status","Error","statusText","data","json","error","console","handleLoad","id","handleNew","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","map","title","Date","updatedAt","toLocaleDateString","_id","_c","$RefreshReg$"],"sources":["/Users/jimmyzhou/Desktop/Projects/scripty/frontend/src/pages/mindmapdashboard.jsx"],"sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './mindmapdashboard.css'; // Import the CSS for this component\n\nconst API_BASE_URL = process.env.REACT_APP_BACKEND_API_URL || 'http://localhost:5001/api';\n\n// Receive session, onLogout, and onSetDashboardTitle from the parent Dashboard component\nconst MindMapDashboard = ({ session, onLogout, onSetDashboardTitle }) => {\n  const [mindMaps, setMindMaps] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [message, setMessage] = useState('');\n  const navigate = useNavigate();\n\n  // Set the Dashboard's header title when this component mounts\n  useEffect(() => {\n    if (onSetDashboardTitle) {\n      onSetDashboardTitle('Your Mind Maps'); // Set a specific title for the dashboard list view\n    }\n  }, [onSetDashboardTitle]); // Dependency on the callback prop\n\n  const fetchUserMindMaps = useCallback(async (token) => {\n    setLoading(true);\n    setMessage('Fetching your mind maps...');\n    try {\n      const response = await fetch(`${API_BASE_URL}/mindmaps`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) {\n        if (response.status === 401) {\n          setMessage('Session expired or unauthorized. Please log in again.');\n          onLogout(); // Use the passed onLogout prop\n          return;\n        }\n        throw new Error(`Error fetching mind maps: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      setMindMaps(data);\n      setMessage('Your mind maps loaded!');\n    } catch (error) {\n      console.error('Fetch mind maps error:', error);\n      setMessage(`Failed to fetch mind maps: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  }, [onLogout]); // Dependency on onLogout\n\n  useEffect(() => {\n    // Ensure session and token exist before attempting to fetch maps\n    if (session && session.token) {\n      fetchUserMindMaps(session.token);\n    } else {\n      // This case should ideally be caught by ProtectedRoute, but as a fallback\n      navigate('/'); // Redirect to login if session is missing\n    }\n  }, [session, navigate, fetchUserMindMaps]);\n\n  const handleLoad = (id) => {\n    navigate(`/mindmap/${id}`); // Navigate to the specific mind map editor\n  };\n\n  const handleNew = () => {\n    navigate('/mindmap/new'); // Navigate to create a new mind map\n  };\n\n  return (\n    <div className=\"mindmap-dashboard-container\"> {/* Renamed class for clarity */}\n      <h2 className=\"dashboard-section-title\">Your Mind Maps</h2>\n      <button onClick={handleNew} className=\"btn btn-add-new-map\">\n        + New Mind Map\n      </button>\n\n      {loading ? (\n        <p className=\"dashboard-message loading\">Loading...</p>\n      ) : mindMaps.length === 0 ? (\n        <p className=\"dashboard-message no-maps-found\">No mind maps found. Click \"New Mind Map\" to create one!</p>\n      ) : (\n        <ul className=\"mindmap-list\">\n          {mindMaps.map(map => (\n            <li key={map._id} className=\"mindmap-list-item\">\n              <span className=\"mindmap-item-title\">{map.title || 'Untitled'}</span>\n              <span className=\"mindmap-item-date\">\n                Last updated: {new Date(map.updatedAt).toLocaleDateString()}\n              </span>\n              <button onClick={() => handleLoad(map._id)} className=\"btn btn-open-map\">\n                Open\n              </button>\n            </li>\n          ))}\n        </ul>\n      )}\n      {message && <div className=\"dashboard-status-message\">{message}</div>}\n    </div>\n  );\n};\n\nexport default MindMapDashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}