{"ast":null,"code":"var _jsxFileName = \"/Users/jimmyzhou/Desktop/Projects/scripty/frontend/src/pages/mindmap.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useCallback, useEffect, useMemo } from 'react';\nimport MindMapCanvas from '../components/mindmapcanvas';\nimport MindMapToolbar from '../components/mindmaptoolbar';\nimport MindMapInstructions from '../components/mindmapinstructions';\nimport LargeTextEditor from '../components/mindmaptexteditor';\nimport MindMapTitleEditor from '../components/mindmaptitle'; // <-- IMPORT NEW COMPONENT\nimport './mindmap.css';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_BACKEND_API_URL || 'http://localhost:5001/api';\n\n// MindMap now receives session and onLogout from App.js via ProtectedRoute\nconst MindMap = ({\n  session,\n  onLogout\n}) => {\n  _s();\n  var _nodes$find;\n  // <--- ADD session, onLogout props\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  const [nodes, setNodes] = useState([{\n    id: '1',\n    x: 400,\n    y: 300,\n    title: 'Central Idea',\n    text: '',\n    isRoot: true,\n    color: '#dc2626'\n  }]);\n  const [connections, setConnections] = useState([]);\n  const [draggedNode, setDraggedNode] = useState(null);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [isLargeEditorOpen, setIsLargeEditorOpen] = useState(false);\n  const [largeEditorNodeId, setLargeEditorNodeId] = useState(null);\n  const [largeEditorTitle, setLargeEditorTitle] = useState('');\n  const [largeEditorText, setLargeEditorText] = useState('');\n  const [translateX, setTranslateX] = useState(0);\n  const [translateY, setTranslateY] = useState(0);\n  const [isPanning, setIsPanning] = useState(false);\n  const panStartRef = useRef({\n    x: 0,\n    y: 0,\n    startTranslateX: 0,\n    startTranslateY: 0\n  });\n  const svgRef = useRef(null);\n  const containerRef = useRef(null);\n  const canvasWrapperRef = useRef(null); // Ref for the canvas wrapper\n\n  const dragDataRef = useRef({\n    isDragging: false,\n    offset: {\n      x: 0,\n      y: 0\n    }\n  });\n  const animationFrameRef = useRef(null);\n  const colors = useMemo(() => ['#EF4444', '#F97316', '#EAB308', '#22C55E', '#3B82F6', '#A855F7', '#EC4899'], []);\n\n  // --- State for Backend Integration ---\n  // const [session, setSession] = useState(null); // REMOVED: session now comes from props\n  const [currentMindMapId, setCurrentMindMapId] = useState(null);\n  const [currentMapTitle, setCurrentMapTitle] = useState('Untitled Map');\n  // const [userMindMaps, setUserMindMaps] = useState([]); // REMOVED: userMindMaps is no longer used here\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('Welcome! Login or register to start creating.');\n\n  // --- Authentication & Session Management ---\n  // handleLogout is now passed as a prop from App.js\n\n  // fetchUserMindMaps is no longer needed in MindMap.jsx after removing \"Load Maps\" from toolbar\n  // If it's still called (e.g., from saveMindMapToServer), its purpose needs re-evaluation.\n  // For now, removing its definition to clean up if not needed.\n  // If you need to refresh a list of maps elsewhere, you'll need this function\n  // or a similar mechanism in the component that manages the list (e.g., MindMapDashboard).\n\n  const fetchUserMindMaps = useCallback(async token => {\n    // This function is still needed by saveMindMapToServer to refresh the dashboard list\n    // if a map is saved, even if not displayed in this component.\n    // However, since `userMindMaps` state was removed, this function now does nothing\n    // with its result. It's safe to keep it, but it doesn't affect `MindMap`'s state.\n    setLoading(true);\n    try {\n      const response = await fetch(`${API_BASE_URL}/mindmaps`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (!response.ok) {\n        if (response.status === 401) {\n          setMessage('Session expired or unauthorized. Please log in again.');\n          onLogout();\n          return;\n        }\n        throw new Error(`Error fetching mind maps: ${response.statusText}`);\n      }\n      // const data = await response.json(); // Data is fetched but not used\n      // setUserMindMaps(data); // Removed\n    } catch (error) {\n      console.error('Fetch mind maps error:', error);\n      setMessage(`Failed to fetch mind maps: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  }, [onLogout]); // Dependencies remain onLogout\n\n  const loadMindMapFromServer = useCallback(async mapId => {\n    if (!session || !session.token) {\n      setMessage('Please log in to load a mind map.');\n      return;\n    }\n    setLoading(true);\n    setMessage('Loading mind map...');\n    try {\n      var _data$viewState, _data$viewState2;\n      const response = await fetch(`${API_BASE_URL}/mindmaps/${mapId}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${session.token}`\n        }\n      });\n      if (!response.ok) {\n        if (response.status === 401) {\n          setMessage('Session expired or unauthorized. Please log in again.');\n          onLogout();\n          return;\n        }\n        throw new Error(`Error loading mind map: ${response.statusText}`);\n      }\n      const data = await response.json();\n      setNodes(data.nodes || []);\n      setConnections(data.connections || []);\n      setTranslateX(((_data$viewState = data.viewState) === null || _data$viewState === void 0 ? void 0 : _data$viewState.translateX) || 0);\n      setTranslateY(((_data$viewState2 = data.viewState) === null || _data$viewState2 === void 0 ? void 0 : _data$viewState2.translateY) || 0);\n      setCurrentMindMapId(data._id);\n      setCurrentMapTitle(data.title);\n      setMessage(`Mind map \"${data.title}\" loaded!`);\n    } catch (error) {\n      console.error('Load mind map error:', error);\n      setMessage(`Failed to load mind map: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  }, [session, onLogout]);\n  const saveMindMapToServer = useCallback(async () => {\n    if (!session || !session.token) {\n      setMessage('Please log in to save your mind map.');\n      return;\n    }\n    setLoading(true);\n    setMessage('Saving mind map...');\n    try {\n      const mindMapData = {\n        title: currentMapTitle,\n        nodes,\n        connections,\n        viewState: {\n          translateX,\n          translateY\n        }\n      };\n      let response;\n      if (currentMindMapId) {\n        response = await fetch(`${API_BASE_URL}/mindmaps/${currentMindMapId}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${session.token}`\n          },\n          body: JSON.stringify(mindMapData)\n        });\n      } else {\n        response = await fetch(`${API_BASE_URL}/mindmaps`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${session.token}`\n          },\n          body: JSON.stringify(mindMapData)\n        });\n      }\n      if (!response.ok) {\n        if (response.status === 401) {\n          setMessage('Session expired or unauthorized. Please log in again to save.');\n          onLogout();\n          return;\n        }\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to save mind map');\n      }\n      const savedMap = await response.json();\n      setCurrentMindMapId(savedMap._id);\n      setCurrentMapTitle(savedMap.title);\n      setMessage('Mind map saved successfully!');\n      // fetchUserMindMaps(session.token); // REMOVED: No longer need to refresh `userMindMaps` state here as it's not used\n    } catch (error) {\n      console.error('Save mind map error:', error);\n      setMessage(`Error saving mind map: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  }, [nodes, connections, translateX, translateY, currentMindMapId, currentMapTitle, session, onLogout]); // `fetchUserMindMaps` removed from dependencies\n\n  const handleNewMap = useCallback(() => {\n    setNodes([{\n      id: '1',\n      x: 400,\n      y: 300,\n      title: 'Central Idea',\n      text: '',\n      isRoot: true,\n      color: '#dc2626'\n    }]);\n    setConnections([]);\n    setTranslateX(0);\n    setTranslateY(0);\n    setCurrentMindMapId(null);\n    setCurrentMapTitle('Untitled Map');\n    // setMessage('Created a new, empty mind map.'); // Removed this message\n    navigate('/mindmap/new', {\n      replace: true\n    });\n  }, [navigate]);\n  const handleSetMapTitle = useCallback(newTitle => {\n    setCurrentMapTitle(newTitle);\n  }, []);\n\n  // Initial session loading logic is now handled in App.js via ProtectedRoute\n  // useEffect(() => { ... }, [navigate, fetchUserMindMaps]); // This useEffect is removed\n\n  // Load map based on ID after session is established\n  useEffect(() => {\n    if (!session) return; // Ensure session is available from props\n    if (id && id !== 'new') {\n      loadMindMapFromServer(id);\n    } else if (id === 'new') {\n      handleNewMap();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [session, id, loadMindMapFromServer, handleNewMap]); // Added dependencies for useEffect\n\n  // --- Mouse Handlers for Node Dragging ---\n  const handleMouseMove = useCallback(e => {\n    if (!dragDataRef.current.isDragging || !draggedNode) return;\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n    animationFrameRef.current = requestAnimationFrame(() => {\n      var _containerRef$current;\n      const rect = (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.getBoundingClientRect();\n      if (!rect) return;\n      const newX = e.clientX - rect.left - dragDataRef.current.offset.x - translateX;\n      const newY = e.clientY - rect.top - dragDataRef.current.offset.y - translateY;\n      setNodes(prev => prev.map(node => node.id === draggedNode ? {\n        ...node,\n        x: newX,\n        y: newY\n      } : node));\n    });\n  }, [draggedNode, translateX, translateY]);\n  const handleMouseDown = useCallback((e, nodeId) => {\n    var _containerRef$current2;\n    e.preventDefault();\n    e.stopPropagation();\n    if (selectedNode !== nodeId) {\n      setSelectedNode(nodeId);\n    }\n    const currentCanvasWrapper = canvasWrapperRef.current;\n    if (currentCanvasWrapper) {\n      currentCanvasWrapper.classList.add('no-transition');\n    }\n    const node = nodes.find(n => n.id === nodeId);\n    if (!node) return;\n    const nodeEl = e.currentTarget;\n    if (!nodeEl) return;\n    const nodeRect = nodeEl.getBoundingClientRect();\n    const containerRect = (_containerRef$current2 = containerRef.current) === null || _containerRef$current2 === void 0 ? void 0 : _containerRef$current2.getBoundingClientRect();\n    if (!containerRect) return;\n    dragDataRef.current = {\n      isDragging: true,\n      offset: {\n        x: e.clientX - nodeRect.left,\n        y: e.clientY - nodeRect.top\n      }\n    };\n    setDraggedNode(nodeId);\n  }, [nodes, selectedNode]);\n  const handleMouseUp = useCallback(() => {\n    dragDataRef.current.isDragging = false;\n    setDraggedNode(null);\n    setIsPanning(false);\n    const currentCanvasWrapper = canvasWrapperRef.current;\n    if (currentCanvasWrapper) {\n      currentCanvasWrapper.classList.remove('no-transition');\n    }\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n      animationFrameRef.current = null;\n    }\n  }, []);\n  const handlePanMouseDown = useCallback(e => {\n    const isTargetNode = e.target.closest('.mindmap-node');\n    const isTargetToolbar = e.target.closest('.mindmap-toolbar');\n    const isTargetInstructions = e.target.closest('.mindmap-instructions');\n    const isTargetLargeEditor = e.target.closest('.large-text-editor-overlay');\n    const isTargetTitleEditor = e.target.closest('.mindmap-title-editor');\n    if (isTargetNode || isTargetToolbar || isTargetInstructions || isTargetLargeEditor || isTargetTitleEditor || e.button !== 0) {\n      return;\n    }\n    setIsPanning(true);\n    panStartRef.current = {\n      x: e.clientX,\n      y: e.clientY,\n      startTranslateX: translateX,\n      startTranslateY: translateY\n    };\n    const currentCanvasWrapper = canvasWrapperRef.current;\n    if (currentCanvasWrapper) {\n      currentCanvasWrapper.classList.add('no-transition');\n    }\n    setSelectedNode(null);\n    e.preventDefault();\n  }, [translateX, translateY]);\n  const handlePanMouseMove = useCallback(e => {\n    if (!isPanning) return;\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n    animationFrameRef.current = requestAnimationFrame(() => {\n      const dx = e.clientX - panStartRef.current.x;\n      const dy = e.clientY - panStartRef.current.y;\n      setTranslateX(panStartRef.current.startTranslateX + dx);\n      setTranslateY(panStartRef.current.startTranslateY + dy);\n    });\n  }, [isPanning]);\n  useEffect(() => {\n    const container = containerRef.current;\n    const canvasWrapper = canvasWrapperRef.current; // Capture ref value for cleanup\n    if (!container) return;\n    const handleGlobalMove = e => {\n      if (draggedNode) {\n        handleMouseMove(e);\n      } else if (isPanning) {\n        handlePanMouseMove(e);\n      }\n    };\n    const handleGlobalUp = () => handleMouseUp();\n    const handlePanDown = e => handlePanMouseDown(e);\n    document.addEventListener('mouseup', handleGlobalUp);\n    document.addEventListener('mouseleave', handleGlobalUp);\n    container.addEventListener('mousemove', handleGlobalMove);\n    container.addEventListener('mousedown', handlePanDown);\n    return () => {\n      document.removeEventListener('mouseup', handleGlobalUp);\n      document.removeEventListener('mouseleave', handleGlobalUp);\n      container.removeEventListener('mousemove', handleGlobalMove);\n      container.removeEventListener('mousedown', handlePanDown);\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n      if (canvasWrapper) {\n        // Use captured ref value here for cleanup\n        canvasWrapper.classList.remove('no-transition');\n      }\n    };\n  }, [handleMouseMove, handleMouseUp, handlePanMouseDown, handlePanMouseMove, draggedNode, isPanning]);\n  const closeLargeEditor = useCallback(() => {\n    setIsLargeEditorOpen(false);\n    setLargeEditorNodeId(null);\n    setLargeEditorTitle('');\n    setLargeEditorText('');\n  }, []);\n  const saveLargeEditorText = useCallback((newTitle, newText) => {\n    if (!largeEditorNodeId) return;\n    setNodes(prev => prev.map(node => node.id === largeEditorNodeId ? {\n      ...node,\n      title: newTitle.trim() || 'New Idea',\n      text: newText.trim() || ''\n    } : node));\n    // If the node edited was the root node, update the map title here\n    const editedNode = nodes.find(n => n.id === largeEditorNodeId);\n    if (editedNode && editedNode.isRoot) {\n      setCurrentMapTitle(newTitle.trim() || 'Untitled Map');\n    }\n    closeLargeEditor();\n  }, [largeEditorNodeId, closeLargeEditor, nodes]);\n  const openLargeEditor = useCallback(nodeId => {\n    const node = nodes.find(n => n.id === nodeId);\n    if (node) {\n      setIsLargeEditorOpen(true);\n      setLargeEditorNodeId(nodeId);\n      setLargeEditorTitle(node.title || '');\n      setLargeEditorText(node.text || '');\n    }\n  }, [nodes]);\n  const addNode = useCallback(() => {\n    const parent = selectedNode ? nodes.find(n => n.id === selectedNode) : nodes.find(n => n.isRoot);\n    if (!parent) {\n      setMessage('Cannot add node: No root node found or selected node does not exist.');\n      return;\n    }\n    const angle = Math.random() * 2 * Math.PI;\n    const distance = 150;\n    const newNode = {\n      id: Date.now().toString(),\n      x: parent.x + Math.cos(angle) * distance,\n      y: parent.y + Math.sin(angle) * distance,\n      title: 'New Idea',\n      text: '',\n      color: colors[Math.floor(Math.random() * colors.length)]\n    };\n    setNodes(prev => [...prev, newNode]);\n    setConnections(prev => [...prev, {\n      from: parent.id,\n      to: newNode.id\n    }]);\n    setSelectedNode(newNode.id);\n    openLargeEditor(newNode.id);\n  }, [nodes, colors, selectedNode, openLargeEditor]);\n  const deleteNode = useCallback(() => {\n    const nodeToDelete = nodes.find(n => n.id === selectedNode);\n    if (!nodeToDelete || nodeToDelete.isRoot) {\n      setMessage('Cannot delete root node or no node selected.');\n      return;\n    }\n    setNodes(prev => prev.filter(n => n.id !== selectedNode));\n    setConnections(prev => prev.filter(c => c.from !== selectedNode && c.to !== selectedNode));\n    setSelectedNode(null);\n  }, [nodes, selectedNode]);\n  const isRootSelected = selectedNode ? (_nodes$find = nodes.find(n => n.id === selectedNode)) === null || _nodes$find === void 0 ? void 0 : _nodes$find.isRoot : false;\n\n  // ProtectedRoute handles redirection if no session\n  // if (!session) { return null; } // REMOVED: ProtectedRoute handles this\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mindmap-container\",\n    ref: containerRef,\n    children: [/*#__PURE__*/_jsxDEV(MindMapToolbar, {\n      onAddNode: addNode,\n      onEditNode: () => selectedNode && openLargeEditor(selectedNode),\n      onDeleteNode: deleteNode,\n      selectedNode: selectedNode,\n      isRootSelected: isRootSelected,\n      onSave: saveMindMapToServer,\n      loading: loading,\n      message: message\n      // onLogout={handleLogout} // REMOVED: Handled by AppHeader\n      // userName={session?.user?.email || 'User'} // REMOVED: Handled by AppHeader\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MindMapTitleEditor, {\n      title: currentMapTitle,\n      onTitleChange: handleSetMapTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MindMapInstructions, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MindMapCanvas, {\n      nodes: nodes,\n      connections: connections,\n      draggedNode: draggedNode,\n      selectedNode: selectedNode,\n      translateX: translateX,\n      translateY: translateY,\n      handleMouseDown: handleMouseDown,\n      openNodeEditor: openLargeEditor,\n      canvasWrapperRef: canvasWrapperRef,\n      svgRef: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 7\n    }, this), isLargeEditorOpen && /*#__PURE__*/_jsxDEV(LargeTextEditor, {\n      isOpen: isLargeEditorOpen,\n      initialTitle: largeEditorTitle,\n      initialText: largeEditorText,\n      onSave: saveLargeEditorText,\n      onCancel: closeLargeEditor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 424,\n    columnNumber: 5\n  }, this);\n};\n_s(MindMap, \"TyYkVhPWi6jWMQLbbvgzRZU5O3U=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = MindMap;\nexport default MindMap;\nvar _c;\n$RefreshReg$(_c, \"MindMap\");","map":{"version":3,"names":["React","useState","useRef","useCallback","useEffect","useMemo","MindMapCanvas","MindMapToolbar","MindMapInstructions","LargeTextEditor","MindMapTitleEditor","useParams","useNavigate","jsxDEV","_jsxDEV","API_BASE_URL","process","env","REACT_APP_BACKEND_API_URL","MindMap","session","onLogout","_s","_nodes$find","id","navigate","nodes","setNodes","x","y","title","text","isRoot","color","connections","setConnections","draggedNode","setDraggedNode","selectedNode","setSelectedNode","isLargeEditorOpen","setIsLargeEditorOpen","largeEditorNodeId","setLargeEditorNodeId","largeEditorTitle","setLargeEditorTitle","largeEditorText","setLargeEditorText","translateX","setTranslateX","translateY","setTranslateY","isPanning","setIsPanning","panStartRef","startTranslateX","startTranslateY","svgRef","containerRef","canvasWrapperRef","dragDataRef","isDragging","offset","animationFrameRef","colors","currentMindMapId","setCurrentMindMapId","currentMapTitle","setCurrentMapTitle","loading","setLoading","message","setMessage","fetchUserMindMaps","token","response","fetch","headers","ok","status","Error","statusText","error","console","loadMindMapFromServer","mapId","_data$viewState","_data$viewState2","method","data","json","viewState","_id","saveMindMapToServer","mindMapData","body","JSON","stringify","errorData","savedMap","handleNewMap","replace","handleSetMapTitle","newTitle","handleMouseMove","e","current","cancelAnimationFrame","requestAnimationFrame","_containerRef$current","rect","getBoundingClientRect","newX","clientX","left","newY","clientY","top","prev","map","node","handleMouseDown","nodeId","_containerRef$current2","preventDefault","stopPropagation","currentCanvasWrapper","classList","add","find","n","nodeEl","currentTarget","nodeRect","containerRect","handleMouseUp","remove","handlePanMouseDown","isTargetNode","target","closest","isTargetToolbar","isTargetInstructions","isTargetLargeEditor","isTargetTitleEditor","button","handlePanMouseMove","dx","dy","container","canvasWrapper","handleGlobalMove","handleGlobalUp","handlePanDown","document","addEventListener","removeEventListener","closeLargeEditor","saveLargeEditorText","newText","trim","editedNode","openLargeEditor","addNode","parent","angle","Math","random","PI","distance","newNode","Date","now","toString","cos","sin","floor","length","from","to","deleteNode","nodeToDelete","filter","c","isRootSelected","className","ref","children","onAddNode","onEditNode","onDeleteNode","onSave","fileName","_jsxFileName","lineNumber","columnNumber","onTitleChange","openNodeEditor","isOpen","initialTitle","initialText","onCancel","_c","$RefreshReg$"],"sources":["/Users/jimmyzhou/Desktop/Projects/scripty/frontend/src/pages/mindmap.jsx"],"sourcesContent":["import React, { useState, useRef, useCallback, useEffect, useMemo } from 'react';\n\nimport MindMapCanvas from '../components/mindmapcanvas';\nimport MindMapToolbar from '../components/mindmaptoolbar';\nimport MindMapInstructions from '../components/mindmapinstructions';\nimport LargeTextEditor from '../components/mindmaptexteditor';\nimport MindMapTitleEditor from '../components/mindmaptitle'; // <-- IMPORT NEW COMPONENT\nimport './mindmap.css';\nimport { useParams, useNavigate } from 'react-router-dom';\n\nconst API_BASE_URL = process.env.REACT_APP_BACKEND_API_URL || 'http://localhost:5001/api';\n\n// MindMap now receives session and onLogout from App.js via ProtectedRoute\nconst MindMap = ({ session, onLogout }) => { // <--- ADD session, onLogout props\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const [nodes, setNodes] = useState([\n    { id: '1', x: 400, y: 300, title: 'Central Idea', text: '', isRoot: true, color: '#dc2626' }\n  ]);\n  const [connections, setConnections] = useState([]);\n  const [draggedNode, setDraggedNode] = useState(null);\n  const [selectedNode, setSelectedNode] = useState(null);\n\n  const [isLargeEditorOpen, setIsLargeEditorOpen] = useState(false);\n  const [largeEditorNodeId, setLargeEditorNodeId] = useState(null);\n  const [largeEditorTitle, setLargeEditorTitle] = useState('');\n  const [largeEditorText, setLargeEditorText] = useState('');\n\n  const [translateX, setTranslateX] = useState(0);\n  const [translateY, setTranslateY] = useState(0);\n  const [isPanning, setIsPanning] = useState(false);\n  const panStartRef = useRef({ x: 0, y: 0, startTranslateX: 0, startTranslateY: 0 });\n\n  const svgRef = useRef(null);\n  const containerRef = useRef(null);\n  const canvasWrapperRef = useRef(null); // Ref for the canvas wrapper\n\n  const dragDataRef = useRef({ isDragging: false, offset: { x: 0, y: 0 } });\n  const animationFrameRef = useRef(null);\n\n  const colors = useMemo(() => [\n    '#EF4444', '#F97316', '#EAB308', '#22C55E', '#3B82F6', '#A855F7', '#EC4899',\n  ], []);\n\n  // --- State for Backend Integration ---\n  // const [session, setSession] = useState(null); // REMOVED: session now comes from props\n  const [currentMindMapId, setCurrentMindMapId] = useState(null);\n  const [currentMapTitle, setCurrentMapTitle] = useState('Untitled Map');\n  // const [userMindMaps, setUserMindMaps] = useState([]); // REMOVED: userMindMaps is no longer used here\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('Welcome! Login or register to start creating.');\n\n  // --- Authentication & Session Management ---\n  // handleLogout is now passed as a prop from App.js\n\n  // fetchUserMindMaps is no longer needed in MindMap.jsx after removing \"Load Maps\" from toolbar\n  // If it's still called (e.g., from saveMindMapToServer), its purpose needs re-evaluation.\n  // For now, removing its definition to clean up if not needed.\n  // If you need to refresh a list of maps elsewhere, you'll need this function\n  // or a similar mechanism in the component that manages the list (e.g., MindMapDashboard).\n\n  const fetchUserMindMaps = useCallback(async (token) => {\n    // This function is still needed by saveMindMapToServer to refresh the dashboard list\n    // if a map is saved, even if not displayed in this component.\n    // However, since `userMindMaps` state was removed, this function now does nothing\n    // with its result. It's safe to keep it, but it doesn't affect `MindMap`'s state.\n    setLoading(true);\n    try {\n      const response = await fetch(`${API_BASE_URL}/mindmaps`, {\n        headers: { 'Authorization': `Bearer ${token}` },\n      });\n      if (!response.ok) {\n        if (response.status === 401) {\n          setMessage('Session expired or unauthorized. Please log in again.');\n          onLogout();\n          return;\n        }\n        throw new Error(`Error fetching mind maps: ${response.statusText}`);\n      }\n      // const data = await response.json(); // Data is fetched but not used\n      // setUserMindMaps(data); // Removed\n    } catch (error) {\n      console.error('Fetch mind maps error:', error);\n      setMessage(`Failed to fetch mind maps: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  }, [onLogout]); // Dependencies remain onLogout\n\n  const loadMindMapFromServer = useCallback(async (mapId) => {\n    if (!session || !session.token) {\n      setMessage('Please log in to load a mind map.');\n      return;\n    }\n    setLoading(true);\n    setMessage('Loading mind map...');\n    try {\n      const response = await fetch(`${API_BASE_URL}/mindmaps/${mapId}`, {\n        method: 'GET',\n        headers: { 'Authorization': `Bearer ${session.token}` },\n      });\n\n      if (!response.ok) {\n        if (response.status === 401) {\n          setMessage('Session expired or unauthorized. Please log in again.');\n          onLogout();\n          return;\n        }\n        throw new Error(`Error loading mind map: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      setNodes(data.nodes || []);\n      setConnections(data.connections || []);\n      setTranslateX(data.viewState?.translateX || 0);\n      setTranslateY(data.viewState?.translateY || 0);\n      setCurrentMindMapId(data._id);\n      setCurrentMapTitle(data.title);\n      setMessage(`Mind map \"${data.title}\" loaded!`);\n    } catch (error) {\n      console.error('Load mind map error:', error);\n      setMessage(`Failed to load mind map: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  }, [session, onLogout]);\n\n  const saveMindMapToServer = useCallback(async () => {\n    if (!session || !session.token) {\n      setMessage('Please log in to save your mind map.');\n      return;\n    }\n\n    setLoading(true);\n    setMessage('Saving mind map...');\n    try {\n      const mindMapData = {\n        title: currentMapTitle,\n        nodes,\n        connections,\n        viewState: { translateX, translateY },\n      };\n\n      let response;\n      if (currentMindMapId) {\n        response = await fetch(`${API_BASE_URL}/mindmaps/${currentMindMapId}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${session.token}`,\n          },\n          body: JSON.stringify(mindMapData),\n        });\n      } else {\n        response = await fetch(`${API_BASE_URL}/mindmaps`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${session.token}`,\n          },\n          body: JSON.stringify(mindMapData),\n        });\n      }\n\n      if (!response.ok) {\n        if (response.status === 401) {\n          setMessage('Session expired or unauthorized. Please log in again to save.');\n          onLogout();\n          return;\n        }\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to save mind map');\n      }\n\n      const savedMap = await response.json();\n      setCurrentMindMapId(savedMap._id);\n      setCurrentMapTitle(savedMap.title);\n      setMessage('Mind map saved successfully!');\n      // fetchUserMindMaps(session.token); // REMOVED: No longer need to refresh `userMindMaps` state here as it's not used\n    } catch (error) {\n      console.error('Save mind map error:', error);\n      setMessage(`Error saving mind map: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  }, [nodes, connections, translateX, translateY, currentMindMapId, currentMapTitle, session, onLogout]); // `fetchUserMindMaps` removed from dependencies\n\n  const handleNewMap = useCallback(() => {\n    setNodes([{ id: '1', x: 400, y: 300, title: 'Central Idea', text: '', isRoot: true, color: '#dc2626' }]);\n    setConnections([]);\n    setTranslateX(0);\n    setTranslateY(0);\n    setCurrentMindMapId(null);\n    setCurrentMapTitle('Untitled Map');\n    // setMessage('Created a new, empty mind map.'); // Removed this message\n    navigate('/mindmap/new', { replace: true });\n  }, [navigate]);\n\n  const handleSetMapTitle = useCallback((newTitle) => {\n    setCurrentMapTitle(newTitle);\n  }, []);\n\n  // Initial session loading logic is now handled in App.js via ProtectedRoute\n  // useEffect(() => { ... }, [navigate, fetchUserMindMaps]); // This useEffect is removed\n\n  // Load map based on ID after session is established\n  useEffect(() => {\n    if (!session) return; // Ensure session is available from props\n    if (id && id !== 'new') {\n      loadMindMapFromServer(id);\n    } else if (id === 'new') {\n      handleNewMap();\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [session, id, loadMindMapFromServer, handleNewMap]); // Added dependencies for useEffect\n\n  // --- Mouse Handlers for Node Dragging ---\n  const handleMouseMove = useCallback((e) => {\n    if (!dragDataRef.current.isDragging || !draggedNode) return;\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n    animationFrameRef.current = requestAnimationFrame(() => {\n      const rect = containerRef.current?.getBoundingClientRect();\n      if (!rect) return;\n      const newX = (e.clientX - rect.left - dragDataRef.current.offset.x - translateX);\n      const newY = (e.clientY - rect.top - dragDataRef.current.offset.y - translateY);\n      setNodes(prev => prev.map(node =>\n        node.id === draggedNode\n          ? { ...node, x: newX, y: newY }\n          : node\n      ));\n    });\n  }, [draggedNode, translateX, translateY]);\n\n  const handleMouseDown = useCallback((e, nodeId) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (selectedNode !== nodeId) {\n      setSelectedNode(nodeId);\n    }\n    const currentCanvasWrapper = canvasWrapperRef.current;\n    if (currentCanvasWrapper) {\n      currentCanvasWrapper.classList.add('no-transition');\n    }\n    const node = nodes.find(n => n.id === nodeId);\n    if (!node) return;\n    const nodeEl = e.currentTarget;\n    if (!nodeEl) return;\n    const nodeRect = nodeEl.getBoundingClientRect();\n    const containerRect = containerRef.current?.getBoundingClientRect();\n    if (!containerRect) return;\n\n    dragDataRef.current = {\n      isDragging: true,\n      offset: {\n        x: e.clientX - nodeRect.left,\n        y: e.clientY - nodeRect.top\n      }\n    };\n    setDraggedNode(nodeId);\n  }, [nodes, selectedNode]);\n\n  const handleMouseUp = useCallback(() => {\n    dragDataRef.current.isDragging = false;\n    setDraggedNode(null);\n    setIsPanning(false);\n    const currentCanvasWrapper = canvasWrapperRef.current;\n    if (currentCanvasWrapper) {\n      currentCanvasWrapper.classList.remove('no-transition');\n    }\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n      animationFrameRef.current = null;\n    }\n  }, []);\n\n  const handlePanMouseDown = useCallback((e) => {\n    const isTargetNode = e.target.closest('.mindmap-node');\n    const isTargetToolbar = e.target.closest('.mindmap-toolbar');\n    const isTargetInstructions = e.target.closest('.mindmap-instructions');\n    const isTargetLargeEditor = e.target.closest('.large-text-editor-overlay');\n    const isTargetTitleEditor = e.target.closest('.mindmap-title-editor');\n    if (isTargetNode || isTargetToolbar || isTargetInstructions || isTargetLargeEditor || isTargetTitleEditor || e.button !== 0) {\n        return;\n    }\n    setIsPanning(true);\n    panStartRef.current = {\n      x: e.clientX,\n      y: e.clientY,\n      startTranslateX: translateX,\n      startTranslateY: translateY\n    };\n    const currentCanvasWrapper = canvasWrapperRef.current;\n    if (currentCanvasWrapper) {\n      currentCanvasWrapper.classList.add('no-transition');\n    }\n    setSelectedNode(null);\n    e.preventDefault();\n  }, [translateX, translateY]);\n\n  const handlePanMouseMove = useCallback((e) => {\n    if (!isPanning) return;\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n    animationFrameRef.current = requestAnimationFrame(() => {\n      const dx = e.clientX - panStartRef.current.x;\n      const dy = e.clientY - panStartRef.current.y;\n      setTranslateX(panStartRef.current.startTranslateX + dx);\n      setTranslateY(panStartRef.current.startTranslateY + dy);\n    });\n  }, [isPanning]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    const canvasWrapper = canvasWrapperRef.current; // Capture ref value for cleanup\n    if (!container) return;\n\n    const handleGlobalMove = (e) => {\n      if (draggedNode) {\n        handleMouseMove(e);\n      } else if (isPanning) {\n        handlePanMouseMove(e);\n      }\n    };\n\n    const handleGlobalUp = () => handleMouseUp();\n\n    const handlePanDown = (e) => handlePanMouseDown(e);\n\n    document.addEventListener('mouseup', handleGlobalUp);\n    document.addEventListener('mouseleave', handleGlobalUp);\n    container.addEventListener('mousemove', handleGlobalMove);\n    container.addEventListener('mousedown', handlePanDown);\n\n    return () => {\n      document.removeEventListener('mouseup', handleGlobalUp);\n      document.removeEventListener('mouseleave', handleGlobalUp);\n      container.removeEventListener('mousemove', handleGlobalMove);\n      container.removeEventListener('mousedown', handlePanDown);\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n      if (canvasWrapper) { // Use captured ref value here for cleanup\n        canvasWrapper.classList.remove('no-transition');\n      }\n    };\n  }, [handleMouseMove, handleMouseUp, handlePanMouseDown, handlePanMouseMove, draggedNode, isPanning]);\n\n  const closeLargeEditor = useCallback(() => {\n    setIsLargeEditorOpen(false);\n    setLargeEditorNodeId(null);\n    setLargeEditorTitle('');\n    setLargeEditorText('');\n  }, []);\n\n  const saveLargeEditorText = useCallback((newTitle, newText) => {\n    if (!largeEditorNodeId) return;\n    setNodes(prev =>\n      prev.map(node => (\n        node.id === largeEditorNodeId\n          ? { ...node, title: newTitle.trim() || 'New Idea', text: newText.trim() || '' }\n          : node\n      ))\n    );\n    // If the node edited was the root node, update the map title here\n    const editedNode = nodes.find(n => n.id === largeEditorNodeId);\n    if (editedNode && editedNode.isRoot) {\n        setCurrentMapTitle(newTitle.trim() || 'Untitled Map');\n    }\n    closeLargeEditor();\n  }, [largeEditorNodeId, closeLargeEditor, nodes]);\n\n  const openLargeEditor = useCallback((nodeId) => {\n    const node = nodes.find(n => n.id === nodeId);\n    if (node) {\n      setIsLargeEditorOpen(true);\n      setLargeEditorNodeId(nodeId);\n      setLargeEditorTitle(node.title || '');\n      setLargeEditorText(node.text || '');\n    }\n  }, [nodes]);\n\n  const addNode = useCallback(() => {\n    const parent = selectedNode ? nodes.find(n => n.id === selectedNode) : nodes.find(n => n.isRoot);\n    if (!parent) {\n      setMessage('Cannot add node: No root node found or selected node does not exist.');\n      return;\n    }\n    const angle = Math.random() * 2 * Math.PI;\n    const distance = 150;\n    const newNode = {\n      id: Date.now().toString(),\n      x: parent.x + Math.cos(angle) * distance,\n      y: parent.y + Math.sin(angle) * distance,\n      title: 'New Idea',\n      text: '',\n      color: colors[Math.floor(Math.random() * colors.length)]\n    };\n    setNodes(prev => [...prev, newNode]);\n    setConnections(prev => [...prev, { from: parent.id, to: newNode.id }]);\n    setSelectedNode(newNode.id);\n    openLargeEditor(newNode.id);\n  }, [nodes, colors, selectedNode, openLargeEditor]);\n\n  const deleteNode = useCallback(() => {\n    const nodeToDelete = nodes.find(n => n.id === selectedNode);\n    if (!nodeToDelete || nodeToDelete.isRoot) {\n      setMessage('Cannot delete root node or no node selected.');\n      return;\n    }\n    setNodes(prev => prev.filter(n => n.id !== selectedNode));\n    setConnections(prev => prev.filter(c => c.from !== selectedNode && c.to !== selectedNode));\n    setSelectedNode(null);\n  }, [nodes, selectedNode]);\n\n  const isRootSelected = selectedNode ? nodes.find(n => n.id === selectedNode)?.isRoot : false;\n\n  // ProtectedRoute handles redirection if no session\n  // if (!session) { return null; } // REMOVED: ProtectedRoute handles this\n\n  return (\n    <div className=\"mindmap-container\" ref={containerRef}>\n      <MindMapToolbar\n        onAddNode={addNode}\n        onEditNode={() => selectedNode && openLargeEditor(selectedNode)}\n        onDeleteNode={deleteNode}\n        selectedNode={selectedNode}\n        isRootSelected={isRootSelected}\n        onSave={saveMindMapToServer}\n        loading={loading}\n        message={message}\n        // onLogout={handleLogout} // REMOVED: Handled by AppHeader\n        // userName={session?.user?.email || 'User'} // REMOVED: Handled by AppHeader\n      />\n\n      {/* New Title Editor Component */}\n      <MindMapTitleEditor\n        title={currentMapTitle}\n        onTitleChange={handleSetMapTitle}\n      />\n\n      <MindMapInstructions />\n\n      <MindMapCanvas\n        nodes={nodes}\n        connections={connections}\n        draggedNode={draggedNode}\n        selectedNode={selectedNode}\n        translateX={translateX}\n        translateY={translateY}\n        handleMouseDown={handleMouseDown}\n        openNodeEditor={openLargeEditor}\n        canvasWrapperRef={canvasWrapperRef}\n        svgRef={svgRef}\n      />\n\n      {isLargeEditorOpen && (\n        <LargeTextEditor\n          isOpen={isLargeEditorOpen}\n          initialTitle={largeEditorTitle}\n          initialText={largeEditorText}\n          onSave={saveLargeEditorText}\n          onCancel={closeLargeEditor}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default MindMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}