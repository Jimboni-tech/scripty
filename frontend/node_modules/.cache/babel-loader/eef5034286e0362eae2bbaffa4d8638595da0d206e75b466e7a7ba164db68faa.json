{"ast":null,"code":"var _jsxFileName = \"/Users/jimmyzhou/Desktop/Projects/scripty/frontend/src/components/ProtectedRoute.jsx\";\n// src/components/ProtectedRoute.jsx\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children\n}) => {\n  // Check if a session exists in localStorage\n  const sessionString = localStorage.getItem('mindmapSession');\n  let session = null;\n  if (sessionString) {\n    try {\n      session = JSON.parse(sessionString);\n    } catch (e) {\n      console.error(\"Failed to parse session from localStorage in ProtectedRoute\", e);\n      localStorage.removeItem('mindmapSession'); // Clear malformed session\n    }\n  }\n\n  // If no valid session or token, redirect to the login page\n  if (!session || !session.token) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 12\n    }, this);\n  }\n\n  // If authenticated, render the children components (the protected content)\n  return children;\n};\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","jsxDEV","_jsxDEV","ProtectedRoute","children","sessionString","localStorage","getItem","session","JSON","parse","e","console","error","removeItem","token","to","replace","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jimmyzhou/Desktop/Projects/scripty/frontend/src/components/ProtectedRoute.jsx"],"sourcesContent":["// src/components/ProtectedRoute.jsx\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\n\nconst ProtectedRoute = ({ children }) => {\n  // Check if a session exists in localStorage\n  const sessionString = localStorage.getItem('mindmapSession');\n  let session = null;\n  if (sessionString) {\n    try {\n      session = JSON.parse(sessionString);\n    } catch (e) {\n      console.error(\"Failed to parse session from localStorage in ProtectedRoute\", e);\n      localStorage.removeItem('mindmapSession'); // Clear malformed session\n    }\n  }\n\n  // If no valid session or token, redirect to the login page\n  if (!session || !session.token) {\n    return <Navigate to=\"/\" replace />;\n  }\n\n  // If authenticated, render the children components (the protected content)\n  return children;\n};\n\nexport default ProtectedRoute;"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EACvC;EACA,MAAMC,aAAa,GAAGC,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC;EAC5D,IAAIC,OAAO,GAAG,IAAI;EAClB,IAAIH,aAAa,EAAE;IACjB,IAAI;MACFG,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACL,aAAa,CAAC;IACrC,CAAC,CAAC,OAAOM,CAAC,EAAE;MACVC,OAAO,CAACC,KAAK,CAAC,6DAA6D,EAAEF,CAAC,CAAC;MAC/EL,YAAY,CAACQ,UAAU,CAAC,gBAAgB,CAAC,CAAC,CAAC;IAC7C;EACF;;EAEA;EACA,IAAI,CAACN,OAAO,IAAI,CAACA,OAAO,CAACO,KAAK,EAAE;IAC9B,oBAAOb,OAAA,CAACF,QAAQ;MAACgB,EAAE,EAAC,GAAG;MAACC,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACpC;;EAEA;EACA,OAAOjB,QAAQ;AACjB,CAAC;AAACkB,EAAA,GApBInB,cAAc;AAsBpB,eAAeA,cAAc;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}