{"ast":null,"code":"var _jsxFileName = \"/Users/jimmyzhou/Desktop/Projects/scripty/frontend/src/pages/mindmap.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useCallback, useEffect, useMemo } from 'react';\nimport MindMapCanvas from '../components/mindmapcanvas';\nimport MindMapToolbar from '../components/mindmaptoolbar';\nimport MindMapInstructions from '../components/mindmapinstructions';\nimport LargeTextEditor from '../components/mindmaptexteditor';\nimport './mindmap.css';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_BACKEND_API_URL || 'http://localhost:5001/api';\n\n// Receive onSetDashboardTitle from Dashboard\nconst MindMap = ({\n  session,\n  onLogout,\n  onSetDashboardTitle\n}) => {\n  _s();\n  var _nodes$find;\n  // onSetDashboardTitle is new\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  const [nodes, setNodes] = useState([{\n    id: '1',\n    x: 400,\n    y: 300,\n    title: 'Central Idea',\n    text: '',\n    isRoot: true,\n    color: '#dc2626'\n  }]);\n  const [connections, setConnections] = useState([]);\n  const [draggedNode, setDraggedNode] = useState(null);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [isLargeEditorOpen, setIsLargeEditorOpen] = useState(false);\n  const [largeEditorNodeId, setLargeEditorNodeId] = useState(null);\n  const [largeEditorTitle, setLargeEditorTitle] = useState('');\n  const [largeEditorText, setLargeEditorText] = '';\n  const [translateX, setTranslateX] = useState(0);\n  const [translateY, setTranslateY] = useState(0);\n  const [isPanning, setIsPanning] = useState(false);\n  const panStartRef = useRef({\n    x: 0,\n    y: 0,\n    startTranslateX: 0,\n    startTranslateY: 0\n  });\n  const svgRef = useRef(null);\n  const containerRef = useRef(null);\n  const canvasWrapperRef = useRef(null);\n  const dragDataRef = useRef({\n    isDragging: false,\n    offset: {\n      x: 0,\n      y: 0\n    }\n  });\n  const animationFrameRef = useRef(null);\n  const colors = useMemo(() => ['#EF4444', '#F97316', '#EAB308', '#22C55E', '#3B82F6', '#A855F7', '#EC4899'], []);\n\n  // --- State for Backend Integration ---\n  const [currentMindMapId, setCurrentMindMapId] = useState(null);\n  const [currentMapTitle, setCurrentMapTitle] = useState('Untitled Map'); // This state drives the dashboard title\n  const [userMindMaps, setUserMindMaps] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('Welcome! Login or register to start creating.');\n\n  // Effect to update the Dashboard's header title\n  useEffect(() => {\n    if (onSetDashboardTitle) {\n      // Ensure the prop exists before calling\n      onSetDashboardTitle(currentMapTitle || 'Untitled Map');\n    }\n  }, [currentMapTitle, onSetDashboardTitle]); // Rerun when currentMapTitle changes\n\n  // Fetch user mind maps (used for the 'Load' dropdown in toolbar, if you re-add it)\n  const fetchUserMindMaps = useCallback(async token => {\n    setLoading(true);\n    setMessage('Fetching your mind maps...');\n    try {\n      const response = await fetch(`${API_BASE_URL}/mindmaps`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (!response.ok) {\n        if (response.status === 401) {\n          setMessage('Session expired or unauthorized. Please log in again.');\n          onLogout();\n          return;\n        }\n        throw new Error(`Error fetching mind maps: ${response.statusText}`);\n      }\n      const data = await response.json();\n      setUserMindMaps(data);\n      setMessage('Your mind maps loaded!');\n    } catch (error) {\n      console.error('Fetch mind maps error:', error);\n      setMessage(`Failed to fetch mind maps: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  }, [onLogout]);\n\n  // Main effect for loading map data based on URL ID\n  useEffect(() => {\n    if (!session || !session.token) {\n      navigate('/'); // Redirect if session is missing\n      return;\n    }\n    fetchUserMindMaps(session.token); // Fetch maps for potential 'Load' dropdown\n\n    if (id && id !== 'new') {\n      loadMindMapFromServer(id);\n    } else if (id === 'new') {\n      handleNewMap();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [session, id, navigate, fetchUserMindMaps]);\n\n  // Load mind map from server - updates currentMapTitle\n  const loadMindMapFromServer = useCallback(async mapId => {\n    if (!session || !session.token) {\n      setMessage('Please log in to load a mind map.');\n      return;\n    }\n    setLoading(true);\n    setMessage('Loading mind map...');\n    try {\n      var _data$viewState, _data$viewState2;\n      const response = await fetch(`${API_BASE_URL}/mindmaps/${mapId}`, {\n        headers: {\n          'Authorization': `Bearer ${session.token}`\n        }\n      });\n      if (!response.ok) {\n        if (response.status === 401) {\n          setMessage('Session expired or unauthorized. Please log in again.');\n          onLogout();\n          return;\n        }\n        throw new Error(`Error loading mind map: ${response.statusText}`);\n      }\n      const data = await response.json();\n      setNodes(data.nodes || []);\n      setConnections(data.connections || []);\n      setTranslateX(((_data$viewState = data.viewState) === null || _data$viewState === void 0 ? void 0 : _data$viewState.translateX) || 0);\n      setTranslateY(((_data$viewState2 = data.viewState) === null || _data$viewState2 === void 0 ? void 0 : _data$viewState2.translateY) || 0);\n      setCurrentMindMapId(data._id);\n      setCurrentMapTitle(data.title); // THIS IS CRUCIAL: Updates state, which triggers useEffect for dashboard title\n      setMessage(`Mind map \"${data.title}\" loaded!`);\n    } catch (error) {\n      console.error('Load mind map error:', error);\n      setMessage(`Failed to load mind map: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  }, [session, onLogout]);\n\n  // Save mind map to server - updates currentMapTitle (if it's a new map)\n  const saveMindMapToServer = useCallback(async () => {\n    if (!session || !session.token) {\n      setMessage('Please log in to save your mind map.');\n      return;\n    }\n    setLoading(true);\n    setMessage('Saving mind map...');\n    try {\n      const mindMapData = {\n        title: currentMapTitle,\n        nodes,\n        connections,\n        viewState: {\n          translateX,\n          translateY\n        }\n      };\n      let response;\n      if (currentMindMapId) {\n        response = await fetch(`${API_BASE_URL}/mindmaps/${currentMindMapId}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${session.token}`\n          },\n          body: JSON.stringify(mindMapData)\n        });\n      } else {\n        response = await fetch(`${API_BASE_URL}/mindmaps`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${session.token}`\n          },\n          body: JSON.stringify(mindMapData)\n        });\n      }\n      if (!response.ok) {\n        if (response.status === 401) {\n          setMessage('Session expired or unauthorized. Please log in again to save.');\n          onLogout();\n          return;\n        }\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to save mind map');\n      }\n      const savedMap = await response.json();\n      setCurrentMindMapId(savedMap._id);\n      setCurrentMapTitle(savedMap.title); // THIS IS CRUCIAL: Updates state, which triggers useEffect for dashboard title\n      setMessage('Mind map saved successfully!');\n      fetchUserMindMaps(session.token); // Refresh the list for the dashboard\n    } catch (error) {\n      console.error('Save mind map error:', error);\n      setMessage(`Error saving mind map: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  }, [nodes, connections, translateX, translateY, currentMindMapId, currentMapTitle, session, fetchUserMindMaps, onLogout]);\n\n  // Handle creating a new mind map - updates currentMapTitle\n  const handleNewMap = useCallback(() => {\n    setNodes([{\n      id: '1',\n      x: 400,\n      y: 300,\n      title: 'Central Idea',\n      text: '',\n      isRoot: true,\n      color: '#dc2626'\n    }]);\n    setConnections([]);\n    setTranslateX(0);\n    setTranslateY(0);\n    setCurrentMindMapId(null);\n    setCurrentMapTitle('Untitled Map'); // THIS IS CRUCIAL: Updates state, which triggers useEffect for dashboard title\n    setMessage('Created a new, empty mind map.');\n    navigate('/mindmap/new', {\n      replace: true\n    });\n  }, [navigate]);\n\n  // Handle setting map title from toolbar - updates currentMapTitle\n  const handleSetMapTitle = useCallback(newTitle => {\n    setCurrentMapTitle(newTitle); // THIS IS CRUCIAL: Updates state, which triggers useEffect for dashboard title\n  }, []);\n\n  // --- Mouse Handlers for Node Dragging (no changes to these) ---\n  const handleMouseMove = useCallback(e => {/* ... (rest of function) ... */}, [draggedNode, translateX, translateY]);\n  const handleMouseDown = useCallback((e, nodeId) => {/* ... (rest of function) ... */}, [nodes, selectedNode]);\n  const handleMouseUp = useCallback(() => {/* ... (rest of function) ... */}, []);\n  const handlePanMouseDown = useCallback(e => {/* ... (rest of function) ... */}, [translateX, translateY]);\n  const handlePanMouseMove = useCallback(e => {/* ... (rest of function) ... */}, [isPanning]);\n  useEffect(() => {/* ... (rest of effect) ... */}, [handleMouseMove, handleMouseUp, handlePanMouseDown, handlePanMouseMove, draggedNode, isPanning]);\n\n  // --- Large Text Editor (no changes to these) ---\n  const closeLargeEditor = useCallback(() => {/* ... (rest of function) ... */}, []);\n  const saveLargeEditorText = useCallback((newTitle, newText) => {/* ... (rest of function) ... */}, [largeEditorNodeId, closeLargeEditor]);\n  const openLargeEditor = useCallback(nodeId => {/* ... (rest of function) ... */}, [nodes]);\n\n  // --- Node Actions (no changes to these) ---\n  const addNode = useCallback(() => {/* ... (rest of function) ... */}, [nodes, colors, selectedNode, openLargeEditor]);\n  const deleteNode = useCallback(() => {/* ... (rest of function) ... */}, [nodes, selectedNode]);\n  const isRootSelected = selectedNode ? (_nodes$find = nodes.find(n => n.id === selectedNode)) === null || _nodes$find === void 0 ? void 0 : _nodes$find.isRoot : false;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mindmap-container\",\n    ref: containerRef,\n    children: [/*#__PURE__*/_jsxDEV(MindMapToolbar, {\n      onAddNode: addNode,\n      onEditNode: () => selectedNode && openLargeEditor(selectedNode),\n      onDeleteNode: deleteNode,\n      selectedNode: selectedNode,\n      isRootSelected: isRootSelected,\n      onSave: saveMindMapToServer\n      // Removed onLoadMap (Load is handled by Dashboard/MindMapDashboard)\n      ,\n      onNewMap: handleNewMap // Still useful for creating a new map within the editor\n      ,\n      userMindMaps: userMindMaps // Keep if you want to show list in future toolbar version\n      ,\n      currentMindMapId: currentMindMapId,\n      loading: loading,\n      message: message\n      // Removed onLogout and userName (handled by Dashboard)\n      ,\n      currentMapTitle: currentMapTitle // This is the title displayed in the toolbar's own title editor\n      ,\n      onSetMapTitle: handleSetMapTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MindMapInstructions, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MindMapCanvas, {\n      nodes: nodes,\n      connections: connections,\n      draggedNode: draggedNode,\n      selectedNode: selectedNode,\n      translateX: translateX,\n      translateY: translateY,\n      handleMouseDown: handleMouseDown,\n      openNodeEditor: openLargeEditor,\n      canvasWrapperRef: canvasWrapperRef,\n      svgRef: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this), isLargeEditorOpen && /*#__PURE__*/_jsxDEV(LargeTextEditor, {\n      isOpen: isLargeEditorOpen,\n      initialTitle: largeEditorTitle,\n      initialText: largeEditorText,\n      onSave: saveLargeEditorText,\n      onCancel: closeLargeEditor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 253,\n    columnNumber: 5\n  }, this);\n};\n_s(MindMap, \"RNxpVDYt+HwfE9gzv0lSu/rssP0=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = MindMap;\nexport default MindMap;\nvar _c;\n$RefreshReg$(_c, \"MindMap\");","map":{"version":3,"names":["React","useState","useRef","useCallback","useEffect","useMemo","MindMapCanvas","MindMapToolbar","MindMapInstructions","LargeTextEditor","useParams","useNavigate","jsxDEV","_jsxDEV","API_BASE_URL","process","env","REACT_APP_BACKEND_API_URL","MindMap","session","onLogout","onSetDashboardTitle","_s","_nodes$find","id","navigate","nodes","setNodes","x","y","title","text","isRoot","color","connections","setConnections","draggedNode","setDraggedNode","selectedNode","setSelectedNode","isLargeEditorOpen","setIsLargeEditorOpen","largeEditorNodeId","setLargeEditorNodeId","largeEditorTitle","setLargeEditorTitle","largeEditorText","setLargeEditorText","translateX","setTranslateX","translateY","setTranslateY","isPanning","setIsPanning","panStartRef","startTranslateX","startTranslateY","svgRef","containerRef","canvasWrapperRef","dragDataRef","isDragging","offset","animationFrameRef","colors","currentMindMapId","setCurrentMindMapId","currentMapTitle","setCurrentMapTitle","userMindMaps","setUserMindMaps","loading","setLoading","message","setMessage","fetchUserMindMaps","token","response","fetch","headers","ok","status","Error","statusText","data","json","error","console","loadMindMapFromServer","handleNewMap","mapId","_data$viewState","_data$viewState2","viewState","_id","saveMindMapToServer","mindMapData","method","body","JSON","stringify","errorData","savedMap","replace","handleSetMapTitle","newTitle","handleMouseMove","e","handleMouseDown","nodeId","handleMouseUp","handlePanMouseDown","handlePanMouseMove","closeLargeEditor","saveLargeEditorText","newText","openLargeEditor","addNode","deleteNode","isRootSelected","find","n","className","ref","children","onAddNode","onEditNode","onDeleteNode","onSave","onNewMap","onSetMapTitle","fileName","_jsxFileName","lineNumber","columnNumber","openNodeEditor","isOpen","initialTitle","initialText","onCancel","_c","$RefreshReg$"],"sources":["/Users/jimmyzhou/Desktop/Projects/scripty/frontend/src/pages/mindmap.jsx"],"sourcesContent":["import React, { useState, useRef, useCallback, useEffect, useMemo } from 'react';\n\nimport MindMapCanvas from '../components/mindmapcanvas';\nimport MindMapToolbar from '../components/mindmaptoolbar';\nimport MindMapInstructions from '../components/mindmapinstructions';\nimport LargeTextEditor from '../components/mindmaptexteditor';\nimport './mindmap.css';\nimport { useParams, useNavigate } from 'react-router-dom';\n\nconst API_BASE_URL = process.env.REACT_APP_BACKEND_API_URL || 'http://localhost:5001/api';\n\n// Receive onSetDashboardTitle from Dashboard\nconst MindMap = ({ session, onLogout, onSetDashboardTitle }) => { // onSetDashboardTitle is new\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const [nodes, setNodes] = useState([\n    { id: '1', x: 400, y: 300, title: 'Central Idea', text: '', isRoot: true, color: '#dc2626' }\n  ]);\n  const [connections, setConnections] = useState([]);\n  const [draggedNode, setDraggedNode] = useState(null);\n  const [selectedNode, setSelectedNode] = useState(null);\n\n  const [isLargeEditorOpen, setIsLargeEditorOpen] = useState(false);\n  const [largeEditorNodeId, setLargeEditorNodeId] = useState(null);\n  const [largeEditorTitle, setLargeEditorTitle] = useState('');\n  const [largeEditorText, setLargeEditorText] = '';\n\n\n  const [translateX, setTranslateX] = useState(0);\n  const [translateY, setTranslateY] = useState(0);\n  const [isPanning, setIsPanning] = useState(false);\n  const panStartRef = useRef({ x: 0, y: 0, startTranslateX: 0, startTranslateY: 0 });\n\n  const svgRef = useRef(null);\n  const containerRef = useRef(null);\n  const canvasWrapperRef = useRef(null);\n\n  const dragDataRef = useRef({ isDragging: false, offset: { x: 0, y: 0 } });\n  const animationFrameRef = useRef(null);\n\n  const colors = useMemo(() => [\n    '#EF4444',\n    '#F97316',\n    '#EAB308',\n    '#22C55E',\n    '#3B82F6',\n    '#A855F7',\n    '#EC4899',\n  ], []);\n\n  // --- State for Backend Integration ---\n  const [currentMindMapId, setCurrentMindMapId] = useState(null);\n  const [currentMapTitle, setCurrentMapTitle] = useState('Untitled Map'); // This state drives the dashboard title\n  const [userMindMaps, setUserMindMaps] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('Welcome! Login or register to start creating.');\n\n  // Effect to update the Dashboard's header title\n  useEffect(() => {\n    if (onSetDashboardTitle) { // Ensure the prop exists before calling\n      onSetDashboardTitle(currentMapTitle || 'Untitled Map');\n    }\n  }, [currentMapTitle, onSetDashboardTitle]); // Rerun when currentMapTitle changes\n\n  // Fetch user mind maps (used for the 'Load' dropdown in toolbar, if you re-add it)\n  const fetchUserMindMaps = useCallback(async (token) => {\n    setLoading(true);\n    setMessage('Fetching your mind maps...');\n    try {\n      const response = await fetch(`${API_BASE_URL}/mindmaps`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) {\n        if (response.status === 401) {\n          setMessage('Session expired or unauthorized. Please log in again.');\n          onLogout();\n          return;\n        }\n        throw new Error(`Error fetching mind maps: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      setUserMindMaps(data);\n      setMessage('Your mind maps loaded!');\n    } catch (error) {\n      console.error('Fetch mind maps error:', error);\n      setMessage(`Failed to fetch mind maps: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  }, [onLogout]);\n\n  // Main effect for loading map data based on URL ID\n  useEffect(() => {\n    if (!session || !session.token) {\n      navigate('/'); // Redirect if session is missing\n      return;\n    }\n\n    fetchUserMindMaps(session.token); // Fetch maps for potential 'Load' dropdown\n\n    if (id && id !== 'new') {\n      loadMindMapFromServer(id);\n    } else if (id === 'new') {\n      handleNewMap();\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [session, id, navigate, fetchUserMindMaps]);\n\n\n  // Load mind map from server - updates currentMapTitle\n  const loadMindMapFromServer = useCallback(async (mapId) => {\n    if (!session || !session.token) {\n      setMessage('Please log in to load a mind map.');\n      return;\n    }\n    setLoading(true);\n    setMessage('Loading mind map...');\n    try {\n      const response = await fetch(`${API_BASE_URL}/mindmaps/${mapId}`, {\n        headers: {\n          'Authorization': `Bearer ${session.token}`,\n        },\n      });\n\n      if (!response.ok) {\n        if (response.status === 401) {\n          setMessage('Session expired or unauthorized. Please log in again.');\n          onLogout();\n          return;\n        }\n        throw new Error(`Error loading mind map: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      setNodes(data.nodes || []);\n      setConnections(data.connections || []);\n      setTranslateX(data.viewState?.translateX || 0);\n      setTranslateY(data.viewState?.translateY || 0);\n      setCurrentMindMapId(data._id);\n      setCurrentMapTitle(data.title); // THIS IS CRUCIAL: Updates state, which triggers useEffect for dashboard title\n      setMessage(`Mind map \"${data.title}\" loaded!`);\n    } catch (error) {\n      console.error('Load mind map error:', error);\n      setMessage(`Failed to load mind map: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  }, [session, onLogout]);\n\n\n  // Save mind map to server - updates currentMapTitle (if it's a new map)\n  const saveMindMapToServer = useCallback(async () => {\n    if (!session || !session.token) {\n      setMessage('Please log in to save your mind map.');\n      return;\n    }\n\n    setLoading(true);\n    setMessage('Saving mind map...');\n    try {\n      const mindMapData = {\n        title: currentMapTitle,\n        nodes,\n        connections,\n        viewState: { translateX, translateY },\n      };\n\n      let response;\n      if (currentMindMapId) {\n        response = await fetch(`${API_BASE_URL}/mindmaps/${currentMindMapId}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${session.token}`,\n          },\n          body: JSON.stringify(mindMapData),\n        });\n      } else {\n        response = await fetch(`${API_BASE_URL}/mindmaps`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${session.token}`,\n          },\n          body: JSON.stringify(mindMapData),\n        });\n      }\n\n      if (!response.ok) {\n        if (response.status === 401) {\n          setMessage('Session expired or unauthorized. Please log in again to save.');\n          onLogout();\n          return;\n        }\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to save mind map');\n      }\n\n      const savedMap = await response.json();\n      setCurrentMindMapId(savedMap._id);\n      setCurrentMapTitle(savedMap.title); // THIS IS CRUCIAL: Updates state, which triggers useEffect for dashboard title\n      setMessage('Mind map saved successfully!');\n      fetchUserMindMaps(session.token); // Refresh the list for the dashboard\n    } catch (error) {\n      console.error('Save mind map error:', error);\n      setMessage(`Error saving mind map: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  }, [nodes, connections, translateX, translateY, currentMindMapId, currentMapTitle, session, fetchUserMindMaps, onLogout]);\n\n  // Handle creating a new mind map - updates currentMapTitle\n  const handleNewMap = useCallback(() => {\n    setNodes([{ id: '1', x: 400, y: 300, title: 'Central Idea', text: '', isRoot: true, color: '#dc2626' }]);\n    setConnections([]);\n    setTranslateX(0);\n    setTranslateY(0);\n    setCurrentMindMapId(null);\n    setCurrentMapTitle('Untitled Map'); // THIS IS CRUCIAL: Updates state, which triggers useEffect for dashboard title\n    setMessage('Created a new, empty mind map.');\n    navigate('/mindmap/new', { replace: true });\n  }, [navigate]);\n\n  // Handle setting map title from toolbar - updates currentMapTitle\n  const handleSetMapTitle = useCallback((newTitle) => {\n    setCurrentMapTitle(newTitle); // THIS IS CRUCIAL: Updates state, which triggers useEffect for dashboard title\n  }, []);\n\n  // --- Mouse Handlers for Node Dragging (no changes to these) ---\n  const handleMouseMove = useCallback((e) => { /* ... (rest of function) ... */ }, [draggedNode, translateX, translateY]);\n  const handleMouseDown = useCallback((e, nodeId) => { /* ... (rest of function) ... */ }, [nodes, selectedNode]);\n  const handleMouseUp = useCallback(() => { /* ... (rest of function) ... */ }, []);\n  const handlePanMouseDown = useCallback((e) => { /* ... (rest of function) ... */ }, [translateX, translateY]);\n  const handlePanMouseMove = useCallback((e) => { /* ... (rest of function) ... */ }, [isPanning]);\n  useEffect(() => { /* ... (rest of effect) ... */ }, [handleMouseMove, handleMouseUp, handlePanMouseDown, handlePanMouseMove, draggedNode, isPanning]);\n\n  // --- Large Text Editor (no changes to these) ---\n  const closeLargeEditor = useCallback(() => { /* ... (rest of function) ... */ }, []);\n  const saveLargeEditorText = useCallback((newTitle, newText) => { /* ... (rest of function) ... */ }, [largeEditorNodeId, closeLargeEditor]);\n  const openLargeEditor = useCallback((nodeId) => { /* ... (rest of function) ... */ }, [nodes]);\n\n  // --- Node Actions (no changes to these) ---\n  const addNode = useCallback(() => { /* ... (rest of function) ... */ }, [nodes, colors, selectedNode, openLargeEditor]);\n  const deleteNode = useCallback(() => { /* ... (rest of function) ... */ }, [nodes, selectedNode]);\n\n  const isRootSelected = selectedNode ? nodes.find(n => n.id === selectedNode)?.isRoot : false;\n\n  return (\n    <div className=\"mindmap-container\" ref={containerRef}>\n      <MindMapToolbar\n        onAddNode={addNode}\n        onEditNode={() => selectedNode && openLargeEditor(selectedNode)}\n        onDeleteNode={deleteNode}\n        selectedNode={selectedNode}\n        isRootSelected={isRootSelected}\n        onSave={saveMindMapToServer}\n        // Removed onLoadMap (Load is handled by Dashboard/MindMapDashboard)\n        onNewMap={handleNewMap} // Still useful for creating a new map within the editor\n        userMindMaps={userMindMaps} // Keep if you want to show list in future toolbar version\n        currentMindMapId={currentMindMapId}\n        loading={loading}\n        message={message}\n        // Removed onLogout and userName (handled by Dashboard)\n        currentMapTitle={currentMapTitle} // This is the title displayed in the toolbar's own title editor\n        onSetMapTitle={handleSetMapTitle}\n      />\n\n      <MindMapInstructions />\n\n      <MindMapCanvas\n        nodes={nodes}\n        connections={connections}\n        draggedNode={draggedNode}\n        selectedNode={selectedNode}\n        translateX={translateX}\n        translateY={translateY}\n        handleMouseDown={handleMouseDown}\n        openNodeEditor={openLargeEditor}\n        canvasWrapperRef={canvasWrapperRef}\n        svgRef={svgRef}\n      />\n\n      {isLargeEditorOpen && (\n        <LargeTextEditor\n          isOpen={isLargeEditorOpen}\n          initialTitle={largeEditorTitle}\n          initialText={largeEditorText}\n          onSave={saveLargeEditorText}\n          onCancel={closeLargeEditor}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default MindMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}