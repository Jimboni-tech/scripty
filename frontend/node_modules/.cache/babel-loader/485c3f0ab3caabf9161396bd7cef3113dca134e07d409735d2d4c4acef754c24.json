{"ast":null,"code":"var _jsxFileName = \"/Users/jimmyzhou/Desktop/Projects/scripty/frontend/src/App.js\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate, useNavigate, useLocation } from 'react-router-dom'; // Import useLocation\n\nimport MindMap from './pages/mindmap.jsx';\nimport MindMapDashboard from './pages/mindmapdashboard.jsx';\nimport Auth from './pages/auth.jsx';\nimport HomePage from './pages/homepage.jsx';\nimport ProtectedRoute from './components/ProtectedRoute.jsx';\nimport AppHeader from './components/appheader.jsx'; // Import the new header component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [session, setSession] = useState(null); // State to hold session data\n  const navigate = useNavigate(); // For programmatic navigation\n  const location = useLocation(); // To get current path for conditional header rendering\n\n  // Centralized session loading from localStorage\n  useEffect(() => {\n    try {\n      const storedSession = localStorage.getItem('mindmapSession');\n      if (storedSession) {\n        const parsedSession = JSON.parse(storedSession);\n        if (parsedSession && parsedSession.token && parsedSession.user) {\n          setSession(parsedSession);\n        } else {\n          localStorage.removeItem('mindmapSession');\n          // If session is invalid, ensure user is redirected to login if not already there\n          if (location.pathname !== '/') {\n            navigate('/');\n          }\n        }\n      } else {\n        // If no session found, redirect to login if not already there\n        if (location.pathname !== '/') {\n          navigate('/');\n        }\n      }\n    } catch (e) {\n      console.error(\"Failed to parse session from localStorage\", e);\n      localStorage.removeItem('mindmapSession'); // Clear bad data\n      if (location.pathname !== '/') {\n        navigate('/');\n      }\n    }\n  }, [navigate, location.pathname]); // Depend on navigate and location.pathname\n\n  // Centralized authentication success handler\n  const handleAuthSuccess = useCallback(authData => {\n    setSession(authData);\n    localStorage.setItem('mindmapSession', JSON.stringify(authData));\n    navigate('/dashboard'); // Navigate to the dashboard after successful authentication\n  }, [navigate]);\n\n  // Centralized logout handler\n  const handleLogout = useCallback(() => {\n    setSession(null); // Clear session state\n    localStorage.removeItem('mindmapSession'); // Clear session from localStorage\n    navigate('/'); // Redirect to login page\n  }, [navigate]);\n\n  // Determine if the header should be shown (not on the Auth page)\n  const showHeader = location.pathname !== '/';\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: [showHeader && /*#__PURE__*/_jsxDEV(AppHeader, {\n      session: session,\n      onLogout: handleLogout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(Auth, {\n          onAuthSuccess: handleAuthSuccess\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/home\",\n        element: /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 38\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/dashboard\",\n        element: /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n          session: session,\n          children: [\" \", /*#__PURE__*/_jsxDEV(MindMapDashboard, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/mindmap/:id\",\n        element: /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n          session: session,\n          children: [\" \", /*#__PURE__*/_jsxDEV(MindMap, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"*\",\n        element: /*#__PURE__*/_jsxDEV(Navigate, {\n          to: \"/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"IFJQQzcqrZ5ZE8Yl4alHlheANKM=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","BrowserRouter","Router","Routes","Route","Navigate","useNavigate","useLocation","MindMap","MindMapDashboard","Auth","HomePage","ProtectedRoute","AppHeader","jsxDEV","_jsxDEV","App","_s","session","setSession","navigate","location","storedSession","localStorage","getItem","parsedSession","JSON","parse","token","user","removeItem","pathname","e","console","error","handleAuthSuccess","authData","setItem","stringify","handleLogout","showHeader","children","onLogout","fileName","_jsxFileName","lineNumber","columnNumber","path","element","onAuthSuccess","to","_c","$RefreshReg$"],"sources":["/Users/jimmyzhou/Desktop/Projects/scripty/frontend/src/App.js"],"sourcesContent":["// src/App.js\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate, useNavigate, useLocation } from 'react-router-dom'; // Import useLocation\n\nimport MindMap from './pages/mindmap.jsx';\nimport MindMapDashboard from './pages/mindmapdashboard.jsx';\nimport Auth from './pages/auth.jsx';\nimport HomePage from './pages/homepage.jsx';\nimport ProtectedRoute from './components/ProtectedRoute.jsx';\nimport AppHeader from './components/appheader.jsx'; // Import the new header component\n\nfunction App() {\n  const [session, setSession] = useState(null); // State to hold session data\n  const navigate = useNavigate(); // For programmatic navigation\n  const location = useLocation(); // To get current path for conditional header rendering\n\n  // Centralized session loading from localStorage\n  useEffect(() => {\n    try {\n      const storedSession = localStorage.getItem('mindmapSession');\n      if (storedSession) {\n        const parsedSession = JSON.parse(storedSession);\n        if (parsedSession && parsedSession.token && parsedSession.user) {\n          setSession(parsedSession);\n        } else {\n          localStorage.removeItem('mindmapSession');\n          // If session is invalid, ensure user is redirected to login if not already there\n          if (location.pathname !== '/') {\n            navigate('/');\n          }\n        }\n      } else {\n        // If no session found, redirect to login if not already there\n        if (location.pathname !== '/') {\n          navigate('/');\n        }\n      }\n    } catch (e) {\n      console.error(\"Failed to parse session from localStorage\", e);\n      localStorage.removeItem('mindmapSession'); // Clear bad data\n      if (location.pathname !== '/') {\n        navigate('/');\n      }\n    }\n  }, [navigate, location.pathname]); // Depend on navigate and location.pathname\n\n  // Centralized authentication success handler\n  const handleAuthSuccess = useCallback((authData) => {\n    setSession(authData);\n    localStorage.setItem('mindmapSession', JSON.stringify(authData));\n    navigate('/dashboard'); // Navigate to the dashboard after successful authentication\n  }, [navigate]);\n\n  // Centralized logout handler\n  const handleLogout = useCallback(() => {\n    setSession(null); // Clear session state\n    localStorage.removeItem('mindmapSession'); // Clear session from localStorage\n    navigate('/'); // Redirect to login page\n  }, [navigate]);\n\n  // Determine if the header should be shown (not on the Auth page)\n  const showHeader = location.pathname !== '/';\n\n  return (\n    <Router>\n      {/* AppHeader is rendered here, outside of Routes, so it's always present\n          but its internal logic will hide it if no session or on specific routes */}\n      {showHeader && <AppHeader session={session} onLogout={handleLogout} />}\n\n      <Routes>\n        {/* Public Routes */}\n        {/* The Auth component now receives the centralized handleAuthSuccess */}\n        <Route path=\"/\" element={<Auth onAuthSuccess={handleAuthSuccess} />} />\n        <Route path=\"/home\" element={<HomePage />} />\n\n        {/* Protected Routes - These now rely on the session state from App.js */}\n        <Route\n          path=\"/dashboard\"\n          element={\n            <ProtectedRoute session={session}> {/* Pass session to ProtectedRoute */}\n              <MindMapDashboard />\n            </ProtectedRoute>\n          }\n        />\n        <Route\n          path=\"/mindmap/:id\"\n          element={\n            <ProtectedRoute session={session}> {/* Pass session to ProtectedRoute */}\n              <MindMap />\n            </ProtectedRoute>\n          }\n        />\n\n        {/* Fallback for any unmatched routes - redirects to the login/auth page */}\n        <Route path=\"*\" element={<Navigate to=\"/\" />} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}