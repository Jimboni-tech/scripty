{"ast":null,"code":"var _jsxFileName = \"/Users/jimmyzhou/Desktop/Projects/scripty/frontend/src/pages/mindmap.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useCallback, useEffect, useMemo } from 'react';\nimport { createClient } from '@supabase/supabase-js';\nimport MindMapCanvas from '../components/mindmapcanvas';\nimport MindMapToolbar from '../components/mindmaptoolbar';\nimport MindMapInstructions from '../components/mindmapinstructions';\nimport LargeTextEditor from '../components/mindmaptexteditor';\nimport Auth from '../components/Auth';\nimport './mindmap.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\nconst supabase = createClient(supabaseUrl, supabaseAnonKey);\nconst API_BASE_URL = process.env.REACT_APP_BACKEND_API_URL;\nconst MindMap = () => {\n  _s();\n  var _session$user, _nodes$find, _session$user2;\n  const [nodes, setNodes] = useState([{\n    id: '1',\n    x: 400,\n    y: 300,\n    title: 'Central Idea',\n    text: '',\n    isRoot: true,\n    color: '#dc2626'\n  }]);\n  const [connections, setConnections] = useState([]);\n  const [draggedNode, setDraggedNode] = useState(null);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [isLargeEditorOpen, setIsLargeEditorOpen] = useState(false);\n  const [largeEditorNodeId, setLargeEditorNodeId] = useState(null);\n  const [largeEditorTitle, setLargeEditorTitle] = useState('');\n  const [largeEditorText, setLargeEditorText] = useState('');\n  const [translateX, setTranslateX] = useState(0);\n  const [translateY, setTranslateY] = useState(0);\n  const [isPanning, setIsPanning] = useState(false);\n  const panStartRef = useRef({\n    x: 0,\n    y: 0,\n    startTranslateX: 0,\n    startTranslateY: 0\n  });\n  const svgRef = useRef(null);\n  const containerRef = useRef(null);\n  const canvasWrapperRef = useRef(null);\n  const dragDataRef = useRef({\n    isDragging: false,\n    offset: {\n      x: 0,\n      y: 0\n    }\n  });\n  const animationFrameRef = useRef(null);\n  const colors = useMemo(() => ['#EF4444',\n  // Red\n  '#F97316',\n  // Orange\n  '#EAB308',\n  // Yellow\n  '#22C55E',\n  // Green\n  '#3B82F6',\n  // Blue\n  '#A855F7',\n  // Purple\n  '#EC4899' // Pink\n  ], []);\n\n  // --- Authentication and Persistence States ---\n  const [session, setSession] = useState(null);\n  const userId = (session === null || session === void 0 ? void 0 : (_session$user = session.user) === null || _session$user === void 0 ? void 0 : _session$user.id) || null; // Derived from session\n  const [mindmapId, setMindmapId] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('');\n\n  // --- Backend API Save Function (MUST BE DEFINED BEFORE useEffect THAT USES IT) ---\n  const saveMindMap = useCallback(async () => {\n    if (!session || !session.access_token) {\n      setMessage('You must be logged in to save your mind map.');\n      return;\n    }\n    setLoading(true);\n    setMessage('Saving mind map...');\n    const mindMapData = {\n      mindmapId,\n      name: 'My Awesome Mind Map',\n      nodes_data: nodes,\n      connections_data: connections,\n      translate_x: translateX,\n      translate_y: translateY\n    };\n    try {\n      const response = await fetch(`${API_BASE_URL}/mindmaps`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${session.access_token}`\n        },\n        body: JSON.stringify(mindMapData)\n      });\n      const result = await response.json();\n      if (!response.ok) {\n        throw new Error(result.message || result.error || 'Failed to save mind map');\n      }\n      setMindmapId(result.data.id);\n      setMessage('Mind map saved successfully!');\n      console.log('Mind map saved:', result.data);\n    } catch (error) {\n      setMessage(`Error saving mind map: ${error.message}`);\n      console.error('Error saving mind map:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [session, nodes, connections, translateX, translateY, mindmapId]);\n\n  // --- Backend API Load Function (MUST BE DEFINED BEFORE useEffect THAT USES IT) ---\n  const loadMindMap = useCallback(async () => {\n    if (!session || !session.access_token) {\n      setMessage('Please log in to load your mind map.');\n      return;\n    }\n    setLoading(true);\n    setMessage('Loading mind map...');\n    try {\n      const response = await fetch(`${API_BASE_URL}/mindmaps`, {\n        headers: {\n          'Authorization': `Bearer ${session.access_token}`\n        }\n      });\n      const result = await response.json();\n      if (!response.ok) {\n        if (response.status === 404) {\n          setMessage('No mind map found for this user. Create a new one!');\n          setNodes([{\n            id: '1',\n            x: 400,\n            y: 300,\n            title: 'Central Idea',\n            text: '',\n            isRoot: true,\n            color: '#dc2626'\n          }]);\n          setConnections([]);\n          setTranslateX(0);\n          setTranslateY(0);\n          setMindmapId(null);\n          return;\n        }\n        throw new Error(result.message || result.error || 'Failed to load mind map');\n      }\n      const loadedMap = result.data;\n      setNodes(loadedMap.nodes_data);\n      setConnections(loadedMap.connections_data);\n      setTranslateX(loadedMap.translate_x);\n      setTranslateY(loadedMap.translate_y);\n      setMindmapId(loadedMap.id);\n      setMessage('Mind map loaded successfully!');\n      console.log('Mind map loaded:', loadedMap);\n    } catch (error) {\n      setMessage(`Error loading mind map: ${error.message}`);\n      console.error('Error loading mind map:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [session, setNodes, setConnections, setTranslateX, setTranslateY, setMindmapId]);\n\n  // Handle Supabase Auth Session (now that loadMindMap is defined)\n  useEffect(() => {\n    supabase.auth.getSession().then(({\n      data: {\n        session\n      }\n    }) => {\n      setSession(session);\n      if (session) {\n        setMessage('Logged in. Loading your latest mind map...');\n        loadMindMap(); // Call loadMindMap here\n      } else {\n        setMessage('Please log in or sign up.');\n      }\n    });\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange((_event, session) => {\n      setSession(session);\n      if (session) {\n        setMessage('Authentication state changed. User is logged in.');\n        loadMindMap();\n      } else {\n        setMessage('Logged out. Please log in or sign up.');\n        setNodes([{\n          id: '1',\n          x: 400,\n          y: 300,\n          title: 'Central Idea',\n          text: '',\n          isRoot: true,\n          color: '#dc2626'\n        }]);\n        setConnections([]);\n        setTranslateX(0);\n        setTranslateY(0);\n        setMindmapId(null);\n      }\n    });\n    return () => subscription.unsubscribe();\n  }, [loadMindMap]); // `loadMindMap` needs to be in dependency array because it's a useCallback and might change.\n\n  // Callback from Auth component after successful login/signup\n  const handleAuthSuccess = useCallback(newSession => {\n    setSession(newSession);\n    setMessage('Authentication successful. Loading your mind map...');\n    loadMindMap(); // Load map immediately after successful auth\n  }, [loadMindMap]); // `loadMindMap` needs to be in dependency array\n\n  // Logout function\n  const handleLogout = useCallback(async () => {\n    setLoading(true);\n    setMessage('Logging out...');\n    try {\n      const {\n        error\n      } = await supabase.auth.signOut();\n      if (error) throw error;\n      setMessage('Logged out successfully.');\n    } catch (error) {\n      setMessage(`Logout error: ${error.message}`);\n      console.error('Logout error:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // --- Mouse Handlers for Node Dragging (no changes, but for completeness) ---\n  const handleMouseMove = useCallback(e => {\n    if (!dragDataRef.current.isDragging || !draggedNode) return;\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n    animationFrameRef.current = requestAnimationFrame(() => {\n      var _containerRef$current;\n      const rect = (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.getBoundingClientRect();\n      if (!rect) return;\n      const newX = e.clientX - rect.left - dragDataRef.current.offset.x - translateX;\n      const newY = e.clientY - rect.top - dragDataRef.current.offset.y - translateY;\n      const constrainedX = Math.max(0, Math.min(newX, 2000));\n      const constrainedY = Math.max(0, Math.min(newY, 1500));\n      setNodes(prev => prev.map(node => node.id === draggedNode ? {\n        ...node,\n        x: constrainedX,\n        y: constrainedY\n      } : node));\n    });\n  }, [draggedNode, translateX, translateY]); // Dependencies: Correct\n\n  const handleMouseDown = useCallback((e, nodeId) => {\n    var _containerRef$current2;\n    e.preventDefault();\n    e.stopPropagation();\n    if (selectedNode !== nodeId) {\n      setSelectedNode(nodeId);\n    }\n    const currentCanvasWrapper = canvasWrapperRef.current;\n    if (currentCanvasWrapper) {\n      currentCanvasWrapper.classList.add('no-transition');\n    }\n    const node = nodes.find(n => n.id === nodeId);\n    if (!node) return;\n    const nodeEl = e.currentTarget;\n    if (!nodeEl) return;\n    const nodeRect = nodeEl.getBoundingClientRect();\n    const containerRect = (_containerRef$current2 = containerRef.current) === null || _containerRef$current2 === void 0 ? void 0 : _containerRef$current2.getBoundingClientRect();\n    if (!containerRect) return;\n    dragDataRef.current = {\n      isDragging: true,\n      offset: {\n        x: e.clientX - nodeRect.left,\n        y: e.clientY - nodeRect.top\n      }\n    };\n    setDraggedNode(nodeId);\n  }, [nodes, selectedNode]); // Dependencies: Correct\n\n  const handleMouseUp = useCallback(() => {\n    dragDataRef.current.isDragging = false;\n    setDraggedNode(null);\n    setIsPanning(false);\n    const currentCanvasWrapper = canvasWrapperRef.current;\n    if (currentCanvasWrapper) {\n      currentCanvasWrapper.classList.remove('no-transition');\n    }\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n      animationFrameRef.current = null;\n    }\n  }, []); // Dependencies: Correct\n\n  // --- Mouse Handlers for Panning (no changes) ---\n  const handlePanMouseDown = useCallback(e => {\n    const isTargetNode = e.target.closest('.mindmap-node');\n    const isTargetToolbar = e.target.closest('.mindmap-toolbar');\n    const isTargetInstructions = e.target.closest('.mindmap-instructions');\n    const isTargetLargeEditor = e.target.closest('.large-text-editor-overlay');\n    if (isTargetNode || isTargetToolbar || isTargetInstructions || isTargetLargeEditor || e.button !== 0) {\n      return;\n    }\n    setIsPanning(true);\n    panStartRef.current = {\n      x: e.clientX,\n      y: e.clientY,\n      startTranslateX: translateX,\n      startTranslateY: translateY\n    };\n    const currentCanvasWrapper = canvasWrapperRef.current;\n    if (currentCanvasWrapper) {\n      currentCanvasWrapper.classList.add('no-transition');\n    }\n    setSelectedNode(null);\n    e.preventDefault();\n  }, [translateX, translateY]); // Dependencies: Correct\n\n  const handlePanMouseMove = useCallback(e => {\n    if (!isPanning) return;\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n    animationFrameRef.current = requestAnimationFrame(() => {\n      const dx = e.clientX - panStartRef.current.x;\n      const dy = e.clientY - panStartRef.current.y;\n      setTranslateX(panStartRef.current.startTranslateX + dx);\n      setTranslateY(panStartRef.current.startTranslateY + dy);\n    });\n  }, [isPanning]); // Dependencies: Correct\n\n  useEffect(() => {\n    const container = containerRef.current;\n    const currentCanvasWrapper = canvasWrapperRef.current;\n    if (!container) return;\n    const handleMove = e => {\n      if (draggedNode) {\n        handleMouseMove(e);\n      } else if (isPanning) {\n        handlePanMouseMove(e);\n      }\n    };\n    const handleUp = () => handleMouseUp();\n    const handlePanDown = e => handlePanMouseDown(e);\n    document.addEventListener('mouseup', handleUp);\n    document.addEventListener('mouseleave', handleUp);\n    container.addEventListener('mousemove', handleMove);\n    container.addEventListener('mousedown', handlePanDown);\n    return () => {\n      document.removeEventListener('mouseup', handleUp);\n      document.removeEventListener('mouseleave', handleUp);\n      container.removeEventListener('mousemove', handleMove);\n      container.removeEventListener('mousedown', handlePanDown);\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n      if (currentCanvasWrapper) {\n        currentCanvasWrapper.classList.remove('no-transition');\n      }\n    };\n  }, [handleMouseMove, handleMouseUp, handlePanMouseDown, handlePanMouseMove, draggedNode, isPanning]); // Dependencies: Correct\n\n  // --- Large Text Editor Functions (no changes, but for completeness) ---\n  const closeLargeEditor = useCallback(() => {\n    setIsLargeEditorOpen(false);\n    setLargeEditorNodeId(null);\n    setLargeEditorTitle('');\n    setLargeEditorText('');\n  }, []); // Dependencies: Correct (setters are stable)\n\n  const saveLargeEditorText = useCallback((newTitle, newText) => {\n    if (!largeEditorNodeId) return;\n    setNodes(prev => prev.map(node => node.id === largeEditorNodeId ? {\n      ...node,\n      title: newTitle.trim() || 'New Idea',\n      text: newText.trim() || ''\n    } : node));\n    closeLargeEditor();\n  }, [largeEditorNodeId, closeLargeEditor]); // Dependencies: Correct\n\n  const openLargeEditor = useCallback(nodeId => {\n    const node = nodes.find(n => n.id === nodeId);\n    if (node) {\n      setIsLargeEditorOpen(true);\n      setLargeEditorNodeId(nodeId);\n      setLargeEditorTitle(node.title || '');\n      setLargeEditorText(node.text || '');\n    }\n  }, [nodes]); // Dependencies: Correct\n\n  const addNode = useCallback(() => {\n    const parent = selectedNode ? nodes.find(n => n.id === selectedNode) : nodes.find(n => n.isRoot);\n    if (!parent) return;\n    const angle = Math.random() * 2 * Math.PI;\n    const distance = 150;\n    const newNode = {\n      id: Date.now().toString(),\n      x: parent.x + Math.cos(angle) * distance,\n      y: parent.y + Math.sin(angle) * distance,\n      title: 'New Idea',\n      text: '',\n      color: colors[Math.floor(Math.random() * colors.length)]\n    };\n    setNodes(prev => [...prev, newNode]);\n    setConnections(prev => [...prev, {\n      from: parent.id,\n      to: newNode.id\n    }]);\n    setSelectedNode(newNode.id);\n    openLargeEditor(newNode.id);\n  }, [nodes, colors, selectedNode, openLargeEditor]); // Dependencies: Correct\n\n  const deleteNode = useCallback(() => {\n    const nodeToDelete = nodes.find(n => n.id === selectedNode);\n    if (!nodeToDelete || nodeToDelete.isRoot) return;\n    setNodes(prev => prev.filter(n => n.id !== selectedNode));\n    setConnections(prev => prev.filter(c => c.from !== selectedNode && c.to !== selectedNode));\n    setSelectedNode(null);\n  }, [nodes, selectedNode]); // Dependencies: Correct\n\n  const isRootSelected = selectedNode ? (_nodes$find = nodes.find(n => n.id === selectedNode)) === null || _nodes$find === void 0 ? void 0 : _nodes$find.isRoot : false;\n\n  // Render Auth component if not logged in\n  if (!session) {\n    return /*#__PURE__*/_jsxDEV(Auth, {\n      onAuthSuccess: handleAuthSuccess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mindmap-container\",\n    ref: containerRef,\n    children: [/*#__PURE__*/_jsxDEV(MindMapToolbar, {\n      onAddNode: addNode,\n      onEditNode: () => openLargeEditor(selectedNode),\n      onDeleteNode: deleteNode,\n      selectedNode: selectedNode,\n      isRootSelected: isRootSelected,\n      onSave: saveMindMap,\n      onLoad: loadMindMap,\n      loading: loading,\n      message: message,\n      onLogout: handleLogout,\n      userName: (session === null || session === void 0 ? void 0 : (_session$user2 = session.user) === null || _session$user2 === void 0 ? void 0 : _session$user2.email) || 'User'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MindMapInstructions, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MindMapCanvas, {\n      nodes: nodes,\n      connections: connections,\n      draggedNode: draggedNode,\n      selectedNode: selectedNode,\n      translateX: translateX,\n      translateY: translateY,\n      handleMouseDown: handleMouseDown,\n      openNodeEditor: openLargeEditor,\n      canvasWrapperRef: canvasWrapperRef,\n      svgRef: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 7\n    }, this), isLargeEditorOpen && /*#__PURE__*/_jsxDEV(LargeTextEditor, {\n      isOpen: isLargeEditorOpen,\n      initialTitle: largeEditorTitle,\n      initialText: largeEditorText,\n      onSave: saveLargeEditorText,\n      onCancel: closeLargeEditor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 399,\n    columnNumber: 5\n  }, this);\n};\n_s(MindMap, \"S4JEAd3eZO5k5D+T7P1BVFsTHhc=\");\n_c = MindMap;\nexport default MindMap;\nvar _c;\n$RefreshReg$(_c, \"MindMap\");","map":{"version":3,"names":["React","useState","useRef","useCallback","useEffect","useMemo","createClient","MindMapCanvas","MindMapToolbar","MindMapInstructions","LargeTextEditor","Auth","jsxDEV","_jsxDEV","supabaseUrl","process","env","REACT_APP_SUPABASE_URL","supabaseAnonKey","REACT_APP_SUPABASE_ANON_KEY","supabase","API_BASE_URL","REACT_APP_BACKEND_API_URL","MindMap","_s","_session$user","_nodes$find","_session$user2","nodes","setNodes","id","x","y","title","text","isRoot","color","connections","setConnections","draggedNode","setDraggedNode","selectedNode","setSelectedNode","isLargeEditorOpen","setIsLargeEditorOpen","largeEditorNodeId","setLargeEditorNodeId","largeEditorTitle","setLargeEditorTitle","largeEditorText","setLargeEditorText","translateX","setTranslateX","translateY","setTranslateY","isPanning","setIsPanning","panStartRef","startTranslateX","startTranslateY","svgRef","containerRef","canvasWrapperRef","dragDataRef","isDragging","offset","animationFrameRef","colors","session","setSession","userId","user","mindmapId","setMindmapId","loading","setLoading","message","setMessage","saveMindMap","access_token","mindMapData","name","nodes_data","connections_data","translate_x","translate_y","response","fetch","method","headers","body","JSON","stringify","result","json","ok","Error","error","data","console","log","loadMindMap","status","loadedMap","auth","getSession","then","subscription","onAuthStateChange","_event","unsubscribe","handleAuthSuccess","newSession","handleLogout","signOut","handleMouseMove","e","current","cancelAnimationFrame","requestAnimationFrame","_containerRef$current","rect","getBoundingClientRect","newX","clientX","left","newY","clientY","top","constrainedX","Math","max","min","constrainedY","prev","map","node","handleMouseDown","nodeId","_containerRef$current2","preventDefault","stopPropagation","currentCanvasWrapper","classList","add","find","n","nodeEl","currentTarget","nodeRect","containerRect","handleMouseUp","remove","handlePanMouseDown","isTargetNode","target","closest","isTargetToolbar","isTargetInstructions","isTargetLargeEditor","button","handlePanMouseMove","dx","dy","container","handleMove","handleUp","handlePanDown","document","addEventListener","removeEventListener","closeLargeEditor","saveLargeEditorText","newTitle","newText","trim","openLargeEditor","addNode","parent","angle","random","PI","distance","newNode","Date","now","toString","cos","sin","floor","length","from","to","deleteNode","nodeToDelete","filter","c","isRootSelected","onAuthSuccess","fileName","_jsxFileName","lineNumber","columnNumber","className","ref","children","onAddNode","onEditNode","onDeleteNode","onSave","onLoad","onLogout","userName","email","openNodeEditor","isOpen","initialTitle","initialText","onCancel","_c","$RefreshReg$"],"sources":["/Users/jimmyzhou/Desktop/Projects/scripty/frontend/src/pages/mindmap.jsx"],"sourcesContent":["import React, { useState, useRef, useCallback, useEffect, useMemo } from 'react';\nimport { createClient } from '@supabase/supabase-js';\nimport MindMapCanvas from '../components/mindmapcanvas';\nimport MindMapToolbar from '../components/mindmaptoolbar';\nimport MindMapInstructions from '../components/mindmapinstructions';\nimport LargeTextEditor from '../components/mindmaptexteditor';\nimport Auth from '../components/Auth';\n\nimport './mindmap.css';\n\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\nconst supabase = createClient(supabaseUrl, supabaseAnonKey);\n\nconst API_BASE_URL = process.env.REACT_APP_BACKEND_API_URL;\n\nconst MindMap = () => {\n  const [nodes, setNodes] = useState([\n    { id: '1', x: 400, y: 300, title: 'Central Idea', text: '', isRoot: true, color: '#dc2626' }\n  ]);\n  const [connections, setConnections] = useState([]);\n  const [draggedNode, setDraggedNode] = useState(null);\n  const [selectedNode, setSelectedNode] = useState(null);\n\n  const [isLargeEditorOpen, setIsLargeEditorOpen] = useState(false);\n  const [largeEditorNodeId, setLargeEditorNodeId] = useState(null);\n  const [largeEditorTitle, setLargeEditorTitle] = useState('');\n  const [largeEditorText, setLargeEditorText] = useState('');\n\n  const [translateX, setTranslateX] = useState(0);\n  const [translateY, setTranslateY] = useState(0);\n  const [isPanning, setIsPanning] = useState(false);\n  const panStartRef = useRef({ x: 0, y: 0, startTranslateX: 0, startTranslateY: 0 });\n\n  const svgRef = useRef(null);\n  const containerRef = useRef(null);\n  const canvasWrapperRef = useRef(null);\n\n  const dragDataRef = useRef({ isDragging: false, offset: { x: 0, y: 0 } });\n  const animationFrameRef = useRef(null);\n\n  const colors = useMemo(() => [\n    '#EF4444', // Red\n    '#F97316', // Orange\n    '#EAB308', // Yellow\n    '#22C55E', // Green\n    '#3B82F6', // Blue\n    '#A855F7', // Purple\n    '#EC4899', // Pink\n  ], []);\n\n  // --- Authentication and Persistence States ---\n  const [session, setSession] = useState(null);\n  const userId = session?.user?.id || null; // Derived from session\n  const [mindmapId, setMindmapId] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('');\n\n  // --- Backend API Save Function (MUST BE DEFINED BEFORE useEffect THAT USES IT) ---\n  const saveMindMap = useCallback(async () => {\n    if (!session || !session.access_token) {\n      setMessage('You must be logged in to save your mind map.');\n      return;\n    }\n    setLoading(true);\n    setMessage('Saving mind map...');\n\n    const mindMapData = {\n      mindmapId,\n      name: 'My Awesome Mind Map',\n      nodes_data: nodes,\n      connections_data: connections,\n      translate_x: translateX,\n      translate_y: translateY,\n    };\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/mindmaps`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${session.access_token}`,\n        },\n        body: JSON.stringify(mindMapData),\n      });\n\n      const result = await response.json();\n\n      if (!response.ok) {\n        throw new Error(result.message || result.error || 'Failed to save mind map');\n      }\n\n      setMindmapId(result.data.id);\n      setMessage('Mind map saved successfully!');\n      console.log('Mind map saved:', result.data);\n    } catch (error) {\n      setMessage(`Error saving mind map: ${error.message}`);\n      console.error('Error saving mind map:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [session, nodes, connections, translateX, translateY, mindmapId]);\n\n  // --- Backend API Load Function (MUST BE DEFINED BEFORE useEffect THAT USES IT) ---\n  const loadMindMap = useCallback(async () => {\n    if (!session || !session.access_token) {\n      setMessage('Please log in to load your mind map.');\n      return;\n    }\n    setLoading(true);\n    setMessage('Loading mind map...');\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/mindmaps`, {\n        headers: {\n          'Authorization': `Bearer ${session.access_token}`,\n        },\n      });\n      const result = await response.json();\n\n      if (!response.ok) {\n        if (response.status === 404) {\n          setMessage('No mind map found for this user. Create a new one!');\n          setNodes([{ id: '1', x: 400, y: 300, title: 'Central Idea', text: '', isRoot: true, color: '#dc2626' }]);\n          setConnections([]);\n          setTranslateX(0);\n          setTranslateY(0);\n          setMindmapId(null);\n          return;\n        }\n        throw new Error(result.message || result.error || 'Failed to load mind map');\n      }\n\n      const loadedMap = result.data;\n      setNodes(loadedMap.nodes_data);\n      setConnections(loadedMap.connections_data);\n      setTranslateX(loadedMap.translate_x);\n      setTranslateY(loadedMap.translate_y);\n      setMindmapId(loadedMap.id);\n      setMessage('Mind map loaded successfully!');\n      console.log('Mind map loaded:', loadedMap);\n    } catch (error) {\n      setMessage(`Error loading mind map: ${error.message}`);\n      console.error('Error loading mind map:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [session, setNodes, setConnections, setTranslateX, setTranslateY, setMindmapId]);\n\n  // Handle Supabase Auth Session (now that loadMindMap is defined)\n  useEffect(() => {\n    supabase.auth.getSession().then(({ data: { session } }) => {\n      setSession(session);\n      if (session) {\n        setMessage('Logged in. Loading your latest mind map...');\n        loadMindMap(); // Call loadMindMap here\n      } else {\n        setMessage('Please log in or sign up.');\n      }\n    });\n\n    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {\n      setSession(session);\n      if (session) {\n        setMessage('Authentication state changed. User is logged in.');\n        loadMindMap();\n      } else {\n        setMessage('Logged out. Please log in or sign up.');\n        setNodes([{ id: '1', x: 400, y: 300, title: 'Central Idea', text: '', isRoot: true, color: '#dc2626' }]);\n        setConnections([]);\n        setTranslateX(0);\n        setTranslateY(0);\n        setMindmapId(null);\n      }\n    });\n\n    return () => subscription.unsubscribe();\n  }, [loadMindMap]); // `loadMindMap` needs to be in dependency array because it's a useCallback and might change.\n\n  // Callback from Auth component after successful login/signup\n  const handleAuthSuccess = useCallback((newSession) => {\n    setSession(newSession);\n    setMessage('Authentication successful. Loading your mind map...');\n    loadMindMap(); // Load map immediately after successful auth\n  }, [loadMindMap]); // `loadMindMap` needs to be in dependency array\n\n  // Logout function\n  const handleLogout = useCallback(async () => {\n    setLoading(true);\n    setMessage('Logging out...');\n    try {\n      const { error } = await supabase.auth.signOut();\n      if (error) throw error;\n      setMessage('Logged out successfully.');\n    } catch (error) {\n      setMessage(`Logout error: ${error.message}`);\n      console.error('Logout error:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n\n  // --- Mouse Handlers for Node Dragging (no changes, but for completeness) ---\n  const handleMouseMove = useCallback((e) => {\n    if (!dragDataRef.current.isDragging || !draggedNode) return;\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n    animationFrameRef.current = requestAnimationFrame(() => {\n      const rect = containerRef.current?.getBoundingClientRect();\n      if (!rect) return;\n      const newX = (e.clientX - rect.left - dragDataRef.current.offset.x - translateX);\n      const newY = (e.clientY - rect.top - dragDataRef.current.offset.y - translateY);\n      const constrainedX = Math.max(0, Math.min(newX, 2000));\n      const constrainedY = Math.max(0, Math.min(newY, 1500));\n      setNodes(prev => prev.map(node =>\n        node.id === draggedNode\n          ? { ...node, x: constrainedX, y: constrainedY }\n          : node\n      ));\n    });\n  }, [draggedNode, translateX, translateY]); // Dependencies: Correct\n\n  const handleMouseDown = useCallback((e, nodeId) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (selectedNode !== nodeId) {\n      setSelectedNode(nodeId);\n    }\n    const currentCanvasWrapper = canvasWrapperRef.current;\n    if (currentCanvasWrapper) {\n      currentCanvasWrapper.classList.add('no-transition');\n    }\n    const node = nodes.find(n => n.id === nodeId);\n    if (!node) return;\n    const nodeEl = e.currentTarget;\n    if (!nodeEl) return;\n    const nodeRect = nodeEl.getBoundingClientRect();\n    const containerRect = containerRef.current?.getBoundingClientRect();\n    if (!containerRect) return;\n    dragDataRef.current = {\n      isDragging: true,\n      offset: {\n        x: e.clientX - nodeRect.left,\n        y: e.clientY - nodeRect.top\n      }\n    };\n    setDraggedNode(nodeId);\n  }, [nodes, selectedNode]); // Dependencies: Correct\n\n  const handleMouseUp = useCallback(() => {\n    dragDataRef.current.isDragging = false;\n    setDraggedNode(null);\n    setIsPanning(false);\n    const currentCanvasWrapper = canvasWrapperRef.current;\n    if (currentCanvasWrapper) {\n      currentCanvasWrapper.classList.remove('no-transition');\n    }\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n      animationFrameRef.current = null;\n    }\n  }, []); // Dependencies: Correct\n\n  // --- Mouse Handlers for Panning (no changes) ---\n  const handlePanMouseDown = useCallback((e) => {\n    const isTargetNode = e.target.closest('.mindmap-node');\n    const isTargetToolbar = e.target.closest('.mindmap-toolbar');\n    const isTargetInstructions = e.target.closest('.mindmap-instructions');\n    const isTargetLargeEditor = e.target.closest('.large-text-editor-overlay');\n    if (isTargetNode || isTargetToolbar || isTargetInstructions || isTargetLargeEditor || e.button !== 0) {\n        return;\n    }\n    setIsPanning(true);\n    panStartRef.current = {\n      x: e.clientX,\n      y: e.clientY,\n      startTranslateX: translateX,\n      startTranslateY: translateY\n    };\n    const currentCanvasWrapper = canvasWrapperRef.current;\n    if (currentCanvasWrapper) {\n      currentCanvasWrapper.classList.add('no-transition');\n    }\n    setSelectedNode(null);\n    e.preventDefault();\n  }, [translateX, translateY]); // Dependencies: Correct\n\n  const handlePanMouseMove = useCallback((e) => {\n    if (!isPanning) return;\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n    animationFrameRef.current = requestAnimationFrame(() => {\n      const dx = e.clientX - panStartRef.current.x;\n      const dy = e.clientY - panStartRef.current.y;\n      setTranslateX(panStartRef.current.startTranslateX + dx);\n      setTranslateY(panStartRef.current.startTranslateY + dy);\n    });\n  }, [isPanning]); // Dependencies: Correct\n\n  useEffect(() => {\n    const container = containerRef.current;\n    const currentCanvasWrapper = canvasWrapperRef.current;\n    if (!container) return;\n    const handleMove = (e) => {\n      if (draggedNode) {\n        handleMouseMove(e);\n      } else if (isPanning) {\n        handlePanMouseMove(e);\n      }\n    };\n    const handleUp = () => handleMouseUp();\n    const handlePanDown = (e) => handlePanMouseDown(e);\n    document.addEventListener('mouseup', handleUp);\n    document.addEventListener('mouseleave', handleUp);\n    container.addEventListener('mousemove', handleMove);\n    container.addEventListener('mousedown', handlePanDown);\n    return () => {\n      document.removeEventListener('mouseup', handleUp);\n      document.removeEventListener('mouseleave', handleUp);\n      container.removeEventListener('mousemove', handleMove);\n      container.removeEventListener('mousedown', handlePanDown);\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n      if (currentCanvasWrapper) {\n        currentCanvasWrapper.classList.remove('no-transition');\n      }\n    };\n  }, [handleMouseMove, handleMouseUp, handlePanMouseDown, handlePanMouseMove, draggedNode, isPanning]); // Dependencies: Correct\n\n  // --- Large Text Editor Functions (no changes, but for completeness) ---\n  const closeLargeEditor = useCallback(() => {\n    setIsLargeEditorOpen(false);\n    setLargeEditorNodeId(null);\n    setLargeEditorTitle('');\n    setLargeEditorText('');\n  }, []); // Dependencies: Correct (setters are stable)\n\n  const saveLargeEditorText = useCallback((newTitle, newText) => {\n    if (!largeEditorNodeId) return;\n    setNodes(prev =>\n      prev.map(node => (\n        node.id === largeEditorNodeId\n          ? { ...node, title: newTitle.trim() || 'New Idea', text: newText.trim() || '' }\n          : node\n      ))\n    );\n    closeLargeEditor();\n  }, [largeEditorNodeId, closeLargeEditor]); // Dependencies: Correct\n\n  const openLargeEditor = useCallback((nodeId) => {\n    const node = nodes.find(n => n.id === nodeId);\n    if (node) {\n      setIsLargeEditorOpen(true);\n      setLargeEditorNodeId(nodeId);\n      setLargeEditorTitle(node.title || '');\n      setLargeEditorText(node.text || '');\n    }\n  }, [nodes]); // Dependencies: Correct\n\n  const addNode = useCallback(() => {\n    const parent = selectedNode ? nodes.find(n => n.id === selectedNode) : nodes.find(n => n.isRoot);\n    if (!parent) return;\n    const angle = Math.random() * 2 * Math.PI;\n    const distance = 150;\n    const newNode = {\n      id: Date.now().toString(),\n      x: parent.x + Math.cos(angle) * distance,\n      y: parent.y + Math.sin(angle) * distance,\n      title: 'New Idea',\n      text: '',\n      color: colors[Math.floor(Math.random() * colors.length)]\n    };\n    setNodes(prev => [...prev, newNode]);\n    setConnections(prev => [...prev, { from: parent.id, to: newNode.id }]);\n    setSelectedNode(newNode.id);\n    openLargeEditor(newNode.id);\n  }, [nodes, colors, selectedNode, openLargeEditor]); // Dependencies: Correct\n\n  const deleteNode = useCallback(() => {\n    const nodeToDelete = nodes.find(n => n.id === selectedNode);\n    if (!nodeToDelete || nodeToDelete.isRoot) return;\n    setNodes(prev => prev.filter(n => n.id !== selectedNode));\n    setConnections(prev => prev.filter(c => c.from !== selectedNode && c.to !== selectedNode));\n    setSelectedNode(null);\n  }, [nodes, selectedNode]); // Dependencies: Correct\n\n  const isRootSelected = selectedNode ? nodes.find(n => n.id === selectedNode)?.isRoot : false;\n\n  // Render Auth component if not logged in\n  if (!session) {\n    return <Auth onAuthSuccess={handleAuthSuccess} />;\n  }\n\n  return (\n    <div className=\"mindmap-container\" ref={containerRef}>\n      <MindMapToolbar\n        onAddNode={addNode}\n        onEditNode={() => openLargeEditor(selectedNode)}\n        onDeleteNode={deleteNode}\n        selectedNode={selectedNode}\n        isRootSelected={isRootSelected}\n        onSave={saveMindMap}\n        onLoad={loadMindMap}\n        loading={loading}\n        message={message}\n        onLogout={handleLogout}\n        userName={session?.user?.email || 'User'}\n      />\n\n      <MindMapInstructions />\n\n      <MindMapCanvas\n        nodes={nodes}\n        connections={connections}\n        draggedNode={draggedNode}\n        selectedNode={selectedNode}\n        translateX={translateX}\n        translateY={translateY}\n        handleMouseDown={handleMouseDown}\n        openNodeEditor={openLargeEditor}\n        canvasWrapperRef={canvasWrapperRef}\n        svgRef={svgRef}\n      />\n\n      {isLargeEditorOpen && (\n        <LargeTextEditor\n          isOpen={isLargeEditorOpen}\n          initialTitle={largeEditorTitle}\n          initialText={largeEditorText}\n          onSave={saveLargeEditorText}\n          onCancel={closeLargeEditor}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default MindMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}