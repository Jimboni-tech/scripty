{"ast":null,"code":"var _jsxFileName = \"/Users/jimmyzhou/Desktop/Projects/scripty/frontend/src/pages/mindmap.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useCallback, useEffect, useMemo } from 'react';\nimport MindMapCanvas from '../components/mindmapcanvas';\nimport MindMapToolbar from '../components/mindmaptoolbar';\nimport MindMapInstructions from '../components/mindmapinstructions';\nimport LargeTextEditor from '../components/mindmaptexteditor';\nimport './mindmap.css';\nimport { useParams, useNavigate } from 'react-router-dom';\n// Removed Auth import as it's no longer rendered here\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_BACKEND_API_URL || 'http://localhost:5001/api';\nconst MindMap = () => {\n  _s();\n  var _nodes$find, _session$user;\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  const [nodes, setNodes] = useState([{\n    id: '1',\n    x: 400,\n    y: 300,\n    title: 'Central Idea',\n    text: '',\n    isRoot: true,\n    color: '#dc2626'\n  }]);\n  const [connections, setConnections] = useState([]);\n  const [draggedNode, setDraggedNode] = useState(null);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [isLargeEditorOpen, setIsLargeEditorOpen] = useState(false);\n  const [largeEditorNodeId, setLargeEditorNodeId] = useState(null);\n  const [largeEditorTitle, setLargeEditorTitle] = useState('');\n  const [largeEditorText, setLargeEditorText] = useState('');\n  const [translateX, setTranslateX] = useState(0);\n  const [translateY, setTranslateY] = useState(0);\n  const [isPanning, setIsPanning] = useState(false);\n  const panStartRef = useRef({\n    x: 0,\n    y: 0,\n    startTranslateX: 0,\n    startTranslateY: 0\n  });\n  const svgRef = useRef(null);\n  const containerRef = useRef(null);\n  const canvasWrapperRef = useRef(null);\n  const dragDataRef = useRef({\n    isDragging: false,\n    offset: {\n      x: 0,\n      y: 0\n    }\n  });\n  const animationFrameRef = useRef(null);\n  const colors = useMemo(() => ['#EF4444', '#F97316', '#EAB308', '#22C55E', '#3B82F6', '#A855F7', '#EC4899'], []);\n\n  // --- State for Backend Integration ---\n  const [session, setSession] = useState(null); // Re-added session state\n  const [currentMindMapId, setCurrentMindMapId] = useState(null);\n  const [currentMapTitle, setCurrentMapTitle] = useState('Untitled Map'); // Re-added currentMapTitle state\n  const [userMindMaps, setUserMindMaps] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('Welcome! Login or register to start creating.');\n\n  // --- Authentication & Session Management ---\n  const handleLogout = useCallback(() => {\n    // Re-added handleLogout\n    setSession(null);\n    localStorage.removeItem('mindmapSession');\n    // Clear current map data and reset to a new default map\n    setNodes([{\n      id: '1',\n      x: 400,\n      y: 300,\n      title: 'Central Idea',\n      text: '',\n      isRoot: true,\n      color: '#dc2626'\n    }]);\n    setConnections([]);\n    setTranslateX(0);\n    setTranslateY(0);\n    setCurrentMindMapId(null);\n    setCurrentMapTitle('Untitled Map');\n    setUserMindMaps([]); // Clear user maps on logout\n    setMessage('You have been logged out.');\n    navigate('/'); // Redirect to login page after logout\n  }, [navigate]);\n  const fetchUserMindMaps = useCallback(async token => {\n    setLoading(true);\n    setMessage('Fetching your mind maps...');\n    try {\n      const response = await fetch(`${API_BASE_URL}/mindmaps`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (!response.ok) {\n        if (response.status === 401) {\n          setMessage('Session expired or unauthorized. Please log in again.');\n          handleLogout(); // Use local handleLogout\n          return;\n        }\n        throw new Error(`Error fetching mind maps: ${response.statusText}`);\n      }\n      const data = await response.json();\n      setUserMindMaps(data);\n      setMessage('Your mind maps loaded!');\n    } catch (error) {\n      console.error('Fetch mind maps error:', error);\n      setMessage(`Failed to fetch mind maps: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  }, [handleLogout]);\n  const loadMindMapFromServer = useCallback(async mapId => {\n    if (!session || !session.token) {\n      // Use local session\n      setMessage('Please log in to load a mind map.');\n      return;\n    }\n    setLoading(true);\n    setMessage('Loading mind map...');\n    try {\n      var _data$viewState, _data$viewState2;\n      const response = await fetch(`${API_BASE_URL}/mindmaps/${mapId}`, {\n        headers: {\n          'Authorization': `Bearer ${session.token}`\n        }\n      });\n      if (!response.ok) {\n        if (response.status === 401) {\n          setMessage('Session expired or unauthorized. Please log in again.');\n          handleLogout(); // Use local handleLogout\n          return;\n        }\n        throw new Error(`Error loading mind map: ${response.statusText}`);\n      }\n      const data = await response.json();\n      setNodes(data.nodes || []);\n      setConnections(data.connections || []);\n      setTranslateX(((_data$viewState = data.viewState) === null || _data$viewState === void 0 ? void 0 : _data$viewState.translateX) || 0);\n      setTranslateY(((_data$viewState2 = data.viewState) === null || _data$viewState2 === void 0 ? void 0 : _data$viewState2.translateY) || 0);\n      setCurrentMindMapId(data._id);\n      setCurrentMapTitle(data.title); // Update local state\n      setMessage(`Mind map \"${data.title}\" loaded!`);\n    } catch (error) {\n      console.error('Load mind map error:', error);\n      setMessage(`Failed to load mind map: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  }, [session, handleLogout]);\n  const saveMindMapToServer = useCallback(async () => {\n    if (!session || !session.token) {\n      // Use local session\n      setMessage('Please log in to save your mind map.');\n      return;\n    }\n    setLoading(true);\n    setMessage('Saving mind map...');\n    try {\n      const mindMapData = {\n        title: currentMapTitle,\n        // Use local state\n        nodes,\n        connections,\n        viewState: {\n          translateX,\n          translateY\n        }\n      };\n      let response;\n      if (currentMindMapId) {\n        response = await fetch(`${API_BASE_URL}/mindmaps/${currentMindMapId}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${session.token}`\n          },\n          body: JSON.stringify(mindMapData)\n        });\n      } else {\n        response = await fetch(`${API_BASE_URL}/mindmaps`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${session.token}`\n          },\n          body: JSON.stringify(mindMapData)\n        });\n      }\n      if (!response.ok) {\n        if (response.status === 401) {\n          setMessage('Session expired or unauthorized. Please log in again to save.');\n          handleLogout(); // Use local handleLogout\n          return;\n        }\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to save mind map');\n      }\n      const savedMap = await response.json();\n      setCurrentMindMapId(savedMap._id);\n      setCurrentMapTitle(savedMap.title); // Update local state\n      setMessage('Mind map saved successfully!');\n      fetchUserMindMaps(session.token); // Refresh the list of maps\n    } catch (error) {\n      console.error('Save mind map error:', error);\n      setMessage(`Error saving mind map: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  }, [nodes, connections, translateX, translateY, currentMindMapId, currentMapTitle, session, fetchUserMindMaps, handleLogout]);\n  const handleNewMap = useCallback(() => {\n    setNodes([{\n      id: '1',\n      x: 400,\n      y: 300,\n      title: 'Central Idea',\n      text: '',\n      isRoot: true,\n      color: '#dc2626'\n    }]);\n    setConnections([]);\n    setTranslateX(0);\n    setTranslateY(0);\n    setCurrentMindMapId(null);\n    setCurrentMapTitle('Untitled Map'); // Update local state\n    setMessage('Created a new, empty mind map.');\n    navigate('/mindmap/new', {\n      replace: true\n    });\n  }, [navigate]);\n  const handleSetMapTitle = useCallback(newTitle => {\n    setCurrentMapTitle(newTitle); // Update local state\n  }, []);\n\n  // On component mount, check session and load data\n  useEffect(() => {\n    const storedSession = localStorage.getItem('mindmapSession');\n    if (storedSession) {\n      try {\n        const parsedSession = JSON.parse(storedSession);\n        if (parsedSession && parsedSession.token && parsedSession.user) {\n          setSession(parsedSession);\n          //setMessage(`Welcome back, ${parsedSession.user.email}!`); // This message is for MindMapDashboard\n          fetchUserMindMaps(parsedSession.token);\n        } else {\n          localStorage.removeItem('mindmapSession');\n          navigate('/');\n        }\n      } catch (e) {\n        console.error(\"Failed to parse session from localStorage\", e);\n        localStorage.removeItem('mindmapSession');\n        navigate('/');\n      }\n    } else {\n      navigate('/');\n    }\n  }, [navigate, fetchUserMindMaps]);\n\n  // Load map based on ID after session is established\n  useEffect(() => {\n    if (!session) return;\n    if (id && id !== 'new') {\n      loadMindMapFromServer(id);\n    } else if (id === 'new') {\n      handleNewMap();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [session, id]); // Depend on session and id to trigger loading\n\n  // --- Mouse Handlers for Node Dragging ---\n  const handleMouseMove = useCallback(e => {\n    if (!dragDataRef.current.isDragging || !draggedNode) return;\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n    animationFrameRef.current = requestAnimationFrame(() => {\n      var _containerRef$current;\n      const rect = (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.getBoundingClientRect();\n      if (!rect) return;\n      const newX = e.clientX - rect.left - dragDataRef.current.offset.x - translateX;\n      const newY = e.clientY - rect.top - dragDataRef.current.offset.y - translateY;\n      setNodes(prev => prev.map(node => node.id === draggedNode ? {\n        ...node,\n        x: newX,\n        y: newY\n      } : node));\n    });\n  }, [draggedNode, translateX, translateY]);\n  const handleMouseDown = useCallback((e, nodeId) => {\n    var _containerRef$current2;\n    e.preventDefault();\n    e.stopPropagation();\n    if (selectedNode !== nodeId) {\n      setSelectedNode(nodeId);\n    }\n    const currentCanvasWrapper = canvasWrapperRef.current;\n    if (currentCanvasWrapper) {\n      currentCanvasWrapper.classList.add('no-transition');\n    }\n    const node = nodes.find(n => n.id === nodeId);\n    if (!node) return;\n    const nodeEl = e.currentTarget;\n    if (!nodeEl) return;\n    const nodeRect = nodeEl.getBoundingClientRect();\n    const containerRect = (_containerRef$current2 = containerRef.current) === null || _containerRef$current2 === void 0 ? void 0 : _containerRef$current2.getBoundingClientRect();\n    if (!containerRect) return;\n    dragDataRef.current = {\n      isDragging: true,\n      offset: {\n        x: e.clientX - nodeRect.left,\n        y: e.clientY - nodeRect.top\n      }\n    };\n    setDraggedNode(nodeId);\n  }, [nodes, selectedNode]);\n  const handleMouseUp = useCallback(() => {\n    dragDataRef.current.isDragging = false;\n    setDraggedNode(null);\n    setIsPanning(false);\n    const currentCanvasWrapper = canvasWrapperRef.current;\n    if (currentCanvasWrapper) {\n      currentCanvasWrapper.classList.remove('no-transition');\n    }\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n      animationFrameRef.current = null;\n    }\n  }, []);\n  const handlePanMouseDown = useCallback(e => {\n    const isTargetNode = e.target.closest('.mindmap-node');\n    const isTargetToolbar = e.target.closest('.mindmap-toolbar');\n    const isTargetInstructions = e.target.closest('.mindmap-instructions');\n    const isTargetLargeEditor = e.target.closest('.large-text-editor-overlay');\n    if (isTargetNode || isTargetToolbar || isTargetInstructions || isTargetLargeEditor || e.button !== 0) {\n      return;\n    }\n    setIsPanning(true);\n    panStartRef.current = {\n      x: e.clientX,\n      y: e.clientY,\n      startTranslateX: translateX,\n      startTranslateY: translateY\n    };\n    const currentCanvasWrapper = canvasWrapperRef.current;\n    if (currentCanvasWrapper) {\n      currentCanvasWrapper.classList.add('no-transition');\n    }\n    setSelectedNode(null);\n    e.preventDefault();\n  }, [translateX, translateY]);\n  const handlePanMouseMove = useCallback(e => {\n    if (!isPanning) return;\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n    animationFrameRef.current = requestAnimationFrame(() => {\n      const dx = e.clientX - panStartRef.current.x;\n      const dy = e.clientY - panStartRef.current.y;\n      setTranslateX(panStartRef.current.startTranslateX + dx);\n      setTranslateY(panStartRef.current.startTranslateY + dy);\n    });\n  }, [isPanning]);\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n    const handleGlobalMove = e => {\n      if (draggedNode) {\n        handleMouseMove(e);\n      } else if (isPanning) {\n        handlePanMouseMove(e);\n      }\n    };\n    const handleGlobalUp = () => handleMouseUp();\n    const handlePanDown = e => handlePanMouseDown(e);\n    document.addEventListener('mouseup', handleGlobalUp);\n    document.addEventListener('mouseleave', handleGlobalUp);\n    container.addEventListener('mousemove', handleGlobalMove);\n    container.addEventListener('mousedown', handlePanDown);\n    return () => {\n      document.removeEventListener('mouseup', handleGlobalUp);\n      document.removeEventListener('mouseleave', handleGlobalUp);\n      container.removeEventListener('mousemove', handleGlobalMove);\n      container.removeEventListener('mousedown', handlePanDown);\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n      const currentCanvasWrapper = canvasWrapperRef.current;\n      if (currentCanvasWrapper) {\n        currentCanvasWrapper.classList.remove('no-transition');\n      }\n    };\n  }, [handleMouseMove, handleMouseUp, handlePanMouseDown, handlePanMouseMove, draggedNode, isPanning]);\n  const closeLargeEditor = useCallback(() => {\n    setIsLargeEditorOpen(false);\n    setLargeEditorNodeId(null);\n    setLargeEditorTitle('');\n    setLargeEditorText('');\n  }, []);\n  const saveLargeEditorText = useCallback((newTitle, newText) => {\n    if (!largeEditorNodeId) return;\n    setNodes(prev => prev.map(node => node.id === largeEditorNodeId ? {\n      ...node,\n      title: newTitle.trim() || 'New Idea',\n      text: newText.trim() || ''\n    } : node));\n    // If the node edited was the root node, update the map title here\n    const editedNode = nodes.find(n => n.id === largeEditorNodeId);\n    if (editedNode && editedNode.isRoot) {\n      setCurrentMapTitle(newTitle.trim() || 'Untitled Map'); // Update local state\n    }\n    closeLargeEditor();\n  }, [largeEditorNodeId, closeLargeEditor, nodes]); // Removed onMapTitleChangeRequest, use local state\n\n  const openLargeEditor = useCallback(nodeId => {\n    const node = nodes.find(n => n.id === nodeId);\n    if (node) {\n      setIsLargeEditorOpen(true);\n      setLargeEditorNodeId(nodeId);\n      setLargeEditorTitle(node.title || '');\n      setLargeEditorText(node.text || '');\n    }\n  }, [nodes]);\n  const addNode = useCallback(() => {\n    const parent = selectedNode ? nodes.find(n => n.id === selectedNode) : nodes.find(n => n.isRoot);\n    if (!parent) {\n      setMessage('Cannot add node: No root node found or selected node does not exist.');\n      return;\n    }\n    const angle = Math.random() * 2 * Math.PI;\n    const distance = 150;\n    const newNode = {\n      id: Date.now().toString(),\n      x: parent.x + Math.cos(angle) * distance,\n      y: parent.y + Math.sin(angle) * distance,\n      title: 'New Idea',\n      text: '',\n      color: colors[Math.floor(Math.random() * colors.length)]\n    };\n    setNodes(prev => [...prev, newNode]);\n    setConnections(prev => [...prev, {\n      from: parent.id,\n      to: newNode.id\n    }]);\n    setSelectedNode(newNode.id);\n    openLargeEditor(newNode.id);\n  }, [nodes, colors, selectedNode, openLargeEditor]);\n  const deleteNode = useCallback(() => {\n    const nodeToDelete = nodes.find(n => n.id === selectedNode);\n    if (!nodeToDelete || nodeToDelete.isRoot) {\n      setMessage('Cannot delete root node or no node selected.');\n      return;\n    }\n    setNodes(prev => prev.filter(n => n.id !== selectedNode));\n    setConnections(prev => prev.filter(c => c.from !== selectedNode && c.to !== selectedNode));\n    setSelectedNode(null);\n  }, [nodes, selectedNode]);\n  const isRootSelected = selectedNode ? (_nodes$find = nodes.find(n => n.id === selectedNode)) === null || _nodes$find === void 0 ? void 0 : _nodes$find.isRoot : false;\n\n  // If no session, navigate to login. ProtectedRoute should handle this, but as a fallback.\n  if (!session) {\n    return null; // Or a loading spinner if you want\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mindmap-container\",\n    ref: containerRef,\n    children: [/*#__PURE__*/_jsxDEV(MindMapToolbar, {\n      onAddNode: addNode,\n      onEditNode: () => selectedNode && openLargeEditor(selectedNode),\n      onDeleteNode: deleteNode,\n      selectedNode: selectedNode,\n      isRootSelected: isRootSelected,\n      onSave: saveMindMapToServer,\n      onLoadMap: loadMindMapFromServer // Re-added load map function\n      ,\n      onNewMap: handleNewMap // Re-added new map function\n      ,\n      userMindMaps: userMindMaps // Re-added user mind maps for dropdown\n      ,\n      currentMindMapId: currentMindMapId,\n      loading: loading,\n      message: message,\n      onLogout: handleLogout // Pass local handleLogout\n      ,\n      userName: (session === null || session === void 0 ? void 0 : (_session$user = session.user) === null || _session$user === void 0 ? void 0 : _session$user.email) || 'User' // Pass local session user email\n      ,\n      currentMapTitle: currentMapTitle // Pass local current map title\n      ,\n      onSetMapTitle: handleSetMapTitle // Pass local handleSetMapTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MindMapInstructions, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 483,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MindMapCanvas, {\n      nodes: nodes,\n      connections: connections,\n      draggedNode: draggedNode,\n      selectedNode: selectedNode,\n      translateX: translateX,\n      translateY: translateY,\n      handleMouseDown: handleMouseDown,\n      openNodeEditor: openLargeEditor,\n      canvasWrapperRef: canvasWrapperRef,\n      svgRef: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 485,\n      columnNumber: 7\n    }, this), isLargeEditorOpen && /*#__PURE__*/_jsxDEV(LargeTextEditor, {\n      isOpen: isLargeEditorOpen,\n      initialTitle: largeEditorTitle,\n      initialText: largeEditorText,\n      onSave: saveLargeEditorText,\n      onCancel: closeLargeEditor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 463,\n    columnNumber: 5\n  }, this);\n};\n_s(MindMap, \"lV7x2t724A+ENlq/PWrIuKbWuy8=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = MindMap;\nexport default MindMap;\nvar _c;\n$RefreshReg$(_c, \"MindMap\");","map":{"version":3,"names":["React","useState","useRef","useCallback","useEffect","useMemo","MindMapCanvas","MindMapToolbar","MindMapInstructions","LargeTextEditor","useParams","useNavigate","jsxDEV","_jsxDEV","API_BASE_URL","process","env","REACT_APP_BACKEND_API_URL","MindMap","_s","_nodes$find","_session$user","id","navigate","nodes","setNodes","x","y","title","text","isRoot","color","connections","setConnections","draggedNode","setDraggedNode","selectedNode","setSelectedNode","isLargeEditorOpen","setIsLargeEditorOpen","largeEditorNodeId","setLargeEditorNodeId","largeEditorTitle","setLargeEditorTitle","largeEditorText","setLargeEditorText","translateX","setTranslateX","translateY","setTranslateY","isPanning","setIsPanning","panStartRef","startTranslateX","startTranslateY","svgRef","containerRef","canvasWrapperRef","dragDataRef","isDragging","offset","animationFrameRef","colors","session","setSession","currentMindMapId","setCurrentMindMapId","currentMapTitle","setCurrentMapTitle","userMindMaps","setUserMindMaps","loading","setLoading","message","setMessage","handleLogout","localStorage","removeItem","fetchUserMindMaps","token","response","fetch","headers","ok","status","Error","statusText","data","json","error","console","loadMindMapFromServer","mapId","_data$viewState","_data$viewState2","viewState","_id","saveMindMapToServer","mindMapData","method","body","JSON","stringify","errorData","savedMap","handleNewMap","replace","handleSetMapTitle","newTitle","storedSession","getItem","parsedSession","parse","user","e","handleMouseMove","current","cancelAnimationFrame","requestAnimationFrame","_containerRef$current","rect","getBoundingClientRect","newX","clientX","left","newY","clientY","top","prev","map","node","handleMouseDown","nodeId","_containerRef$current2","preventDefault","stopPropagation","currentCanvasWrapper","classList","add","find","n","nodeEl","currentTarget","nodeRect","containerRect","handleMouseUp","remove","handlePanMouseDown","isTargetNode","target","closest","isTargetToolbar","isTargetInstructions","isTargetLargeEditor","button","handlePanMouseMove","dx","dy","container","handleGlobalMove","handleGlobalUp","handlePanDown","document","addEventListener","removeEventListener","closeLargeEditor","saveLargeEditorText","newText","trim","editedNode","openLargeEditor","addNode","parent","angle","Math","random","PI","distance","newNode","Date","now","toString","cos","sin","floor","length","from","to","deleteNode","nodeToDelete","filter","c","isRootSelected","className","ref","children","onAddNode","onEditNode","onDeleteNode","onSave","onLoadMap","onNewMap","onLogout","userName","email","onSetMapTitle","fileName","_jsxFileName","lineNumber","columnNumber","openNodeEditor","isOpen","initialTitle","initialText","onCancel","_c","$RefreshReg$"],"sources":["/Users/jimmyzhou/Desktop/Projects/scripty/frontend/src/pages/mindmap.jsx"],"sourcesContent":["import React, { useState, useRef, useCallback, useEffect, useMemo } from 'react';\n\nimport MindMapCanvas from '../components/mindmapcanvas';\nimport MindMapToolbar from '../components/mindmaptoolbar';\nimport MindMapInstructions from '../components/mindmapinstructions';\nimport LargeTextEditor from '../components/mindmaptexteditor';\nimport './mindmap.css';\nimport { useParams, useNavigate } from 'react-router-dom';\n// Removed Auth import as it's no longer rendered here\n\nconst API_BASE_URL = process.env.REACT_APP_BACKEND_API_URL || 'http://localhost:5001/api';\n\nconst MindMap = () => {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const [nodes, setNodes] = useState([\n    { id: '1', x: 400, y: 300, title: 'Central Idea', text: '', isRoot: true, color: '#dc2626' }\n  ]);\n  const [connections, setConnections] = useState([]);\n  const [draggedNode, setDraggedNode] = useState(null);\n  const [selectedNode, setSelectedNode] = useState(null);\n\n  const [isLargeEditorOpen, setIsLargeEditorOpen] = useState(false);\n  const [largeEditorNodeId, setLargeEditorNodeId] = useState(null);\n  const [largeEditorTitle, setLargeEditorTitle] = useState('');\n  const [largeEditorText, setLargeEditorText] = useState('');\n\n\n  const [translateX, setTranslateX] = useState(0);\n  const [translateY, setTranslateY] = useState(0);\n  const [isPanning, setIsPanning] = useState(false);\n  const panStartRef = useRef({ x: 0, y: 0, startTranslateX: 0, startTranslateY: 0 });\n\n  const svgRef = useRef(null);\n  const containerRef = useRef(null);\n  const canvasWrapperRef = useRef(null);\n\n  const dragDataRef = useRef({ isDragging: false, offset: { x: 0, y: 0 } });\n  const animationFrameRef = useRef(null);\n\n  const colors = useMemo(() => [\n    '#EF4444',\n    '#F97316',\n    '#EAB308',\n    '#22C55E',\n    '#3B82F6',\n    '#A855F7',\n    '#EC4899',\n  ], []);\n\n  // --- State for Backend Integration ---\n  const [session, setSession] = useState(null); // Re-added session state\n  const [currentMindMapId, setCurrentMindMapId] = useState(null);\n  const [currentMapTitle, setCurrentMapTitle] = useState('Untitled Map'); // Re-added currentMapTitle state\n  const [userMindMaps, setUserMindMaps] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('Welcome! Login or register to start creating.');\n\n  // --- Authentication & Session Management ---\n  const handleLogout = useCallback(() => { // Re-added handleLogout\n    setSession(null);\n    localStorage.removeItem('mindmapSession');\n    // Clear current map data and reset to a new default map\n    setNodes([{ id: '1', x: 400, y: 300, title: 'Central Idea', text: '', isRoot: true, color: '#dc2626' }]);\n    setConnections([]);\n    setTranslateX(0);\n    setTranslateY(0);\n    setCurrentMindMapId(null);\n    setCurrentMapTitle('Untitled Map');\n    setUserMindMaps([]); // Clear user maps on logout\n    setMessage('You have been logged out.');\n    navigate('/'); // Redirect to login page after logout\n  }, [navigate]);\n\n  const fetchUserMindMaps = useCallback(async (token) => {\n    setLoading(true);\n    setMessage('Fetching your mind maps...');\n    try {\n      const response = await fetch(`${API_BASE_URL}/mindmaps`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) {\n        if (response.status === 401) {\n          setMessage('Session expired or unauthorized. Please log in again.');\n          handleLogout(); // Use local handleLogout\n          return;\n        }\n        throw new Error(`Error fetching mind maps: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      setUserMindMaps(data);\n      setMessage('Your mind maps loaded!');\n    } catch (error) {\n      console.error('Fetch mind maps error:', error);\n      setMessage(`Failed to fetch mind maps: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  }, [handleLogout]);\n\n  const loadMindMapFromServer = useCallback(async (mapId) => {\n    if (!session || !session.token) { // Use local session\n      setMessage('Please log in to load a mind map.');\n      return;\n    }\n    setLoading(true);\n    setMessage('Loading mind map...');\n    try {\n      const response = await fetch(`${API_BASE_URL}/mindmaps/${mapId}`, {\n        headers: {\n          'Authorization': `Bearer ${session.token}`,\n        },\n      });\n\n      if (!response.ok) {\n        if (response.status === 401) {\n          setMessage('Session expired or unauthorized. Please log in again.');\n          handleLogout(); // Use local handleLogout\n          return;\n        }\n        throw new Error(`Error loading mind map: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      setNodes(data.nodes || []);\n      setConnections(data.connections || []);\n      setTranslateX(data.viewState?.translateX || 0);\n      setTranslateY(data.viewState?.translateY || 0);\n      setCurrentMindMapId(data._id);\n      setCurrentMapTitle(data.title); // Update local state\n      setMessage(`Mind map \"${data.title}\" loaded!`);\n    } catch (error) {\n      console.error('Load mind map error:', error);\n      setMessage(`Failed to load mind map: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  }, [session, handleLogout]);\n\n  const saveMindMapToServer = useCallback(async () => {\n    if (!session || !session.token) { // Use local session\n      setMessage('Please log in to save your mind map.');\n      return;\n    }\n\n    setLoading(true);\n    setMessage('Saving mind map...');\n    try {\n      const mindMapData = {\n        title: currentMapTitle, // Use local state\n        nodes,\n        connections,\n        viewState: { translateX, translateY },\n      };\n\n      let response;\n      if (currentMindMapId) {\n        response = await fetch(`${API_BASE_URL}/mindmaps/${currentMindMapId}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${session.token}`,\n          },\n          body: JSON.stringify(mindMapData),\n        });\n      } else {\n        response = await fetch(`${API_BASE_URL}/mindmaps`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${session.token}`,\n          },\n          body: JSON.stringify(mindMapData),\n        });\n      }\n\n      if (!response.ok) {\n        if (response.status === 401) {\n          setMessage('Session expired or unauthorized. Please log in again to save.');\n          handleLogout(); // Use local handleLogout\n          return;\n        }\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to save mind map');\n      }\n\n      const savedMap = await response.json();\n      setCurrentMindMapId(savedMap._id);\n      setCurrentMapTitle(savedMap.title); // Update local state\n      setMessage('Mind map saved successfully!');\n      fetchUserMindMaps(session.token); // Refresh the list of maps\n    } catch (error) {\n      console.error('Save mind map error:', error);\n      setMessage(`Error saving mind map: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  }, [nodes, connections, translateX, translateY, currentMindMapId, currentMapTitle, session, fetchUserMindMaps, handleLogout]);\n\n  const handleNewMap = useCallback(() => {\n    setNodes([{ id: '1', x: 400, y: 300, title: 'Central Idea', text: '', isRoot: true, color: '#dc2626' }]);\n    setConnections([]);\n    setTranslateX(0);\n    setTranslateY(0);\n    setCurrentMindMapId(null);\n    setCurrentMapTitle('Untitled Map'); // Update local state\n    setMessage('Created a new, empty mind map.');\n    navigate('/mindmap/new', { replace: true });\n  }, [navigate]);\n\n  const handleSetMapTitle = useCallback((newTitle) => {\n    setCurrentMapTitle(newTitle); // Update local state\n  }, []);\n\n  // On component mount, check session and load data\n  useEffect(() => {\n    const storedSession = localStorage.getItem('mindmapSession');\n    if (storedSession) {\n      try {\n        const parsedSession = JSON.parse(storedSession);\n        if (parsedSession && parsedSession.token && parsedSession.user) {\n          setSession(parsedSession);\n          //setMessage(`Welcome back, ${parsedSession.user.email}!`); // This message is for MindMapDashboard\n          fetchUserMindMaps(parsedSession.token);\n        } else {\n          localStorage.removeItem('mindmapSession');\n          navigate('/');\n        }\n      } catch (e) {\n        console.error(\"Failed to parse session from localStorage\", e);\n        localStorage.removeItem('mindmapSession');\n        navigate('/');\n      }\n    } else {\n      navigate('/');\n    }\n  }, [navigate, fetchUserMindMaps]);\n\n  // Load map based on ID after session is established\n  useEffect(() => {\n    if (!session) return;\n    if (id && id !== 'new') {\n      loadMindMapFromServer(id);\n    } else if (id === 'new') {\n      handleNewMap();\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [session, id]); // Depend on session and id to trigger loading\n\n\n  // --- Mouse Handlers for Node Dragging ---\n  const handleMouseMove = useCallback((e) => {\n    if (!dragDataRef.current.isDragging || !draggedNode) return;\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n    animationFrameRef.current = requestAnimationFrame(() => {\n      const rect = containerRef.current?.getBoundingClientRect();\n      if (!rect) return;\n      const newX = (e.clientX - rect.left - dragDataRef.current.offset.x - translateX);\n      const newY = (e.clientY - rect.top - dragDataRef.current.offset.y - translateY);\n      setNodes(prev => prev.map(node =>\n        node.id === draggedNode\n          ? { ...node, x: newX, y: newY }\n          : node\n      ));\n    });\n  }, [draggedNode, translateX, translateY]);\n\n  const handleMouseDown = useCallback((e, nodeId) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (selectedNode !== nodeId) {\n      setSelectedNode(nodeId);\n    }\n    const currentCanvasWrapper = canvasWrapperRef.current;\n    if (currentCanvasWrapper) {\n      currentCanvasWrapper.classList.add('no-transition');\n    }\n    const node = nodes.find(n => n.id === nodeId);\n    if (!node) return;\n    const nodeEl = e.currentTarget;\n    if (!nodeEl) return;\n    const nodeRect = nodeEl.getBoundingClientRect();\n    const containerRect = containerRef.current?.getBoundingClientRect();\n    if (!containerRect) return;\n\n    dragDataRef.current = {\n      isDragging: true,\n      offset: {\n        x: e.clientX - nodeRect.left,\n        y: e.clientY - nodeRect.top\n      }\n    };\n    setDraggedNode(nodeId);\n  }, [nodes, selectedNode]);\n\n  const handleMouseUp = useCallback(() => {\n    dragDataRef.current.isDragging = false;\n    setDraggedNode(null);\n    setIsPanning(false);\n    const currentCanvasWrapper = canvasWrapperRef.current;\n    if (currentCanvasWrapper) {\n      currentCanvasWrapper.classList.remove('no-transition');\n    }\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n      animationFrameRef.current = null;\n    }\n  }, []);\n\n  const handlePanMouseDown = useCallback((e) => {\n    const isTargetNode = e.target.closest('.mindmap-node');\n    const isTargetToolbar = e.target.closest('.mindmap-toolbar');\n    const isTargetInstructions = e.target.closest('.mindmap-instructions');\n    const isTargetLargeEditor = e.target.closest('.large-text-editor-overlay');\n    if (isTargetNode || isTargetToolbar || isTargetInstructions || isTargetLargeEditor || e.button !== 0) {\n        return;\n    }\n    setIsPanning(true);\n    panStartRef.current = {\n      x: e.clientX,\n      y: e.clientY,\n      startTranslateX: translateX,\n      startTranslateY: translateY\n    };\n    const currentCanvasWrapper = canvasWrapperRef.current;\n    if (currentCanvasWrapper) {\n      currentCanvasWrapper.classList.add('no-transition');\n    }\n    setSelectedNode(null);\n    e.preventDefault();\n  }, [translateX, translateY]);\n\n  const handlePanMouseMove = useCallback((e) => {\n    if (!isPanning) return;\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n    animationFrameRef.current = requestAnimationFrame(() => {\n      const dx = e.clientX - panStartRef.current.x;\n      const dy = e.clientY - panStartRef.current.y;\n      setTranslateX(panStartRef.current.startTranslateX + dx);\n      setTranslateY(panStartRef.current.startTranslateY + dy);\n    });\n  }, [isPanning]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    const handleGlobalMove = (e) => {\n      if (draggedNode) {\n        handleMouseMove(e);\n      } else if (isPanning) {\n        handlePanMouseMove(e);\n      }\n    };\n\n    const handleGlobalUp = () => handleMouseUp();\n\n    const handlePanDown = (e) => handlePanMouseDown(e);\n\n    document.addEventListener('mouseup', handleGlobalUp);\n    document.addEventListener('mouseleave', handleGlobalUp);\n    container.addEventListener('mousemove', handleGlobalMove);\n    container.addEventListener('mousedown', handlePanDown);\n\n    return () => {\n      document.removeEventListener('mouseup', handleGlobalUp);\n      document.removeEventListener('mouseleave', handleGlobalUp);\n      container.removeEventListener('mousemove', handleGlobalMove);\n      container.removeEventListener('mousedown', handlePanDown);\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n      const currentCanvasWrapper = canvasWrapperRef.current;\n      if (currentCanvasWrapper) {\n        currentCanvasWrapper.classList.remove('no-transition');\n      }\n    };\n  }, [handleMouseMove, handleMouseUp, handlePanMouseDown, handlePanMouseMove, draggedNode, isPanning]);\n\n  const closeLargeEditor = useCallback(() => {\n    setIsLargeEditorOpen(false);\n    setLargeEditorNodeId(null);\n    setLargeEditorTitle('');\n    setLargeEditorText('');\n  }, []);\n\n  const saveLargeEditorText = useCallback((newTitle, newText) => {\n    if (!largeEditorNodeId) return;\n    setNodes(prev =>\n      prev.map(node => (\n        node.id === largeEditorNodeId\n          ? { ...node, title: newTitle.trim() || 'New Idea', text: newText.trim() || '' }\n          : node\n      ))\n    );\n    // If the node edited was the root node, update the map title here\n    const editedNode = nodes.find(n => n.id === largeEditorNodeId);\n    if (editedNode && editedNode.isRoot) {\n        setCurrentMapTitle(newTitle.trim() || 'Untitled Map'); // Update local state\n    }\n    closeLargeEditor();\n  }, [largeEditorNodeId, closeLargeEditor, nodes]); // Removed onMapTitleChangeRequest, use local state\n\n  const openLargeEditor = useCallback((nodeId) => {\n    const node = nodes.find(n => n.id === nodeId);\n    if (node) {\n      setIsLargeEditorOpen(true);\n      setLargeEditorNodeId(nodeId);\n      setLargeEditorTitle(node.title || '');\n      setLargeEditorText(node.text || '');\n    }\n  }, [nodes]);\n\n  const addNode = useCallback(() => {\n    const parent = selectedNode ? nodes.find(n => n.id === selectedNode) : nodes.find(n => n.isRoot);\n    if (!parent) {\n      setMessage('Cannot add node: No root node found or selected node does not exist.');\n      return;\n    }\n    const angle = Math.random() * 2 * Math.PI;\n    const distance = 150;\n    const newNode = {\n      id: Date.now().toString(),\n      x: parent.x + Math.cos(angle) * distance,\n      y: parent.y + Math.sin(angle) * distance,\n      title: 'New Idea',\n      text: '',\n      color: colors[Math.floor(Math.random() * colors.length)]\n    };\n    setNodes(prev => [...prev, newNode]);\n    setConnections(prev => [...prev, { from: parent.id, to: newNode.id }]);\n    setSelectedNode(newNode.id);\n    openLargeEditor(newNode.id);\n  }, [nodes, colors, selectedNode, openLargeEditor]);\n\n  const deleteNode = useCallback(() => {\n    const nodeToDelete = nodes.find(n => n.id === selectedNode);\n    if (!nodeToDelete || nodeToDelete.isRoot) {\n      setMessage('Cannot delete root node or no node selected.');\n      return;\n    }\n    setNodes(prev => prev.filter(n => n.id !== selectedNode));\n    setConnections(prev => prev.filter(c => c.from !== selectedNode && c.to !== selectedNode));\n    setSelectedNode(null);\n  }, [nodes, selectedNode]);\n\n  const isRootSelected = selectedNode ? nodes.find(n => n.id === selectedNode)?.isRoot : false;\n\n  // If no session, navigate to login. ProtectedRoute should handle this, but as a fallback.\n  if (!session) {\n    return null; // Or a loading spinner if you want\n  }\n\n  return (\n    <div className=\"mindmap-container\" ref={containerRef}>\n      <MindMapToolbar\n        onAddNode={addNode}\n        onEditNode={() => selectedNode && openLargeEditor(selectedNode)}\n        onDeleteNode={deleteNode}\n        selectedNode={selectedNode}\n        isRootSelected={isRootSelected}\n        onSave={saveMindMapToServer}\n        onLoadMap={loadMindMapFromServer} // Re-added load map function\n        onNewMap={handleNewMap} // Re-added new map function\n        userMindMaps={userMindMaps} // Re-added user mind maps for dropdown\n        currentMindMapId={currentMindMapId}\n        loading={loading}\n        message={message}\n        onLogout={handleLogout} // Pass local handleLogout\n        userName={session?.user?.email || 'User'} // Pass local session user email\n        currentMapTitle={currentMapTitle} // Pass local current map title\n        onSetMapTitle={handleSetMapTitle} // Pass local handleSetMapTitle\n      />\n\n      <MindMapInstructions />\n\n      <MindMapCanvas\n        nodes={nodes}\n        connections={connections}\n        draggedNode={draggedNode}\n        selectedNode={selectedNode}\n        translateX={translateX}\n        translateY={translateY}\n        handleMouseDown={handleMouseDown}\n        openNodeEditor={openLargeEditor}\n        canvasWrapperRef={canvasWrapperRef}\n        svgRef={svgRef}\n      />\n\n      {isLargeEditorOpen && (\n        <LargeTextEditor\n          isOpen={isLargeEditorOpen}\n          initialTitle={largeEditorTitle}\n          initialText={largeEditorText}\n          onSave={saveLargeEditorText}\n          onCancel={closeLargeEditor}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default MindMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}