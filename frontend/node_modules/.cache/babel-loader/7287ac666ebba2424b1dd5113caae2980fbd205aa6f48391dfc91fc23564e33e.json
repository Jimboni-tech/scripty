{"ast":null,"code":"var _jsxFileName = \"/Users/jimmyzhou/Desktop/Projects/scripty/frontend/src/pages/mindmap.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useCallback, useEffect, useMemo } from 'react';\nimport { createClient } from '@supabase/supabase-js';\nimport MindMapCanvas from '../components/mindmapcanvas';\nimport MindMapToolbar from '../components/mindmaptoolbar';\nimport MindMapInstructions from '../components/mindmapinstructions';\nimport LargeTextEditor from '../components/mindmaptexteditor';\nimport Auth from '../components/Auth';\nimport './mindmap.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\n\n// Ensure Supabase client is only created if keys are available\nif (!supabaseUrl || !supabaseAnonKey) {\n  console.error('Supabase URL or Anon Key is missing in .env file for frontend.');\n  // In a real app, you might want to render an error message or halt execution more gracefully\n}\nconst supabase = createClient(supabaseUrl, supabaseAnonKey);\nconst API_BASE_URL = process.env.REACT_APP_BACKEND_API_URL;\n// Critical check: Ensure API_BASE_URL is defined.\nif (!API_BASE_URL) {\n  console.error('REACT_APP_BACKEND_API_URL is not defined in .env file. API calls will fail.');\n}\nconst MindMap = () => {\n  _s();\n  var _nodes$find, _session$user;\n  const [nodes, setNodes] = useState([{\n    id: '1',\n    x: 400,\n    y: 300,\n    title: 'Central Idea',\n    text: '',\n    isRoot: true,\n    color: '#dc2626'\n  }]);\n  const [connections, setConnections] = useState([]);\n  const [draggedNode, setDraggedNode] = useState(null);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [isLargeEditorOpen, setIsLargeEditorOpen] = useState(false);\n  const [largeEditorNodeId, setLargeEditorNodeId] = useState(null);\n  const [largeEditorTitle, setLargeEditorTitle] = useState('');\n  const [largeEditorText, setLargeEditorText] = useState('');\n  const [translateX, setTranslateX] = useState(0);\n  const [translateY, setTranslateY] = useState(0);\n  const [isPanning, setIsPanning] = useState(false);\n  const panStartRef = useRef({\n    x: 0,\n    y: 0,\n    startTranslateX: 0,\n    startTranslateY: 0\n  });\n  const svgRef = useRef(null);\n  const containerRef = useRef(null);\n  const canvasWrapperRef = useRef(null);\n  const dragDataRef = useRef({\n    isDragging: false,\n    offset: {\n      x: 0,\n      y: 0\n    }\n  });\n  const animationFrameRef = useRef(null);\n  const colors = useMemo(() => ['#EF4444',\n  // Red\n  '#F97316',\n  // Orange\n  '#EAB308',\n  // Yellow\n  '#22C55E',\n  // Green\n  '#3B82F6',\n  // Blue\n  '#A855F7',\n  // Purple\n  '#EC4899' // Pink\n  ], []);\n\n  // --- Authentication and Persistence States ---\n  const [session, setSession] = useState(null);\n  // userId is derived from session, no longer directly used in save/load calls as it's extracted by backend\n  // const userId = session?.user?.id || null;\n  const [mindmapId, setMindmapId] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('');\n\n  // --- Backend API Save Function ---\n  const saveMindMap = useCallback(async () => {\n    if (!session || !session.access_token) {\n      setMessage('You must be logged in to save your mind map. Please log in.');\n      return;\n    }\n    setLoading(true);\n    setMessage('Saving mind map...');\n    const mindMapData = {\n      mindmapId,\n      // Will be null for new maps, ID for existing\n      name: 'My Awesome Mind Map',\n      // You might want to make this dynamic later\n      nodes_data: nodes,\n      connections_data: connections,\n      translate_x: translateX,\n      translate_y: translateY\n    };\n    try {\n      const response = await fetch(`${API_BASE_URL}/mindmaps`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${session.access_token}`\n        },\n        body: JSON.stringify(mindMapData)\n      });\n\n      // Check for non-OK response first\n      if (!response.ok) {\n        // Try to parse error message from backend\n        let errorData;\n        try {\n          errorData = await response.json();\n        } catch (parseError) {\n          console.error('Failed to parse error response:', parseError);\n          setMessage(`Error saving mind map: Server responded with status ${response.status} but no valid JSON error message.`);\n          return;\n        }\n        const errorMessage = errorData.message || errorData.error || `Unknown error (Status: ${response.status})`;\n        throw new Error(errorMessage);\n      }\n      const result = await response.json();\n      setMindmapId(result.data.id);\n      setMessage('Mind map saved successfully!');\n      console.log('Mind map saved:', result.data);\n    } catch (error) {\n      setMessage(`Error saving mind map: ${error.message}. Please try again or re-authenticate.`);\n      console.error('Error saving mind map:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [session, nodes, connections, translateX, translateY, mindmapId]);\n\n  // --- Backend API Load Function ---\n  const loadMindMap = useCallback(async () => {\n    if (!session || !session.access_token) {\n      setMessage('Please log in to load your mind map.');\n      // Optionally, reset to a blank canvas if not logged in\n      setNodes([{\n        id: '1',\n        x: 400,\n        y: 300,\n        title: 'Central Idea',\n        text: '',\n        isRoot: true,\n        color: '#dc2626'\n      }]);\n      setConnections([]);\n      setTranslateX(0);\n      setTranslateY(0);\n      setMindmapId(null);\n      return;\n    }\n    setLoading(true);\n    setMessage('Loading mind map...');\n    try {\n      const response = await fetch(`${API_BASE_URL}/mindmaps`, {\n        headers: {\n          'Authorization': `Bearer ${session.access_token}`\n        }\n      });\n\n      // Check for non-OK response first\n      if (!response.ok) {\n        if (response.status === 404) {\n          setMessage('No mind map found for this user. Create a new one!');\n          setNodes([{\n            id: '1',\n            x: 400,\n            y: 300,\n            title: 'Central Idea',\n            text: '',\n            isRoot: true,\n            color: '#dc2626'\n          }]);\n          setConnections([]);\n          setTranslateX(0);\n          setTranslateY(0);\n          setMindmapId(null);\n          return; // Exit here as it's a valid \"not found\" scenario\n        }\n\n        // Try to parse other error messages from backend\n        let errorData;\n        try {\n          errorData = await response.json();\n        } catch (parseError) {\n          console.error('Failed to parse error response:', parseError);\n          setMessage(`Error loading mind map: Server responded with status ${response.status} but no valid JSON error message.`);\n          return;\n        }\n        const errorMessage = errorData.message || errorData.error || `Unknown error (Status: ${response.status})`;\n        throw new Error(errorMessage);\n      }\n      const result = await response.json();\n      const loadedMap = result.data;\n      setNodes(loadedMap.nodes_data);\n      setConnections(loadedMap.connections_data);\n      setTranslateX(loadedMap.translate_x);\n      setTranslateY(loadedMap.translate_y);\n      setMindmapId(loadedMap.id);\n      setMessage('Mind map loaded successfully!');\n      console.log('Mind map loaded:', loadedMap);\n    } catch (error) {\n      setMessage(`Error loading mind map: ${error.message}. Please try again or re-authenticate.`);\n      console.error('Error loading mind map:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [session]); // session is the only dependency here that influences the fetch call\n\n  // Handle Supabase Auth Session\n  useEffect(() => {\n    const handleInitialSession = async () => {\n      const {\n        data: {\n          session: initialSession\n        }\n      } = await supabase.auth.getSession();\n      setSession(initialSession);\n      if (initialSession) {\n        setMessage('Logged in. Attempting to load your latest mind map...');\n        await loadMindMap(); // Await loadMindMap here\n      } else {\n        setMessage('Please log in or sign up.');\n        // Ensure state is reset for unauthenticated users\n        setNodes([{\n          id: '1',\n          x: 400,\n          y: 300,\n          title: 'Central Idea',\n          text: '',\n          isRoot: true,\n          color: '#dc2626'\n        }]);\n        setConnections([]);\n        setTranslateX(0);\n        setTranslateY(0);\n        setMindmapId(null);\n      }\n    };\n\n    // Call the initial session handler when the component mounts\n    handleInitialSession();\n\n    // Set up the listener for authentication state changes\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange(async (_event, session) => {\n      console.log('Auth State Change Event:', _event); // <-- VERY IMPORTANT\n      console.log('Auth State Change Session:', session); // <-- VERY IMPORTANT\n      console.log('Current message before update:', message); // See previous message\n\n      setSession(session);\n      if (session) {\n        setMessage('Authentication state changed. User is logged in. Loading map...');\n        await loadMindMap(); // Await loadMindMap here\n      } else {\n        setMessage('Logged out. Please log in or sign up.');\n        // Reset state when logged out\n        setNodes([{\n          id: '1',\n          x: 400,\n          y: 300,\n          title: 'Central Idea',\n          text: '',\n          isRoot: true,\n          color: '#dc2626'\n        }]);\n        setConnections([]);\n        setTranslateX(0);\n        setTranslateY(0);\n        setMindmapId(null);\n      }\n      console.log('Message after update:', message); // See updated message\n      console.log('-----------------------------------');\n    });\n    return () => subscription.unsubscribe();\n  }, [loadMindMap, message]);\n\n  // Callback from Auth component after successful login/signup\n  const handleAuthSuccess = useCallback(async newSession => {\n    setSession(newSession);\n    setMessage('Authentication successful. Loading your mind map...');\n    await loadMindMap(); // Load map immediately after successful auth, await it\n  }, [loadMindMap]);\n\n  // Logout function\n  const handleLogout = useCallback(async () => {\n    setLoading(true);\n    setMessage('Logging out...');\n    try {\n      const {\n        error\n      } = await supabase.auth.signOut();\n      if (error) throw error;\n      setMessage('Logged out successfully.');\n      // After logout, reset the mind map to default state\n      setNodes([{\n        id: '1',\n        x: 400,\n        y: 300,\n        title: 'Central Idea',\n        text: '',\n        isRoot: true,\n        color: '#dc2626'\n      }]);\n      setConnections([]);\n      setTranslateX(0);\n      setTranslateY(0);\n      setMindmapId(null);\n    } catch (error) {\n      setMessage(`Logout error: ${error.message}`);\n      console.error('Logout error:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // --- Mouse Handlers for Node Dragging ---\n  const handleMouseMove = useCallback(e => {\n    if (!dragDataRef.current.isDragging || !draggedNode) return;\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n    animationFrameRef.current = requestAnimationFrame(() => {\n      var _containerRef$current;\n      const rect = (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.getBoundingClientRect();\n      if (!rect) return;\n      const newX = e.clientX - rect.left - dragDataRef.current.offset.x - translateX;\n      const newY = e.clientY - rect.top - dragDataRef.current.offset.y - translateY;\n      // Removed constraints to allow movement beyond initial canvas boundaries, adjust as needed\n      // const constrainedX = Math.max(0, Math.min(newX, 2000));\n      // const constrainedY = Math.max(0, Math.min(newY, 1500));\n      setNodes(prev => prev.map(node => node.id === draggedNode ? {\n        ...node,\n        x: newX,\n        y: newY\n      } : node));\n    });\n  }, [draggedNode, translateX, translateY]);\n  const handleMouseDown = useCallback((e, nodeId) => {\n    var _containerRef$current2;\n    e.preventDefault();\n    e.stopPropagation(); // Prevent canvas panning from starting if clicking a node\n    if (selectedNode !== nodeId) {\n      setSelectedNode(nodeId);\n    }\n    const currentCanvasWrapper = canvasWrapperRef.current;\n    if (currentCanvasWrapper) {\n      currentCanvasWrapper.classList.add('no-transition');\n    }\n    const node = nodes.find(n => n.id === nodeId);\n    if (!node) return;\n    const nodeEl = e.currentTarget; // Get the DOM element for the node\n    if (!nodeEl) return;\n    const nodeRect = nodeEl.getBoundingClientRect();\n    const containerRect = (_containerRef$current2 = containerRef.current) === null || _containerRef$current2 === void 0 ? void 0 : _containerRef$current2.getBoundingClientRect();\n    if (!containerRect) return;\n\n    // Calculate offset relative to the node's top-left corner\n    dragDataRef.current = {\n      isDragging: true,\n      offset: {\n        x: e.clientX - nodeRect.left,\n        y: e.clientY - nodeRect.top\n      }\n    };\n    setDraggedNode(nodeId);\n  }, [nodes, selectedNode]);\n  const handleMouseUp = useCallback(() => {\n    dragDataRef.current.isDragging = false;\n    setDraggedNode(null);\n    setIsPanning(false); // Ensure panning state is reset\n    const currentCanvasWrapper = canvasWrapperRef.current;\n    if (currentCanvasWrapper) {\n      currentCanvasWrapper.classList.remove('no-transition');\n    }\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n      animationFrameRef.current = null;\n    }\n  }, []);\n\n  // --- Mouse Handlers for Panning ---\n  const handlePanMouseDown = useCallback(e => {\n    // Only pan if a node isn't clicked and it's the left mouse button\n    const isTargetNode = e.target.closest('.mindmap-node');\n    const isTargetToolbar = e.target.closest('.mindmap-toolbar');\n    const isTargetInstructions = e.target.closest('.mindmap-instructions');\n    const isTargetLargeEditor = e.target.closest('.large-text-editor-overlay');\n    if (isTargetNode || isTargetToolbar || isTargetInstructions || isTargetLargeEditor || e.button !== 0) {\n      return;\n    }\n    setIsPanning(true);\n    panStartRef.current = {\n      x: e.clientX,\n      y: e.clientY,\n      startTranslateX: translateX,\n      startTranslateY: translateY\n    };\n    const currentCanvasWrapper = canvasWrapperRef.current;\n    if (currentCanvasWrapper) {\n      currentCanvasWrapper.classList.add('no-transition');\n    }\n    setSelectedNode(null); // Deselect any node when panning starts\n    e.preventDefault(); // Prevent default browser drag behavior\n  }, [translateX, translateY]);\n  const handlePanMouseMove = useCallback(e => {\n    if (!isPanning) return;\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n    animationFrameRef.current = requestAnimationFrame(() => {\n      const dx = e.clientX - panStartRef.current.x;\n      const dy = e.clientY - panStartRef.current.y;\n      setTranslateX(panStartRef.current.startTranslateX + dx);\n      setTranslateY(panStartRef.current.startTranslateY + dy);\n    });\n  }, [isPanning]);\n\n  // Global mouse event listeners for dragging and panning\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n    const handleGlobalMove = e => {\n      if (draggedNode) {\n        handleMouseMove(e);\n      } else if (isPanning) {\n        handlePanMouseMove(e);\n      }\n    };\n    const handleGlobalUp = () => handleMouseUp(); // This function resets all dragging/panning states\n\n    const handlePanDown = e => handlePanMouseDown(e); // Listener for canvas pan initiation\n\n    document.addEventListener('mouseup', handleGlobalUp);\n    document.addEventListener('mouseleave', handleGlobalUp); // Important for when mouse leaves window\n    container.addEventListener('mousemove', handleGlobalMove); // Listen on container for mouse movement\n    container.addEventListener('mousedown', handlePanDown); // Listen on container for pan start\n\n    return () => {\n      document.removeEventListener('mouseup', handleGlobalUp);\n      document.removeEventListener('mouseleave', handleGlobalUp);\n      container.removeEventListener('mousemove', handleGlobalMove);\n      container.removeEventListener('mousedown', handlePanDown);\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n      // Ensure no-transition class is removed on unmount too\n      const currentCanvasWrapper = canvasWrapperRef.current;\n      if (currentCanvasWrapper) {\n        currentCanvasWrapper.classList.remove('no-transition');\n      }\n    };\n  }, [handleMouseMove, handleMouseUp, handlePanMouseDown, handlePanMouseMove, draggedNode, isPanning]);\n\n  // --- Large Text Editor Functions ---\n  const closeLargeEditor = useCallback(() => {\n    setIsLargeEditorOpen(false);\n    setLargeEditorNodeId(null);\n    setLargeEditorTitle('');\n    setLargeEditorText('');\n  }, []);\n  const saveLargeEditorText = useCallback((newTitle, newText) => {\n    if (!largeEditorNodeId) return;\n    setNodes(prev => prev.map(node => node.id === largeEditorNodeId ? {\n      ...node,\n      title: newTitle.trim() || 'New Idea',\n      text: newText.trim() || ''\n    } : node));\n    closeLargeEditor();\n  }, [largeEditorNodeId, closeLargeEditor]);\n  const openLargeEditor = useCallback(nodeId => {\n    const node = nodes.find(n => n.id === nodeId);\n    if (node) {\n      setIsLargeEditorOpen(true);\n      setLargeEditorNodeId(nodeId);\n      setLargeEditorTitle(node.title || '');\n      setLargeEditorText(node.text || '');\n    }\n  }, [nodes]);\n  const addNode = useCallback(() => {\n    const parent = selectedNode ? nodes.find(n => n.id === selectedNode) : nodes.find(n => n.isRoot);\n    if (!parent) {\n      setMessage('Cannot add node: No root node found or selected node does not exist.');\n      return;\n    }\n    const angle = Math.random() * 2 * Math.PI;\n    const distance = 150;\n    const newNode = {\n      id: Date.now().toString(),\n      x: parent.x + Math.cos(angle) * distance,\n      y: parent.y + Math.sin(angle) * distance,\n      title: 'New Idea',\n      text: '',\n      color: colors[Math.floor(Math.random() * colors.length)]\n    };\n    setNodes(prev => [...prev, newNode]);\n    setConnections(prev => [...prev, {\n      from: parent.id,\n      to: newNode.id\n    }]);\n    setSelectedNode(newNode.id);\n    openLargeEditor(newNode.id);\n  }, [nodes, colors, selectedNode, openLargeEditor]);\n  const deleteNode = useCallback(() => {\n    const nodeToDelete = nodes.find(n => n.id === selectedNode);\n    if (!nodeToDelete || nodeToDelete.isRoot) {\n      setMessage('Cannot delete root node or no node selected.');\n      return;\n    }\n    setNodes(prev => prev.filter(n => n.id !== selectedNode));\n    setConnections(prev => prev.filter(c => c.from !== selectedNode && c.to !== selectedNode));\n    setSelectedNode(null); // Deselect after deleting\n  }, [nodes, selectedNode]);\n  const isRootSelected = selectedNode ? (_nodes$find = nodes.find(n => n.id === selectedNode)) === null || _nodes$find === void 0 ? void 0 : _nodes$find.isRoot : false;\n\n  // Render Auth component if no session\n  if (!session) {\n    return /*#__PURE__*/_jsxDEV(Auth, {\n      onAuthSuccess: handleAuthSuccess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 486,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mindmap-container\",\n    ref: containerRef,\n    children: [/*#__PURE__*/_jsxDEV(MindMapToolbar, {\n      onAddNode: addNode,\n      onEditNode: () => selectedNode && openLargeEditor(selectedNode),\n      onDeleteNode: deleteNode,\n      selectedNode: selectedNode,\n      isRootSelected: isRootSelected,\n      onSave: saveMindMap,\n      onLoad: loadMindMap,\n      loading: loading,\n      message: message,\n      onLogout: handleLogout,\n      userName: (session === null || session === void 0 ? void 0 : (_session$user = session.user) === null || _session$user === void 0 ? void 0 : _session$user.email) || 'User'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MindMapInstructions, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 505,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MindMapCanvas, {\n      nodes: nodes,\n      connections: connections,\n      draggedNode: draggedNode,\n      selectedNode: selectedNode,\n      translateX: translateX,\n      translateY: translateY,\n      handleMouseDown: handleMouseDown,\n      openNodeEditor: openLargeEditor,\n      canvasWrapperRef: canvasWrapperRef,\n      svgRef: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 507,\n      columnNumber: 7\n    }, this), isLargeEditorOpen && /*#__PURE__*/_jsxDEV(LargeTextEditor, {\n      isOpen: isLargeEditorOpen,\n      initialTitle: largeEditorTitle,\n      initialText: largeEditorText,\n      onSave: saveLargeEditorText,\n      onCancel: closeLargeEditor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 521,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 490,\n    columnNumber: 5\n  }, this);\n};\n_s(MindMap, \"S4JEAd3eZO5k5D+T7P1BVFsTHhc=\");\n_c = MindMap;\nexport default MindMap;\nvar _c;\n$RefreshReg$(_c, \"MindMap\");","map":{"version":3,"names":["React","useState","useRef","useCallback","useEffect","useMemo","createClient","MindMapCanvas","MindMapToolbar","MindMapInstructions","LargeTextEditor","Auth","jsxDEV","_jsxDEV","supabaseUrl","process","env","REACT_APP_SUPABASE_URL","supabaseAnonKey","REACT_APP_SUPABASE_ANON_KEY","console","error","supabase","API_BASE_URL","REACT_APP_BACKEND_API_URL","MindMap","_s","_nodes$find","_session$user","nodes","setNodes","id","x","y","title","text","isRoot","color","connections","setConnections","draggedNode","setDraggedNode","selectedNode","setSelectedNode","isLargeEditorOpen","setIsLargeEditorOpen","largeEditorNodeId","setLargeEditorNodeId","largeEditorTitle","setLargeEditorTitle","largeEditorText","setLargeEditorText","translateX","setTranslateX","translateY","setTranslateY","isPanning","setIsPanning","panStartRef","startTranslateX","startTranslateY","svgRef","containerRef","canvasWrapperRef","dragDataRef","isDragging","offset","animationFrameRef","colors","session","setSession","mindmapId","setMindmapId","loading","setLoading","message","setMessage","saveMindMap","access_token","mindMapData","name","nodes_data","connections_data","translate_x","translate_y","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","parseError","status","errorMessage","Error","result","data","log","loadMindMap","loadedMap","handleInitialSession","initialSession","auth","getSession","subscription","onAuthStateChange","_event","unsubscribe","handleAuthSuccess","newSession","handleLogout","signOut","handleMouseMove","e","current","cancelAnimationFrame","requestAnimationFrame","_containerRef$current","rect","getBoundingClientRect","newX","clientX","left","newY","clientY","top","prev","map","node","handleMouseDown","nodeId","_containerRef$current2","preventDefault","stopPropagation","currentCanvasWrapper","classList","add","find","n","nodeEl","currentTarget","nodeRect","containerRect","handleMouseUp","remove","handlePanMouseDown","isTargetNode","target","closest","isTargetToolbar","isTargetInstructions","isTargetLargeEditor","button","handlePanMouseMove","dx","dy","container","handleGlobalMove","handleGlobalUp","handlePanDown","document","addEventListener","removeEventListener","closeLargeEditor","saveLargeEditorText","newTitle","newText","trim","openLargeEditor","addNode","parent","angle","Math","random","PI","distance","newNode","Date","now","toString","cos","sin","floor","length","from","to","deleteNode","nodeToDelete","filter","c","isRootSelected","onAuthSuccess","fileName","_jsxFileName","lineNumber","columnNumber","className","ref","children","onAddNode","onEditNode","onDeleteNode","onSave","onLoad","onLogout","userName","user","email","openNodeEditor","isOpen","initialTitle","initialText","onCancel","_c","$RefreshReg$"],"sources":["/Users/jimmyzhou/Desktop/Projects/scripty/frontend/src/pages/mindmap.jsx"],"sourcesContent":["import React, { useState, useRef, useCallback, useEffect, useMemo } from 'react';\nimport { createClient } from '@supabase/supabase-js';\nimport MindMapCanvas from '../components/mindmapcanvas';\nimport MindMapToolbar from '../components/mindmaptoolbar';\nimport MindMapInstructions from '../components/mindmapinstructions';\nimport LargeTextEditor from '../components/mindmaptexteditor';\nimport Auth from '../components/Auth';\n\nimport './mindmap.css';\n\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\n\n// Ensure Supabase client is only created if keys are available\nif (!supabaseUrl || !supabaseAnonKey) {\n  console.error('Supabase URL or Anon Key is missing in .env file for frontend.');\n  // In a real app, you might want to render an error message or halt execution more gracefully\n}\nconst supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n\nconst API_BASE_URL = process.env.REACT_APP_BACKEND_API_URL;\n// Critical check: Ensure API_BASE_URL is defined.\nif (!API_BASE_URL) {\n  console.error('REACT_APP_BACKEND_API_URL is not defined in .env file. API calls will fail.');\n}\n\n\nconst MindMap = () => {\n  const [nodes, setNodes] = useState([\n    { id: '1', x: 400, y: 300, title: 'Central Idea', text: '', isRoot: true, color: '#dc2626' }\n  ]);\n  const [connections, setConnections] = useState([]);\n  const [draggedNode, setDraggedNode] = useState(null);\n  const [selectedNode, setSelectedNode] = useState(null);\n\n  const [isLargeEditorOpen, setIsLargeEditorOpen] = useState(false);\n  const [largeEditorNodeId, setLargeEditorNodeId] = useState(null);\n  const [largeEditorTitle, setLargeEditorTitle] = useState('');\n  const [largeEditorText, setLargeEditorText] = useState('');\n\n  const [translateX, setTranslateX] = useState(0);\n  const [translateY, setTranslateY] = useState(0);\n  const [isPanning, setIsPanning] = useState(false);\n  const panStartRef = useRef({ x: 0, y: 0, startTranslateX: 0, startTranslateY: 0 });\n\n  const svgRef = useRef(null);\n  const containerRef = useRef(null);\n  const canvasWrapperRef = useRef(null);\n\n  const dragDataRef = useRef({ isDragging: false, offset: { x: 0, y: 0 } });\n  const animationFrameRef = useRef(null);\n\n  const colors = useMemo(() => [\n    '#EF4444', // Red\n    '#F97316', // Orange\n    '#EAB308', // Yellow\n    '#22C55E', // Green\n    '#3B82F6', // Blue\n    '#A855F7', // Purple\n    '#EC4899', // Pink\n  ], []);\n\n  // --- Authentication and Persistence States ---\n  const [session, setSession] = useState(null);\n  // userId is derived from session, no longer directly used in save/load calls as it's extracted by backend\n  // const userId = session?.user?.id || null;\n  const [mindmapId, setMindmapId] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('');\n\n  // --- Backend API Save Function ---\n  const saveMindMap = useCallback(async () => {\n    if (!session || !session.access_token) {\n      setMessage('You must be logged in to save your mind map. Please log in.');\n      return;\n    }\n    setLoading(true);\n    setMessage('Saving mind map...');\n\n    const mindMapData = {\n      mindmapId, // Will be null for new maps, ID for existing\n      name: 'My Awesome Mind Map', // You might want to make this dynamic later\n      nodes_data: nodes,\n      connections_data: connections,\n      translate_x: translateX,\n      translate_y: translateY,\n    };\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/mindmaps`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${session.access_token}`,\n        },\n        body: JSON.stringify(mindMapData),\n      });\n\n      // Check for non-OK response first\n      if (!response.ok) {\n        // Try to parse error message from backend\n        let errorData;\n        try {\n          errorData = await response.json();\n        } catch (parseError) {\n          console.error('Failed to parse error response:', parseError);\n          setMessage(`Error saving mind map: Server responded with status ${response.status} but no valid JSON error message.`);\n          return;\n        }\n        const errorMessage = errorData.message || errorData.error || `Unknown error (Status: ${response.status})`;\n        throw new Error(errorMessage);\n      }\n\n      const result = await response.json();\n      setMindmapId(result.data.id);\n      setMessage('Mind map saved successfully!');\n      console.log('Mind map saved:', result.data);\n\n    } catch (error) {\n      setMessage(`Error saving mind map: ${error.message}. Please try again or re-authenticate.`);\n      console.error('Error saving mind map:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [session, nodes, connections, translateX, translateY, mindmapId]);\n\n\n  // --- Backend API Load Function ---\n  const loadMindMap = useCallback(async () => {\n    if (!session || !session.access_token) {\n      setMessage('Please log in to load your mind map.');\n      // Optionally, reset to a blank canvas if not logged in\n      setNodes([{ id: '1', x: 400, y: 300, title: 'Central Idea', text: '', isRoot: true, color: '#dc2626' }]);\n      setConnections([]);\n      setTranslateX(0);\n      setTranslateY(0);\n      setMindmapId(null);\n      return;\n    }\n    setLoading(true);\n    setMessage('Loading mind map...');\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/mindmaps`, {\n        headers: {\n          'Authorization': `Bearer ${session.access_token}`,\n        },\n      });\n\n      // Check for non-OK response first\n      if (!response.ok) {\n        if (response.status === 404) {\n          setMessage('No mind map found for this user. Create a new one!');\n          setNodes([{ id: '1', x: 400, y: 300, title: 'Central Idea', text: '', isRoot: true, color: '#dc2626' }]);\n          setConnections([]);\n          setTranslateX(0);\n          setTranslateY(0);\n          setMindmapId(null);\n          return; // Exit here as it's a valid \"not found\" scenario\n        }\n\n        // Try to parse other error messages from backend\n        let errorData;\n        try {\n          errorData = await response.json();\n        } catch (parseError) {\n          console.error('Failed to parse error response:', parseError);\n          setMessage(`Error loading mind map: Server responded with status ${response.status} but no valid JSON error message.`);\n          return;\n        }\n        const errorMessage = errorData.message || errorData.error || `Unknown error (Status: ${response.status})`;\n        throw new Error(errorMessage);\n      }\n\n      const result = await response.json();\n      const loadedMap = result.data;\n      setNodes(loadedMap.nodes_data);\n      setConnections(loadedMap.connections_data);\n      setTranslateX(loadedMap.translate_x);\n      setTranslateY(loadedMap.translate_y);\n      setMindmapId(loadedMap.id);\n      setMessage('Mind map loaded successfully!');\n      console.log('Mind map loaded:', loadedMap);\n\n    } catch (error) {\n      setMessage(`Error loading mind map: ${error.message}. Please try again or re-authenticate.`);\n      console.error('Error loading mind map:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [session]); // session is the only dependency here that influences the fetch call\n\n  // Handle Supabase Auth Session\n  useEffect(() => {\n    const handleInitialSession = async () => {\n      const { data: { session: initialSession } } = await supabase.auth.getSession();\n      setSession(initialSession);\n      if (initialSession) {\n        setMessage('Logged in. Attempting to load your latest mind map...');\n        await loadMindMap(); // Await loadMindMap here\n      } else {\n        setMessage('Please log in or sign up.');\n        // Ensure state is reset for unauthenticated users\n        setNodes([\n          { id: '1', x: 400, y: 300, title: 'Central Idea', text: '', isRoot: true, color: '#dc2626' }\n        ]);\n        setConnections([]);\n        setTranslateX(0);\n        setTranslateY(0);\n        setMindmapId(null);\n      }\n    };\n\n    // Call the initial session handler when the component mounts\n    handleInitialSession();\n\n    // Set up the listener for authentication state changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (_event, session) => {\n      console.log('Auth State Change Event:', _event); // <-- VERY IMPORTANT\n      console.log('Auth State Change Session:', session); // <-- VERY IMPORTANT\n      console.log('Current message before update:', message); // See previous message\n\n      setSession(session);\n\n      if (session) {\n        setMessage('Authentication state changed. User is logged in. Loading map...');\n        await loadMindMap(); // Await loadMindMap here\n      } else {\n        setMessage('Logged out. Please log in or sign up.');\n        // Reset state when logged out\n        setNodes([\n          { id: '1', x: 400, y: 300, title: 'Central Idea', text: '', isRoot: true, color: '#dc2626' }\n        ]);\n        setConnections([]);\n        setTranslateX(0);\n        setTranslateY(0);\n        setMindmapId(null);\n      }\n      console.log('Message after update:', message); // See updated message\n      console.log('-----------------------------------');\n    });\n\n    return () => subscription.unsubscribe();\n  }, [loadMindMap, message]);\n\n  // Callback from Auth component after successful login/signup\n  const handleAuthSuccess = useCallback(async (newSession) => {\n    setSession(newSession);\n    setMessage('Authentication successful. Loading your mind map...');\n    await loadMindMap(); // Load map immediately after successful auth, await it\n  }, [loadMindMap]);\n\n  // Logout function\n  const handleLogout = useCallback(async () => {\n    setLoading(true);\n    setMessage('Logging out...');\n    try {\n      const { error } = await supabase.auth.signOut();\n      if (error) throw error;\n      setMessage('Logged out successfully.');\n      // After logout, reset the mind map to default state\n      setNodes([{ id: '1', x: 400, y: 300, title: 'Central Idea', text: '', isRoot: true, color: '#dc2626' }]);\n      setConnections([]);\n      setTranslateX(0);\n      setTranslateY(0);\n      setMindmapId(null);\n    } catch (error) {\n      setMessage(`Logout error: ${error.message}`);\n      console.error('Logout error:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n\n  // --- Mouse Handlers for Node Dragging ---\n  const handleMouseMove = useCallback((e) => {\n    if (!dragDataRef.current.isDragging || !draggedNode) return;\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n    animationFrameRef.current = requestAnimationFrame(() => {\n      const rect = containerRef.current?.getBoundingClientRect();\n      if (!rect) return;\n      const newX = (e.clientX - rect.left - dragDataRef.current.offset.x - translateX);\n      const newY = (e.clientY - rect.top - dragDataRef.current.offset.y - translateY);\n      // Removed constraints to allow movement beyond initial canvas boundaries, adjust as needed\n      // const constrainedX = Math.max(0, Math.min(newX, 2000));\n      // const constrainedY = Math.max(0, Math.min(newY, 1500));\n      setNodes(prev => prev.map(node =>\n        node.id === draggedNode\n          ? { ...node, x: newX, y: newY }\n          : node\n      ));\n    });\n  }, [draggedNode, translateX, translateY]);\n\n  const handleMouseDown = useCallback((e, nodeId) => {\n    e.preventDefault();\n    e.stopPropagation(); // Prevent canvas panning from starting if clicking a node\n    if (selectedNode !== nodeId) {\n      setSelectedNode(nodeId);\n    }\n    const currentCanvasWrapper = canvasWrapperRef.current;\n    if (currentCanvasWrapper) {\n      currentCanvasWrapper.classList.add('no-transition');\n    }\n    const node = nodes.find(n => n.id === nodeId);\n    if (!node) return;\n    const nodeEl = e.currentTarget; // Get the DOM element for the node\n    if (!nodeEl) return;\n    const nodeRect = nodeEl.getBoundingClientRect();\n    const containerRect = containerRef.current?.getBoundingClientRect();\n    if (!containerRect) return;\n\n    // Calculate offset relative to the node's top-left corner\n    dragDataRef.current = {\n      isDragging: true,\n      offset: {\n        x: e.clientX - nodeRect.left,\n        y: e.clientY - nodeRect.top\n      }\n    };\n    setDraggedNode(nodeId);\n  }, [nodes, selectedNode]);\n\n  const handleMouseUp = useCallback(() => {\n    dragDataRef.current.isDragging = false;\n    setDraggedNode(null);\n    setIsPanning(false); // Ensure panning state is reset\n    const currentCanvasWrapper = canvasWrapperRef.current;\n    if (currentCanvasWrapper) {\n      currentCanvasWrapper.classList.remove('no-transition');\n    }\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n      animationFrameRef.current = null;\n    }\n  }, []);\n\n  // --- Mouse Handlers for Panning ---\n  const handlePanMouseDown = useCallback((e) => {\n    // Only pan if a node isn't clicked and it's the left mouse button\n    const isTargetNode = e.target.closest('.mindmap-node');\n    const isTargetToolbar = e.target.closest('.mindmap-toolbar');\n    const isTargetInstructions = e.target.closest('.mindmap-instructions');\n    const isTargetLargeEditor = e.target.closest('.large-text-editor-overlay');\n    if (isTargetNode || isTargetToolbar || isTargetInstructions || isTargetLargeEditor || e.button !== 0) {\n      return;\n    }\n    setIsPanning(true);\n    panStartRef.current = {\n      x: e.clientX,\n      y: e.clientY,\n      startTranslateX: translateX,\n      startTranslateY: translateY\n    };\n    const currentCanvasWrapper = canvasWrapperRef.current;\n    if (currentCanvasWrapper) {\n      currentCanvasWrapper.classList.add('no-transition');\n    }\n    setSelectedNode(null); // Deselect any node when panning starts\n    e.preventDefault(); // Prevent default browser drag behavior\n  }, [translateX, translateY]);\n\n  const handlePanMouseMove = useCallback((e) => {\n    if (!isPanning) return;\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n    animationFrameRef.current = requestAnimationFrame(() => {\n      const dx = e.clientX - panStartRef.current.x;\n      const dy = e.clientY - panStartRef.current.y;\n      setTranslateX(panStartRef.current.startTranslateX + dx);\n      setTranslateY(panStartRef.current.startTranslateY + dy);\n    });\n  }, [isPanning]);\n\n  // Global mouse event listeners for dragging and panning\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    const handleGlobalMove = (e) => {\n      if (draggedNode) {\n        handleMouseMove(e);\n      } else if (isPanning) {\n        handlePanMouseMove(e);\n      }\n    };\n\n    const handleGlobalUp = () => handleMouseUp(); // This function resets all dragging/panning states\n\n    const handlePanDown = (e) => handlePanMouseDown(e); // Listener for canvas pan initiation\n\n    document.addEventListener('mouseup', handleGlobalUp);\n    document.addEventListener('mouseleave', handleGlobalUp); // Important for when mouse leaves window\n    container.addEventListener('mousemove', handleGlobalMove); // Listen on container for mouse movement\n    container.addEventListener('mousedown', handlePanDown); // Listen on container for pan start\n\n    return () => {\n      document.removeEventListener('mouseup', handleGlobalUp);\n      document.removeEventListener('mouseleave', handleGlobalUp);\n      container.removeEventListener('mousemove', handleGlobalMove);\n      container.removeEventListener('mousedown', handlePanDown);\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n      // Ensure no-transition class is removed on unmount too\n      const currentCanvasWrapper = canvasWrapperRef.current;\n      if (currentCanvasWrapper) {\n        currentCanvasWrapper.classList.remove('no-transition');\n      }\n    };\n  }, [handleMouseMove, handleMouseUp, handlePanMouseDown, handlePanMouseMove, draggedNode, isPanning]);\n\n\n  // --- Large Text Editor Functions ---\n  const closeLargeEditor = useCallback(() => {\n    setIsLargeEditorOpen(false);\n    setLargeEditorNodeId(null);\n    setLargeEditorTitle('');\n    setLargeEditorText('');\n  }, []);\n\n  const saveLargeEditorText = useCallback((newTitle, newText) => {\n    if (!largeEditorNodeId) return;\n    setNodes(prev =>\n      prev.map(node => (\n        node.id === largeEditorNodeId\n          ? { ...node, title: newTitle.trim() || 'New Idea', text: newText.trim() || '' }\n          : node\n      ))\n    );\n    closeLargeEditor();\n  }, [largeEditorNodeId, closeLargeEditor]);\n\n  const openLargeEditor = useCallback((nodeId) => {\n    const node = nodes.find(n => n.id === nodeId);\n    if (node) {\n      setIsLargeEditorOpen(true);\n      setLargeEditorNodeId(nodeId);\n      setLargeEditorTitle(node.title || '');\n      setLargeEditorText(node.text || '');\n    }\n  }, [nodes]);\n\n  const addNode = useCallback(() => {\n    const parent = selectedNode ? nodes.find(n => n.id === selectedNode) : nodes.find(n => n.isRoot);\n    if (!parent) {\n      setMessage('Cannot add node: No root node found or selected node does not exist.');\n      return;\n    }\n    const angle = Math.random() * 2 * Math.PI;\n    const distance = 150;\n    const newNode = {\n      id: Date.now().toString(),\n      x: parent.x + Math.cos(angle) * distance,\n      y: parent.y + Math.sin(angle) * distance,\n      title: 'New Idea',\n      text: '',\n      color: colors[Math.floor(Math.random() * colors.length)]\n    };\n    setNodes(prev => [...prev, newNode]);\n    setConnections(prev => [...prev, { from: parent.id, to: newNode.id }]);\n    setSelectedNode(newNode.id);\n    openLargeEditor(newNode.id);\n  }, [nodes, colors, selectedNode, openLargeEditor]);\n\n  const deleteNode = useCallback(() => {\n    const nodeToDelete = nodes.find(n => n.id === selectedNode);\n    if (!nodeToDelete || nodeToDelete.isRoot) {\n      setMessage('Cannot delete root node or no node selected.');\n      return;\n    }\n    setNodes(prev => prev.filter(n => n.id !== selectedNode));\n    setConnections(prev => prev.filter(c => c.from !== selectedNode && c.to !== selectedNode));\n    setSelectedNode(null); // Deselect after deleting\n  }, [nodes, selectedNode]);\n\n  const isRootSelected = selectedNode ? nodes.find(n => n.id === selectedNode)?.isRoot : false;\n\n  // Render Auth component if no session\n  if (!session) {\n    return <Auth onAuthSuccess={handleAuthSuccess} />;\n  }\n\n  return (\n    <div className=\"mindmap-container\" ref={containerRef}>\n      <MindMapToolbar\n        onAddNode={addNode}\n        onEditNode={() => selectedNode && openLargeEditor(selectedNode)} \n        onDeleteNode={deleteNode}\n        selectedNode={selectedNode}\n        isRootSelected={isRootSelected}\n        onSave={saveMindMap}\n        onLoad={loadMindMap}\n        loading={loading}\n        message={message}\n        onLogout={handleLogout}\n        userName={session?.user?.email || 'User'}\n      />\n\n      <MindMapInstructions />\n\n      <MindMapCanvas\n        nodes={nodes}\n        connections={connections}\n        draggedNode={draggedNode}\n        selectedNode={selectedNode}\n        translateX={translateX}\n        translateY={translateY}\n        handleMouseDown={handleMouseDown}\n        openNodeEditor={openLargeEditor}\n        canvasWrapperRef={canvasWrapperRef}\n        svgRef={svgRef}\n      />\n\n      {isLargeEditorOpen && (\n        <LargeTextEditor\n          isOpen={isLargeEditorOpen}\n          initialTitle={largeEditorTitle}\n          initialText={largeEditorText}\n          onSave={saveLargeEditorText}\n          onCancel={closeLargeEditor}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default MindMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}