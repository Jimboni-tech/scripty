{"ast":null,"code":"var _jsxFileName = \"/Users/jimmyzhou/Desktop/Projects/scripty/frontend/src/pages/mindmapdashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './mindmapdashboard.css'; // Create this CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_BACKEND_API_URL || 'http://localhost:5001/api';\nconst MindMapDashboard = () => {\n  _s();\n  // Removed props: session, onLogout, onSetDashboardTitle\n  const [mindMaps, setMindMaps] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [message, setMessage] = useState('');\n  const [session, setSession] = useState(null); // Re-added session state\n  const navigate = useNavigate();\n\n  // On component mount, check session and load data\n  useEffect(() => {\n    const storedSession = localStorage.getItem('mindmapSession');\n    if (storedSession) {\n      try {\n        const parsedSession = JSON.parse(storedSession);\n        if (parsedSession && parsedSession.token && parsedSession.user) {\n          setSession(parsedSession);\n          // Fetch user's mind maps immediately after successful session load\n          fetchUserMindMaps(parsedSession.token);\n        } else {\n          localStorage.removeItem('mindmapSession'); // Clear invalid session\n          navigate('/');\n        }\n      } catch (e) {\n        console.error(\"Failed to parse session from localStorage\", e);\n        localStorage.removeItem('mindmapSession');\n        navigate('/');\n      }\n    } else {\n      navigate('/');\n    }\n  }, [navigate]); // No fetchUserMindMaps here, will be called inside handleLogout\n\n  const handleLogout = () => {\n    // Local handleLogout\n    setSession(null);\n    localStorage.removeItem('mindmapSession');\n    navigate('/');\n  };\n  const fetchUserMindMaps = async token => {\n    // Made async, no useCallback\n    setLoading(true);\n    setMessage('Fetching your mind maps...');\n    try {\n      const response = await fetch(`${API_BASE_URL}/mindmaps`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (!response.ok) {\n        if (response.status === 401) {\n          setMessage('Session expired or unauthorized. Please log in again.');\n          handleLogout(); // Use local handleLogout\n          return;\n        }\n        throw new Error(`Error fetching mind maps: ${response.statusText}`);\n      }\n      const data = await response.json();\n      setMindMaps(data);\n      setMessage('Your mind maps loaded!');\n    } catch (error) {\n      console.error('Fetch mind maps error:', error);\n      setMessage(`Failed to fetch mind maps: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleLoad = id => {\n    navigate(`/mindmap/${id}`);\n  };\n  const handleNew = () => {\n    navigate('/mindmap/new');\n  };\n\n  // If no session, navigate to login. ProtectedRoute should handle this, but as a fallback.\n  if (!session) {\n    return null; // Or a loading spinner if you want\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Your Mind Maps\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleNew,\n      children: \"+ New Mind Map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this) : mindMaps.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No mind maps found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: mindMaps.map(map => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: map.title || 'Untitled'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleLoad(map._id),\n          children: \"Open\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 15\n        }, this)]\n      }, map._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(MindMapDashboard, \"E+oEdjxGwKsiLwbb+8j46zSY3zc=\", false, function () {\n  return [useNavigate];\n});\n_c = MindMapDashboard;\nexport default MindMapDashboard;\nvar _c;\n$RefreshReg$(_c, \"MindMapDashboard\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","jsxDEV","_jsxDEV","API_BASE_URL","process","env","REACT_APP_BACKEND_API_URL","MindMapDashboard","_s","mindMaps","setMindMaps","loading","setLoading","message","setMessage","session","setSession","navigate","storedSession","localStorage","getItem","parsedSession","JSON","parse","token","user","fetchUserMindMaps","removeItem","e","console","error","handleLogout","response","fetch","headers","ok","status","Error","statusText","data","json","handleLoad","id","handleNew","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","map","title","_id","_c","$RefreshReg$"],"sources":["/Users/jimmyzhou/Desktop/Projects/scripty/frontend/src/pages/mindmapdashboard.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './mindmapdashboard.css'; // Create this CSS file for styling\nconst API_BASE_URL = process.env.REACT_APP_BACKEND_API_URL || 'http://localhost:5001/api';\n\nconst MindMapDashboard = () => { // Removed props: session, onLogout, onSetDashboardTitle\n  const [mindMaps, setMindMaps] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [message, setMessage] = useState('');\n  const [session, setSession] = useState(null); // Re-added session state\n  const navigate = useNavigate();\n\n  // On component mount, check session and load data\n  useEffect(() => {\n    const storedSession = localStorage.getItem('mindmapSession');\n    if (storedSession) {\n      try {\n        const parsedSession = JSON.parse(storedSession);\n        if (parsedSession && parsedSession.token && parsedSession.user) {\n          setSession(parsedSession);\n          // Fetch user's mind maps immediately after successful session load\n          fetchUserMindMaps(parsedSession.token);\n        } else {\n          localStorage.removeItem('mindmapSession'); // Clear invalid session\n          navigate('/');\n        }\n      } catch (e) {\n        console.error(\"Failed to parse session from localStorage\", e);\n        localStorage.removeItem('mindmapSession');\n        navigate('/');\n      }\n    } else {\n      navigate('/');\n    }\n  }, [navigate]); // No fetchUserMindMaps here, will be called inside handleLogout\n\n  const handleLogout = () => { // Local handleLogout\n    setSession(null);\n    localStorage.removeItem('mindmapSession');\n    navigate('/');\n  };\n\n  const fetchUserMindMaps = async (token) => { // Made async, no useCallback\n    setLoading(true);\n    setMessage('Fetching your mind maps...');\n    try {\n      const response = await fetch(`${API_BASE_URL}/mindmaps`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) {\n        if (response.status === 401) {\n          setMessage('Session expired or unauthorized. Please log in again.');\n          handleLogout(); // Use local handleLogout\n          return;\n        }\n        throw new Error(`Error fetching mind maps: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      setMindMaps(data);\n      setMessage('Your mind maps loaded!');\n    } catch (error) {\n      console.error('Fetch mind maps error:', error);\n      setMessage(`Failed to fetch mind maps: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n\n  const handleLoad = (id) => {\n    navigate(`/mindmap/${id}`);\n  };\n\n  const handleNew = () => {\n    navigate('/mindmap/new');\n  };\n\n  // If no session, navigate to login. ProtectedRoute should handle this, but as a fallback.\n  if (!session) {\n    return null; // Or a loading spinner if you want\n  }\n\n  return (\n    <div className=\"dashboard-container\">\n      <h2>Your Mind Maps</h2>\n      <button onClick={handleNew}>+ New Mind Map</button>\n      {loading ? (\n        <p>Loading...</p>\n      ) : mindMaps.length === 0 ? (\n        <p>No mind maps found.</p>\n      ) : (\n        <ul>\n          {mindMaps.map(map => (\n            <li key={map._id}>\n              <span>{map.title || 'Untitled'}</span>\n              <button onClick={() => handleLoad(map._id)}>Open</button>\n            </li>\n          ))}\n        </ul>\n      )}\n    \n    </div>\n  );\n};\n\nexport default MindMapDashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}